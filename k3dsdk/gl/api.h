#ifndef K3DSDK_OPENGL_API_H
#define K3DSDK_OPENGL_API_H

/////////////////////////////////////////////////////////////////////////////////
//
// Generated file, do not edit by hand!
//
/////////////////////////////////////////////////////////////////////////////////

#include <k3dsdk/types.h>

namespace k3d
{

namespace gl
{

class api
{
public:
	typedef void GLvoid;
	typedef char GLchar;
	typedef int8_t GLbyte;
	typedef int16_t GLshort;
	typedef int32_t GLint;
	typedef int32_t GLsizei;
	typedef float_t GLfloat;
	typedef float_t GLclampf;
	typedef double_t GLdouble;
	typedef double_t GLclampd;
	typedef uint8_t GLubyte;
	typedef uint8_t GLboolean;
	typedef uint16_t GLushort;
	typedef uint32_t GLuint;
	typedef uint32_t GLenum;
	typedef uint32_t GLbitfield;

	typedef ptrdiff_t GLintptr;
	typedef ptrdiff_t GLsizeiptr;
	typedef ptrdiff_t GLintptrARB;
	typedef ptrdiff_t GLsizeiptrARB;
	typedef char GLcharARB;
	typedef unsigned int GLhandleARB;
	typedef unsigned short GLhalfARB;
	typedef unsigned short GLhalfNV;

	typedef int64_t GLint64EXT;
	typedef uint64_t GLuint64EXT;

	typedef int64_t GLint64;
	typedef uint64_t GLuint64;
	typedef struct __GLsync *GLsync;

	api();

	enum constants
	{
		ABGR_EXT = 0x8000,
		ACCUM = 0x0100,
		ACCUM_ALPHA_BITS = 0x0D5B,
		ACCUM_BLUE_BITS = 0x0D5A,
		ACCUM_BUFFER_BIT = 0x00000200,
		ACCUM_CLEAR_VALUE = 0x0B80,
		ACCUM_GREEN_BITS = 0x0D59,
		ACCUM_RED_BITS = 0x0D58,
		ACTIVE_ATTRIBUTES = 0x8B89,
		ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x8B8A,
		ACTIVE_PROGRAM_EXT = 0x8B8D,
		ACTIVE_STENCIL_FACE_EXT = 0x8911,
		ACTIVE_TEXTURE = 0x84E0,
		ACTIVE_TEXTURE_ARB = 0x84E0,
		ACTIVE_UNIFORMS = 0x8B86,
		ACTIVE_UNIFORM_BLOCKS = 0x8A36,
		ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 0x8A35,
		ACTIVE_UNIFORM_MAX_LENGTH = 0x8B87,
		ACTIVE_VARYINGS_NV = 0x8C81,
		ACTIVE_VARYING_MAX_LENGTH_NV = 0x8C82,
		ACTIVE_VERTEX_UNITS_ARB = 0x86A5,
		ADD = 0x0104,
		ADD_ATI = 0x8963,
		ADD_BLEND_IMG = 0x8C09,
		ADD_SIGNED = 0x8574,
		ADD_SIGNED_EXT = 0x8574,
		ALIASED_LINE_WIDTH_RANGE = 0x846E,
		ALIASED_POINT_SIZE_RANGE = 0x846D,
		ALL_ATTRIB_BITS = 0xFFFFFFFF,
		ALL_COMPLETED_NV = 0x84F2,
		ALPHA = 0x1906,
		ALPHA12 = 0x803D,
		ALPHA12_EXT = 0x803D,
		ALPHA16 = 0x803E,
		ALPHA16F_ARB = 0x881C,
		ALPHA16I_EXT = 0x8D8A,
		ALPHA16UI_EXT = 0x8D78,
		ALPHA16_EXT = 0x803E,
		ALPHA16_SNORM = 0x9018,
		ALPHA32F_ARB = 0x8816,
		ALPHA32I_EXT = 0x8D84,
		ALPHA32UI_EXT = 0x8D72,
		ALPHA4 = 0x803B,
		ALPHA4_EXT = 0x803B,
		ALPHA8 = 0x803C,
		ALPHA8I_EXT = 0x8D90,
		ALPHA8UI_EXT = 0x8D7E,
		ALPHA8_EXT = 0x803C,
		ALPHA8_SNORM = 0x9014,
		ALPHA_BIAS = 0x0D1D,
		ALPHA_BITS = 0x0D55,
		ALPHA_FLOAT16_APPLE = 0x881C,
		ALPHA_FLOAT16_ATI = 0x881C,
		ALPHA_FLOAT32_APPLE = 0x8816,
		ALPHA_FLOAT32_ATI = 0x8816,
		ALPHA_INTEGER = 0x8D97,
		ALPHA_INTEGER_EXT = 0x8D97,
		ALPHA_MAX_CLAMP_INGR = 0x8567,
		ALPHA_MAX_SGIX = 0x8321,
		ALPHA_MIN_CLAMP_INGR = 0x8563,
		ALPHA_MIN_SGIX = 0x8320,
		ALPHA_SCALE = 0x0D1C,
		ALPHA_SNORM = 0x9010,
		ALPHA_TEST = 0x0BC0,
		ALPHA_TEST_FUNC = 0x0BC1,
		ALPHA_TEST_REF = 0x0BC2,
		ALREADY_SIGNALED = 0x911A,
		ALWAYS = 0x0207,
		AMBIENT = 0x1200,
		AMBIENT_AND_DIFFUSE = 0x1602,
		AND = 0x1501,
		AND_INVERTED = 0x1504,
		AND_REVERSE = 0x1502,
		ARB_imaging = 1,
		ARRAY_BUFFER = 0x8892,
		ARRAY_BUFFER_ARB = 0x8892,
		ARRAY_BUFFER_BINDING = 0x8894,
		ARRAY_BUFFER_BINDING_ARB = 0x8894,
		ARRAY_ELEMENT_LOCK_COUNT_EXT = 0x81A9,
		ARRAY_ELEMENT_LOCK_FIRST_EXT = 0x81A8,
		ARRAY_OBJECT_BUFFER_ATI = 0x8766,
		ARRAY_OBJECT_OFFSET_ATI = 0x8767,
		ASYNC_DRAW_PIXELS_SGIX = 0x835D,
		ASYNC_HISTOGRAM_SGIX = 0x832C,
		ASYNC_MARKER_SGIX = 0x8329,
		ASYNC_READ_PIXELS_SGIX = 0x835E,
		ASYNC_TEX_IMAGE_SGIX = 0x835C,
		ATC_RGBA_EXPLICIT_ALPHA_AMD = 0x8C93,
		ATC_RGBA_INTERPOLATED_ALPHA_AMD = 0x87EE,
		ATC_RGB_AMD = 0x8C92,
		ATTACHED_SHADERS = 0x8B85,
		ATTENUATION_EXT = 0x834D,
		ATTRIB_ARRAY_POINTER_NV = 0x8645,
		ATTRIB_ARRAY_SIZE_NV = 0x8623,
		ATTRIB_ARRAY_STRIDE_NV = 0x8624,
		ATTRIB_ARRAY_TYPE_NV = 0x8625,
		ATTRIB_STACK_DEPTH = 0x0BB0,
		AUTO_NORMAL = 0x0D80,
		AUX0 = 0x0409,
		AUX1 = 0x040A,
		AUX2 = 0x040B,
		AUX3 = 0x040C,
		AUX_BUFFERS = 0x0C00,
		AUX_DEPTH_STENCIL_APPLE = 0x8A14,
		AVERAGE_EXT = 0x8335,
		BACK = 0x0405,
		BACK_LEFT = 0x0402,
		BACK_PRIMARY_COLOR_NV = 0x8C77,
		BACK_RIGHT = 0x0403,
		BACK_SECONDARY_COLOR_NV = 0x8C78,
		BGR = 0x80E0,
		BGRA = 0x80E1,
		BGRA_EXT = 0x80E1,
		BGRA_INTEGER = 0x8D9B,
		BGRA_INTEGER_EXT = 0x8D9B,
		BGR_EXT = 0x80E0,
		BGR_INTEGER = 0x8D9A,
		BGR_INTEGER_EXT = 0x8D9A,
		BIAS_BIT_ATI = 0x00000008,
		BIAS_BY_NEGATIVE_ONE_HALF_NV = 0x8541,
		BITMAP = 0x1A00,
		BITMAP_TOKEN = 0x0704,
		BLEND = 0x0BE2,
		BLEND_COLOR = 0x8005,
		BLEND_COLOR_EXT = 0x8005,
		BLEND_DST = 0x0BE0,
		BLEND_DST_ALPHA = 0x80CA,
		BLEND_DST_ALPHA_EXT = 0x80CA,
		BLEND_DST_ALPHA_OES = 0x80CA,
		BLEND_DST_RGB = 0x80C8,
		BLEND_DST_RGB_EXT = 0x80C8,
		BLEND_DST_RGB_OES = 0x80C8,
		BLEND_EQUATION = 0x8009,
		BLEND_EQUATION_ALPHA = 0x883D,
		BLEND_EQUATION_ALPHA_EXT = 0x883D,
		BLEND_EQUATION_ALPHA_OES = 0x883D,
		BLEND_EQUATION_EXT = 0x8009,
		BLEND_EQUATION_OES = 0x8009,
		BLEND_EQUATION_RGB = 0x8009,
		BLEND_EQUATION_RGB_EXT = 0x8009,
		BLEND_EQUATION_RGB_OES = 0x8009,
		BLEND_SRC = 0x0BE1,
		BLEND_SRC_ALPHA = 0x80CB,
		BLEND_SRC_ALPHA_EXT = 0x80CB,
		BLEND_SRC_ALPHA_OES = 0x80CB,
		BLEND_SRC_RGB = 0x80C9,
		BLEND_SRC_RGB_EXT = 0x80C9,
		BLEND_SRC_RGB_OES = 0x80C9,
		BLUE = 0x1905,
		BLUE_BIAS = 0x0D1B,
		BLUE_BITS = 0x0D54,
		BLUE_BIT_ATI = 0x00000004,
		BLUE_INTEGER = 0x8D96,
		BLUE_INTEGER_EXT = 0x8D96,
		BLUE_MAX_CLAMP_INGR = 0x8566,
		BLUE_MIN_CLAMP_INGR = 0x8562,
		BLUE_SCALE = 0x0D1A,
		BOOL = 0x8B56,
		BOOL_ARB = 0x8B56,
		BOOL_VEC2 = 0x8B57,
		BOOL_VEC2_ARB = 0x8B57,
		BOOL_VEC3 = 0x8B58,
		BOOL_VEC3_ARB = 0x8B58,
		BOOL_VEC4 = 0x8B59,
		BOOL_VEC4_ARB = 0x8B59,
		BUFFER_ACCESS = 0x88BB,
		BUFFER_ACCESS_ARB = 0x88BB,
		BUFFER_ACCESS_FLAGS = 0x911F,
		BUFFER_ACCESS_OES = 0x88BB,
		BUFFER_FLUSHING_UNMAP_APPLE = 0x8A13,
		BUFFER_GPU_ADDRESS_NV = 0x8F1D,
		BUFFER_MAPPED = 0x88BC,
		BUFFER_MAPPED_ARB = 0x88BC,
		BUFFER_MAPPED_OES = 0x88BC,
		BUFFER_MAP_LENGTH = 0x9120,
		BUFFER_MAP_OFFSET = 0x9121,
		BUFFER_MAP_POINTER = 0x88BD,
		BUFFER_MAP_POINTER_ARB = 0x88BD,
		BUFFER_MAP_POINTER_OES = 0x88BD,
		BUFFER_OBJECT_APPLE = 0x85B3,
		BUFFER_SERIALIZED_MODIFY_APPLE = 0x8A12,
		BUFFER_SIZE = 0x8764,
		BUFFER_SIZE_ARB = 0x8764,
		BUFFER_USAGE = 0x8765,
		BUFFER_USAGE_ARB = 0x8765,
		BUMP_ENVMAP_ATI = 0x877B,
		BUMP_NUM_TEX_UNITS_ATI = 0x8777,
		BUMP_ROT_MATRIX_ATI = 0x8775,
		BUMP_ROT_MATRIX_SIZE_ATI = 0x8776,
		BUMP_TARGET_ATI = 0x877C,
		BUMP_TEX_UNITS_ATI = 0x8778,
		BYTE = 0x1400,
		C3F_V3F = 0x2A24,
		C4F_N3F_V3F = 0x2A26,
		C4UB_V2F = 0x2A22,
		C4UB_V3F = 0x2A23,
		CALLIGRAPHIC_FRAGMENT_SGIX = 0x8183,
		CCW = 0x0901,
		CLAMP = 0x2900,
		CLAMP_FRAGMENT_COLOR = 0x891B,
		CLAMP_FRAGMENT_COLOR_ARB = 0x891B,
		CLAMP_READ_COLOR = 0x891C,
		CLAMP_READ_COLOR_ARB = 0x891C,
		CLAMP_TO_BORDER = 0x812D,
		CLAMP_TO_BORDER_ARB = 0x812D,
		CLAMP_TO_BORDER_SGIS = 0x812D,
		CLAMP_TO_EDGE = 0x812F,
		CLAMP_TO_EDGE_SGIS = 0x812F,
		CLAMP_VERTEX_COLOR = 0x891A,
		CLAMP_VERTEX_COLOR_ARB = 0x891A,
		CLEAR = 0x1500,
		CLIENT_ACTIVE_TEXTURE = 0x84E1,
		CLIENT_ACTIVE_TEXTURE_ARB = 0x84E1,
		CLIENT_ALL_ATTRIB_BITS = 0xFFFFFFFF,
		CLIENT_ATTRIB_STACK_DEPTH = 0x0BB1,
		CLIENT_PIXEL_STORE_BIT = 0x00000001,
		CLIENT_VERTEX_ARRAY_BIT = 0x00000002,
		CLIP_DISTANCE0 = 0x3000,
		CLIP_DISTANCE1 = 0x3001,
		CLIP_DISTANCE2 = 0x3002,
		CLIP_DISTANCE3 = 0x3003,
		CLIP_DISTANCE4 = 0x3004,
		CLIP_DISTANCE5 = 0x3005,
		CLIP_DISTANCE6 = 0x3006,
		CLIP_DISTANCE7 = 0x3007,
		CLIP_DISTANCE_NV = 0x8C7A,
		CLIP_PLANE0 = 0x3000,
		CLIP_PLANE1 = 0x3001,
		CLIP_PLANE2 = 0x3002,
		CLIP_PLANE3 = 0x3003,
		CLIP_PLANE4 = 0x3004,
		CLIP_PLANE5 = 0x3005,
		CMYKA_EXT = 0x800D,
		CMYK_EXT = 0x800C,
		CND0_ATI = 0x896B,
		CND_ATI = 0x896A,
		COEFF = 0x0A00,
		COLOR = 0x1800,
		COLOR_ALPHA_PAIRING_ATI = 0x8975,
		COLOR_ARRAY = 0x8076,
		COLOR_ARRAY_ADDRESS_NV = 0x8F23,
		COLOR_ARRAY_BUFFER_BINDING = 0x8898,
		COLOR_ARRAY_BUFFER_BINDING_ARB = 0x8898,
		COLOR_ARRAY_COUNT_EXT = 0x8084,
		COLOR_ARRAY_EXT = 0x8076,
		COLOR_ARRAY_LENGTH_NV = 0x8F2D,
		COLOR_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F7,
		COLOR_ARRAY_POINTER = 0x8090,
		COLOR_ARRAY_POINTER_EXT = 0x8090,
		COLOR_ARRAY_SIZE = 0x8081,
		COLOR_ARRAY_SIZE_EXT = 0x8081,
		COLOR_ARRAY_STRIDE = 0x8083,
		COLOR_ARRAY_STRIDE_EXT = 0x8083,
		COLOR_ARRAY_TYPE = 0x8082,
		COLOR_ARRAY_TYPE_EXT = 0x8082,
		COLOR_ATTACHMENT0 = 0x8CE0,
		COLOR_ATTACHMENT0_EXT = 0x8CE0,
		COLOR_ATTACHMENT0_OES = 0x8CE0,
		COLOR_ATTACHMENT1 = 0x8CE1,
		COLOR_ATTACHMENT10 = 0x8CEA,
		COLOR_ATTACHMENT10_EXT = 0x8CEA,
		COLOR_ATTACHMENT11 = 0x8CEB,
		COLOR_ATTACHMENT11_EXT = 0x8CEB,
		COLOR_ATTACHMENT12 = 0x8CEC,
		COLOR_ATTACHMENT12_EXT = 0x8CEC,
		COLOR_ATTACHMENT13 = 0x8CED,
		COLOR_ATTACHMENT13_EXT = 0x8CED,
		COLOR_ATTACHMENT14 = 0x8CEE,
		COLOR_ATTACHMENT14_EXT = 0x8CEE,
		COLOR_ATTACHMENT15 = 0x8CEF,
		COLOR_ATTACHMENT15_EXT = 0x8CEF,
		COLOR_ATTACHMENT1_EXT = 0x8CE1,
		COLOR_ATTACHMENT2 = 0x8CE2,
		COLOR_ATTACHMENT2_EXT = 0x8CE2,
		COLOR_ATTACHMENT3 = 0x8CE3,
		COLOR_ATTACHMENT3_EXT = 0x8CE3,
		COLOR_ATTACHMENT4 = 0x8CE4,
		COLOR_ATTACHMENT4_EXT = 0x8CE4,
		COLOR_ATTACHMENT5 = 0x8CE5,
		COLOR_ATTACHMENT5_EXT = 0x8CE5,
		COLOR_ATTACHMENT6 = 0x8CE6,
		COLOR_ATTACHMENT6_EXT = 0x8CE6,
		COLOR_ATTACHMENT7 = 0x8CE7,
		COLOR_ATTACHMENT7_EXT = 0x8CE7,
		COLOR_ATTACHMENT8 = 0x8CE8,
		COLOR_ATTACHMENT8_EXT = 0x8CE8,
		COLOR_ATTACHMENT9 = 0x8CE9,
		COLOR_ATTACHMENT9_EXT = 0x8CE9,
		COLOR_BUFFER_BIT = 0x00004000,
		COLOR_CLEAR_UNCLAMPED_VALUE_ATI = 0x8835,
		COLOR_CLEAR_VALUE = 0x0C22,
		COLOR_EXT = 0x1800,
		COLOR_FLOAT_APPLE = 0x8A0F,
		COLOR_INDEX = 0x1900,
		COLOR_INDEXES = 0x1603,
		COLOR_LOGIC_OP = 0x0BF2,
		COLOR_MATERIAL = 0x0B57,
		COLOR_MATERIAL_FACE = 0x0B55,
		COLOR_MATERIAL_PARAMETER = 0x0B56,
		COLOR_MATRIX = 0x80B1,
		COLOR_MATRIX_SGI = 0x80B1,
		COLOR_MATRIX_STACK_DEPTH = 0x80B2,
		COLOR_MATRIX_STACK_DEPTH_SGI = 0x80B2,
		COLOR_SUM = 0x8458,
		COLOR_SUM_ARB = 0x8458,
		COLOR_SUM_CLAMP_NV = 0x854F,
		COLOR_SUM_EXT = 0x8458,
		COLOR_TABLE = 0x80D0,
		COLOR_TABLE_ALPHA_SIZE = 0x80DD,
		COLOR_TABLE_ALPHA_SIZE_SGI = 0x80DD,
		COLOR_TABLE_BIAS = 0x80D7,
		COLOR_TABLE_BIAS_SGI = 0x80D7,
		COLOR_TABLE_BLUE_SIZE = 0x80DC,
		COLOR_TABLE_BLUE_SIZE_SGI = 0x80DC,
		COLOR_TABLE_FORMAT = 0x80D8,
		COLOR_TABLE_FORMAT_SGI = 0x80D8,
		COLOR_TABLE_GREEN_SIZE = 0x80DB,
		COLOR_TABLE_GREEN_SIZE_SGI = 0x80DB,
		COLOR_TABLE_INTENSITY_SIZE = 0x80DF,
		COLOR_TABLE_INTENSITY_SIZE_SGI = 0x80DF,
		COLOR_TABLE_LUMINANCE_SIZE = 0x80DE,
		COLOR_TABLE_LUMINANCE_SIZE_SGI = 0x80DE,
		COLOR_TABLE_RED_SIZE = 0x80DA,
		COLOR_TABLE_RED_SIZE_SGI = 0x80DA,
		COLOR_TABLE_SCALE = 0x80D6,
		COLOR_TABLE_SCALE_SGI = 0x80D6,
		COLOR_TABLE_SGI = 0x80D0,
		COLOR_TABLE_WIDTH = 0x80D9,
		COLOR_TABLE_WIDTH_SGI = 0x80D9,
		COLOR_WRITEMASK = 0x0C23,
		COMBINE = 0x8570,
		COMBINE4_NV = 0x8503,
		COMBINER0_NV = 0x8550,
		COMBINER1_NV = 0x8551,
		COMBINER2_NV = 0x8552,
		COMBINER3_NV = 0x8553,
		COMBINER4_NV = 0x8554,
		COMBINER5_NV = 0x8555,
		COMBINER6_NV = 0x8556,
		COMBINER7_NV = 0x8557,
		COMBINER_AB_DOT_PRODUCT_NV = 0x8545,
		COMBINER_AB_OUTPUT_NV = 0x854A,
		COMBINER_BIAS_NV = 0x8549,
		COMBINER_CD_DOT_PRODUCT_NV = 0x8546,
		COMBINER_CD_OUTPUT_NV = 0x854B,
		COMBINER_COMPONENT_USAGE_NV = 0x8544,
		COMBINER_INPUT_NV = 0x8542,
		COMBINER_MAPPING_NV = 0x8543,
		COMBINER_MUX_SUM_NV = 0x8547,
		COMBINER_SCALE_NV = 0x8548,
		COMBINER_SUM_OUTPUT_NV = 0x854C,
		COMBINE_ALPHA = 0x8572,
		COMBINE_ALPHA_EXT = 0x8572,
		COMBINE_EXT = 0x8570,
		COMBINE_RGB = 0x8571,
		COMBINE_RGB_EXT = 0x8571,
		COMPARE_REF_DEPTH_TO_TEXTURE_EXT = 0x884E,
		COMPARE_REF_TO_TEXTURE = 0x884E,
		COMPARE_R_TO_TEXTURE = 0x884E,
		COMPARE_R_TO_TEXTURE_ARB = 0x884E,
		COMPILE = 0x1300,
		COMPILE_AND_EXECUTE = 0x1301,
		COMPILE_STATUS = 0x8B81,
		COMPRESSED_ALPHA = 0x84E9,
		COMPRESSED_ALPHA_ARB = 0x84E9,
		COMPRESSED_INTENSITY = 0x84EC,
		COMPRESSED_INTENSITY_ARB = 0x84EC,
		COMPRESSED_LUMINANCE = 0x84EA,
		COMPRESSED_LUMINANCE_ALPHA = 0x84EB,
		COMPRESSED_LUMINANCE_ALPHA_ARB = 0x84EB,
		COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT = 0x8C72,
		COMPRESSED_LUMINANCE_ARB = 0x84EA,
		COMPRESSED_LUMINANCE_LATC1_EXT = 0x8C70,
		COMPRESSED_RED = 0x8225,
		COMPRESSED_RED_GREEN_RGTC2_EXT = 0x8DBD,
		COMPRESSED_RED_RGTC1 = 0x8DBB,
		COMPRESSED_RED_RGTC1_EXT = 0x8DBB,
		COMPRESSED_RG = 0x8226,
		COMPRESSED_RGB = 0x84ED,
		COMPRESSED_RGBA = 0x84EE,
		COMPRESSED_RGBA_ARB = 0x84EE,
		COMPRESSED_RGBA_FXT1_3DFX = 0x86B1,
		COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = 0x8C03,
		COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = 0x8C02,
		COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1,
		COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2,
		COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3,
		COMPRESSED_RGB_ARB = 0x84ED,
		COMPRESSED_RGB_FXT1_3DFX = 0x86B0,
		COMPRESSED_RGB_PVRTC_2BPPV1_IMG = 0x8C01,
		COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 0x8C00,
		COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0,
		COMPRESSED_RG_RGTC2 = 0x8DBD,
		COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT = 0x8C73,
		COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT = 0x8C71,
		COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT = 0x8DBE,
		COMPRESSED_SIGNED_RED_RGTC1 = 0x8DBC,
		COMPRESSED_SIGNED_RED_RGTC1_EXT = 0x8DBC,
		COMPRESSED_SIGNED_RG_RGTC2 = 0x8DBE,
		COMPRESSED_SLUMINANCE = 0x8C4A,
		COMPRESSED_SLUMINANCE_ALPHA = 0x8C4B,
		COMPRESSED_SLUMINANCE_ALPHA_EXT = 0x8C4B,
		COMPRESSED_SLUMINANCE_EXT = 0x8C4A,
		COMPRESSED_SRGB = 0x8C48,
		COMPRESSED_SRGB_ALPHA = 0x8C49,
		COMPRESSED_SRGB_ALPHA_EXT = 0x8C49,
		COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = 0x8C4D,
		COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = 0x8C4E,
		COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = 0x8C4F,
		COMPRESSED_SRGB_EXT = 0x8C48,
		COMPRESSED_SRGB_S3TC_DXT1_EXT = 0x8C4C,
		COMPRESSED_TEXTURE_FORMATS = 0x86A3,
		COMPRESSED_TEXTURE_FORMATS_ARB = 0x86A3,
		COMP_BIT_ATI = 0x00000002,
		CONDITION_SATISFIED = 0x911C,
		CONSTANT = 0x8576,
		CONSTANT_ALPHA = 0x8003,
		CONSTANT_ALPHA_EXT = 0x8003,
		CONSTANT_ATTENUATION = 0x1207,
		CONSTANT_BORDER = 0x8151,
		CONSTANT_BORDER_HP = 0x8151,
		CONSTANT_COLOR = 0x8001,
		CONSTANT_COLOR0_NV = 0x852A,
		CONSTANT_COLOR1_NV = 0x852B,
		CONSTANT_COLOR_EXT = 0x8001,
		CONSTANT_EXT = 0x8576,
		CONST_EYE_NV = 0x86E5,
		CONTEXT_COMPATIBILITY_PROFILE_BIT = 0x00000002,
		CONTEXT_CORE_PROFILE_BIT = 0x00000001,
		CONTEXT_FLAGS = 0x821E,
		CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = 0x0001,
		CONTEXT_PROFILE_MASK = 0x9126,
		CONTINUOUS_AMD = 0x9007,
		CONVOLUTION_1D = 0x8010,
		CONVOLUTION_1D_EXT = 0x8010,
		CONVOLUTION_2D = 0x8011,
		CONVOLUTION_2D_EXT = 0x8011,
		CONVOLUTION_BORDER_COLOR = 0x8154,
		CONVOLUTION_BORDER_COLOR_HP = 0x8154,
		CONVOLUTION_BORDER_MODE = 0x8013,
		CONVOLUTION_BORDER_MODE_EXT = 0x8013,
		CONVOLUTION_FILTER_BIAS = 0x8015,
		CONVOLUTION_FILTER_BIAS_EXT = 0x8015,
		CONVOLUTION_FILTER_SCALE = 0x8014,
		CONVOLUTION_FILTER_SCALE_EXT = 0x8014,
		CONVOLUTION_FORMAT = 0x8017,
		CONVOLUTION_FORMAT_EXT = 0x8017,
		CONVOLUTION_HEIGHT = 0x8019,
		CONVOLUTION_HEIGHT_EXT = 0x8019,
		CONVOLUTION_HINT_SGIX = 0x8316,
		CONVOLUTION_WIDTH = 0x8018,
		CONVOLUTION_WIDTH_EXT = 0x8018,
		CON_0_ATI = 0x8941,
		CON_10_ATI = 0x894B,
		CON_11_ATI = 0x894C,
		CON_12_ATI = 0x894D,
		CON_13_ATI = 0x894E,
		CON_14_ATI = 0x894F,
		CON_15_ATI = 0x8950,
		CON_16_ATI = 0x8951,
		CON_17_ATI = 0x8952,
		CON_18_ATI = 0x8953,
		CON_19_ATI = 0x8954,
		CON_1_ATI = 0x8942,
		CON_20_ATI = 0x8955,
		CON_21_ATI = 0x8956,
		CON_22_ATI = 0x8957,
		CON_23_ATI = 0x8958,
		CON_24_ATI = 0x8959,
		CON_25_ATI = 0x895A,
		CON_26_ATI = 0x895B,
		CON_27_ATI = 0x895C,
		CON_28_ATI = 0x895D,
		CON_29_ATI = 0x895E,
		CON_2_ATI = 0x8943,
		CON_30_ATI = 0x895F,
		CON_31_ATI = 0x8960,
		CON_3_ATI = 0x8944,
		CON_4_ATI = 0x8945,
		CON_5_ATI = 0x8946,
		CON_6_ATI = 0x8947,
		CON_7_ATI = 0x8948,
		CON_8_ATI = 0x8949,
		CON_9_ATI = 0x894A,
		COORD_REPLACE = 0x8862,
		COORD_REPLACE_ARB = 0x8862,
		COORD_REPLACE_NV = 0x8862,
		COPY = 0x1503,
		COPY_INVERTED = 0x150C,
		COPY_PIXEL_TOKEN = 0x0706,
		COPY_READ_BUFFER = 0x8F36,
		COPY_WRITE_BUFFER = 0x8F37,
		COUNTER_RANGE_AMD = 0x8BC1,
		COUNTER_TYPE_AMD = 0x8BC0,
		COVERAGE_ALL_FRAGMENTS_NV = 0x8ED5,
		COVERAGE_ATTACHMENT_NV = 0x8ED2,
		COVERAGE_AUTOMATIC_NV = 0x8ED7,
		COVERAGE_BUFFERS_NV = 0x8ED3,
		COVERAGE_BUFFER_BIT_NV = 0x00008000,
		COVERAGE_COMPONENT4_NV = 0x8ED1,
		COVERAGE_COMPONENT_NV = 0x8ED0,
		COVERAGE_EDGE_FRAGMENTS_NV = 0x8ED6,
		COVERAGE_SAMPLES_NV = 0x8ED4,
		CUBIC_EXT = 0x8334,
		CULL_FACE = 0x0B44,
		CULL_FACE_MODE = 0x0B45,
		CULL_FRAGMENT_NV = 0x86E7,
		CULL_MODES_NV = 0x86E0,
		CULL_VERTEX_EXT = 0x81AA,
		CULL_VERTEX_EYE_POSITION_EXT = 0x81AB,
		CULL_VERTEX_OBJECT_POSITION_EXT = 0x81AC,
		CURRENT_ATTRIB_NV = 0x8626,
		CURRENT_BIT = 0x00000001,
		CURRENT_COLOR = 0x0B00,
		CURRENT_FOG_COORD = 0x8453,
		CURRENT_FOG_COORDINATE = 0x8453,
		CURRENT_FOG_COORDINATE_EXT = 0x8453,
		CURRENT_INDEX = 0x0B01,
		CURRENT_MATRIX_ARB = 0x8641,
		CURRENT_MATRIX_INDEX_ARB = 0x8845,
		CURRENT_MATRIX_NV = 0x8641,
		CURRENT_MATRIX_STACK_DEPTH_ARB = 0x8640,
		CURRENT_MATRIX_STACK_DEPTH_NV = 0x8640,
		CURRENT_NORMAL = 0x0B02,
		CURRENT_OCCLUSION_QUERY_ID_NV = 0x8865,
		CURRENT_PALETTE_MATRIX_ARB = 0x8843,
		CURRENT_PALETTE_MATRIX_OES = 0x8843,
		CURRENT_PROGRAM = 0x8B8D,
		CURRENT_QUERY = 0x8865,
		CURRENT_QUERY_ARB = 0x8865,
		CURRENT_RASTER_COLOR = 0x0B04,
		CURRENT_RASTER_DISTANCE = 0x0B09,
		CURRENT_RASTER_INDEX = 0x0B05,
		CURRENT_RASTER_NORMAL_SGIX = 0x8406,
		CURRENT_RASTER_POSITION = 0x0B07,
		CURRENT_RASTER_POSITION_VALID = 0x0B08,
		CURRENT_RASTER_SECONDARY_COLOR = 0x845F,
		CURRENT_RASTER_TEXTURE_COORDS = 0x0B06,
		CURRENT_SECONDARY_COLOR = 0x8459,
		CURRENT_SECONDARY_COLOR_EXT = 0x8459,
		CURRENT_TEXTURE_COORDS = 0x0B03,
		CURRENT_TIME_NV = 0x8E28,
		CURRENT_VERTEX_ATTRIB = 0x8626,
		CURRENT_VERTEX_ATTRIB_ARB = 0x8626,
		CURRENT_VERTEX_EXT = 0x87E2,
		CURRENT_VERTEX_WEIGHT_EXT = 0x850B,
		CURRENT_WEIGHT_ARB = 0x86A8,
		CW = 0x0900,
		DEBUG_ASSERT_MESA = 0x875B,
		DEBUG_OBJECT_MESA = 0x8759,
		DEBUG_PRINT_MESA = 0x875A,
		DECAL = 0x2101,
		DECR = 0x1E03,
		DECR_WRAP = 0x8508,
		DECR_WRAP_EXT = 0x8508,
		DECR_WRAP_OES = 0x8508,
		DEFORMATIONS_MASK_SGIX = 0x8196,
		DELETE_STATUS = 0x8B80,
		DEPENDENT_AR_TEXTURE_2D_NV = 0x86E9,
		DEPENDENT_GB_TEXTURE_2D_NV = 0x86EA,
		DEPENDENT_HILO_TEXTURE_2D_NV = 0x8858,
		DEPENDENT_RGB_TEXTURE_3D_NV = 0x8859,
		DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV = 0x885A,
		DEPTH = 0x1801,
		DEPTH24_STENCIL8 = 0x88F0,
		DEPTH24_STENCIL8_EXT = 0x88F0,
		DEPTH24_STENCIL8_OES = 0x88F0,
		DEPTH32F_STENCIL8 = 0x8CAD,
		DEPTH32F_STENCIL8_NV = 0x8DAC,
		DEPTH_ATTACHMENT = 0x8D00,
		DEPTH_ATTACHMENT_EXT = 0x8D00,
		DEPTH_ATTACHMENT_OES = 0x8D00,
		DEPTH_BIAS = 0x0D1F,
		DEPTH_BITS = 0x0D56,
		DEPTH_BOUNDS_EXT = 0x8891,
		DEPTH_BOUNDS_TEST_EXT = 0x8890,
		DEPTH_BUFFER = 0x8223,
		DEPTH_BUFFER_BIT = 0x00000100,
		DEPTH_BUFFER_FLOAT_MODE_NV = 0x8DAF,
		DEPTH_CLAMP = 0x864F,
		DEPTH_CLAMP_NV = 0x864F,
		DEPTH_CLEAR_VALUE = 0x0B73,
		DEPTH_COMPONENT = 0x1902,
		DEPTH_COMPONENT16 = 0x81A5,
		DEPTH_COMPONENT16_ARB = 0x81A5,
		DEPTH_COMPONENT16_NONLINEAR_NV = 0x8E2C,
		DEPTH_COMPONENT16_OES = 0x81A5,
		DEPTH_COMPONENT16_SGIX = 0x81A5,
		DEPTH_COMPONENT24 = 0x81A6,
		DEPTH_COMPONENT24_ARB = 0x81A6,
		DEPTH_COMPONENT24_OES = 0x81A6,
		DEPTH_COMPONENT24_SGIX = 0x81A6,
		DEPTH_COMPONENT32 = 0x81A7,
		DEPTH_COMPONENT32F = 0x8CAC,
		DEPTH_COMPONENT32F_NV = 0x8DAB,
		DEPTH_COMPONENT32_ARB = 0x81A7,
		DEPTH_COMPONENT32_OES = 0x81A7,
		DEPTH_COMPONENT32_SGIX = 0x81A7,
		DEPTH_EXT = 0x1801,
		DEPTH_FUNC = 0x0B74,
		DEPTH_PASS_INSTRUMENT_COUNTERS_SGIX = 0x8311,
		DEPTH_PASS_INSTRUMENT_MAX_SGIX = 0x8312,
		DEPTH_PASS_INSTRUMENT_SGIX = 0x8310,
		DEPTH_RANGE = 0x0B70,
		DEPTH_SCALE = 0x0D1E,
		DEPTH_STENCIL = 0x84F9,
		DEPTH_STENCIL_ATTACHMENT = 0x821A,
		DEPTH_STENCIL_EXT = 0x84F9,
		DEPTH_STENCIL_MESA = 0x8750,
		DEPTH_STENCIL_NV = 0x84F9,
		DEPTH_STENCIL_OES = 0x84F9,
		DEPTH_STENCIL_TO_BGRA_NV = 0x886F,
		DEPTH_STENCIL_TO_RGBA_NV = 0x886E,
		DEPTH_TEST = 0x0B71,
		DEPTH_TEXTURE_MODE = 0x884B,
		DEPTH_TEXTURE_MODE_ARB = 0x884B,
		DEPTH_WRITEMASK = 0x0B72,
		DETAIL_TEXTURE_2D_BINDING_SGIS = 0x8096,
		DETAIL_TEXTURE_2D_SGIS = 0x8095,
		DETAIL_TEXTURE_FUNC_POINTS_SGIS = 0x809C,
		DETAIL_TEXTURE_LEVEL_SGIS = 0x809A,
		DETAIL_TEXTURE_MODE_SGIS = 0x809B,
		DIFFUSE = 0x1201,
		DISCARD_ATI = 0x8763,
		DISCARD_NV = 0x8530,
		DISCRETE_AMD = 0x9006,
		DISTANCE_ATTENUATION_EXT = 0x8129,
		DISTANCE_ATTENUATION_SGIS = 0x8129,
		DITHER = 0x0BD0,
		DOMAIN = 0x0A02,
		DONT_CARE = 0x1100,
		DOT2_ADD_ATI = 0x896C,
		DOT3_ATI = 0x8966,
		DOT3_RGB = 0x86AE,
		DOT3_RGBA = 0x86AF,
		DOT3_RGBA_ARB = 0x86AF,
		DOT3_RGBA_EXT = 0x8741,
		DOT3_RGBA_IMG = 0x86AF,
		DOT3_RGB_ARB = 0x86AE,
		DOT3_RGB_EXT = 0x8740,
		DOT4_ATI = 0x8967,
		DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV = 0x885D,
		DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV = 0x86F3,
		DOT_PRODUCT_DEPTH_REPLACE_NV = 0x86ED,
		DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV = 0x86F1,
		DOT_PRODUCT_NV = 0x86EC,
		DOT_PRODUCT_PASS_THROUGH_NV = 0x885B,
		DOT_PRODUCT_REFLECT_CUBE_MAP_NV = 0x86F2,
		DOT_PRODUCT_TEXTURE_1D_NV = 0x885C,
		DOT_PRODUCT_TEXTURE_2D_NV = 0x86EE,
		DOT_PRODUCT_TEXTURE_3D_NV = 0x86EF,
		DOT_PRODUCT_TEXTURE_CUBE_MAP_NV = 0x86F0,
		DOT_PRODUCT_TEXTURE_RECTANGLE_NV = 0x864E,
		DOUBLE = 0x140A,
		DOUBLEBUFFER = 0x0C32,
		DOUBLE_EXT = 0x140A,
		DRAW_BUFFER = 0x0C01,
		DRAW_BUFFER0 = 0x8825,
		DRAW_BUFFER0_ARB = 0x8825,
		DRAW_BUFFER0_ATI = 0x8825,
		DRAW_BUFFER1 = 0x8826,
		DRAW_BUFFER10 = 0x882F,
		DRAW_BUFFER10_ARB = 0x882F,
		DRAW_BUFFER10_ATI = 0x882F,
		DRAW_BUFFER11 = 0x8830,
		DRAW_BUFFER11_ARB = 0x8830,
		DRAW_BUFFER11_ATI = 0x8830,
		DRAW_BUFFER12 = 0x8831,
		DRAW_BUFFER12_ARB = 0x8831,
		DRAW_BUFFER12_ATI = 0x8831,
		DRAW_BUFFER13 = 0x8832,
		DRAW_BUFFER13_ARB = 0x8832,
		DRAW_BUFFER13_ATI = 0x8832,
		DRAW_BUFFER14 = 0x8833,
		DRAW_BUFFER14_ARB = 0x8833,
		DRAW_BUFFER14_ATI = 0x8833,
		DRAW_BUFFER15 = 0x8834,
		DRAW_BUFFER15_ARB = 0x8834,
		DRAW_BUFFER15_ATI = 0x8834,
		DRAW_BUFFER1_ARB = 0x8826,
		DRAW_BUFFER1_ATI = 0x8826,
		DRAW_BUFFER2 = 0x8827,
		DRAW_BUFFER2_ARB = 0x8827,
		DRAW_BUFFER2_ATI = 0x8827,
		DRAW_BUFFER3 = 0x8828,
		DRAW_BUFFER3_ARB = 0x8828,
		DRAW_BUFFER3_ATI = 0x8828,
		DRAW_BUFFER4 = 0x8829,
		DRAW_BUFFER4_ARB = 0x8829,
		DRAW_BUFFER4_ATI = 0x8829,
		DRAW_BUFFER5 = 0x882A,
		DRAW_BUFFER5_ARB = 0x882A,
		DRAW_BUFFER5_ATI = 0x882A,
		DRAW_BUFFER6 = 0x882B,
		DRAW_BUFFER6_ARB = 0x882B,
		DRAW_BUFFER6_ATI = 0x882B,
		DRAW_BUFFER7 = 0x882C,
		DRAW_BUFFER7_ARB = 0x882C,
		DRAW_BUFFER7_ATI = 0x882C,
		DRAW_BUFFER8 = 0x882D,
		DRAW_BUFFER8_ARB = 0x882D,
		DRAW_BUFFER8_ATI = 0x882D,
		DRAW_BUFFER9 = 0x882E,
		DRAW_BUFFER9_ARB = 0x882E,
		DRAW_BUFFER9_ATI = 0x882E,
		DRAW_FRAMEBUFFER = 0x8CA9,
		DRAW_FRAMEBUFFER_BINDING = 0x8CA6,
		DRAW_FRAMEBUFFER_BINDING_EXT = 0x8CA6,
		DRAW_FRAMEBUFFER_EXT = 0x8CA9,
		DRAW_PIXELS_APPLE = 0x8A0A,
		DRAW_PIXEL_TOKEN = 0x0705,
		DSDT8_MAG8_INTENSITY8_NV = 0x870B,
		DSDT8_MAG8_NV = 0x870A,
		DSDT8_NV = 0x8709,
		DSDT_MAG_INTENSITY_NV = 0x86DC,
		DSDT_MAG_NV = 0x86F6,
		DSDT_MAG_VIB_NV = 0x86F7,
		DSDT_NV = 0x86F5,
		DST_ALPHA = 0x0304,
		DST_COLOR = 0x0306,
		DS_BIAS_NV = 0x8716,
		DS_SCALE_NV = 0x8710,
		DT_BIAS_NV = 0x8717,
		DT_SCALE_NV = 0x8711,
		DU8DV8_ATI = 0x877A,
		DUAL_ALPHA12_SGIS = 0x8112,
		DUAL_ALPHA16_SGIS = 0x8113,
		DUAL_ALPHA4_SGIS = 0x8110,
		DUAL_ALPHA8_SGIS = 0x8111,
		DUAL_INTENSITY12_SGIS = 0x811A,
		DUAL_INTENSITY16_SGIS = 0x811B,
		DUAL_INTENSITY4_SGIS = 0x8118,
		DUAL_INTENSITY8_SGIS = 0x8119,
		DUAL_LUMINANCE12_SGIS = 0x8116,
		DUAL_LUMINANCE16_SGIS = 0x8117,
		DUAL_LUMINANCE4_SGIS = 0x8114,
		DUAL_LUMINANCE8_SGIS = 0x8115,
		DUAL_LUMINANCE_ALPHA4_SGIS = 0x811C,
		DUAL_LUMINANCE_ALPHA8_SGIS = 0x811D,
		DUAL_TEXTURE_SELECT_SGIS = 0x8124,
		DUDV_ATI = 0x8779,
		DYNAMIC_ATI = 0x8761,
		DYNAMIC_COPY = 0x88EA,
		DYNAMIC_COPY_ARB = 0x88EA,
		DYNAMIC_DRAW = 0x88E8,
		DYNAMIC_DRAW_ARB = 0x88E8,
		DYNAMIC_READ = 0x88E9,
		DYNAMIC_READ_ARB = 0x88E9,
		EDGE_FLAG = 0x0B43,
		EDGE_FLAG_ARRAY = 0x8079,
		EDGE_FLAG_ARRAY_ADDRESS_NV = 0x8F26,
		EDGE_FLAG_ARRAY_BUFFER_BINDING = 0x889B,
		EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB = 0x889B,
		EDGE_FLAG_ARRAY_COUNT_EXT = 0x808D,
		EDGE_FLAG_ARRAY_EXT = 0x8079,
		EDGE_FLAG_ARRAY_LENGTH_NV = 0x8F30,
		EDGE_FLAG_ARRAY_POINTER = 0x8093,
		EDGE_FLAG_ARRAY_POINTER_EXT = 0x8093,
		EDGE_FLAG_ARRAY_STRIDE = 0x808C,
		EDGE_FLAG_ARRAY_STRIDE_EXT = 0x808C,
		EIGHTH_BIT_ATI = 0x00000020,
		ELEMENT_ARRAY_ADDRESS_NV = 0x8F29,
		ELEMENT_ARRAY_APPLE = 0x8A0C,
		ELEMENT_ARRAY_ATI = 0x8768,
		ELEMENT_ARRAY_BUFFER = 0x8893,
		ELEMENT_ARRAY_BUFFER_ARB = 0x8893,
		ELEMENT_ARRAY_BUFFER_BINDING = 0x8895,
		ELEMENT_ARRAY_BUFFER_BINDING_ARB = 0x8895,
		ELEMENT_ARRAY_LENGTH_NV = 0x8F33,
		ELEMENT_ARRAY_POINTER_APPLE = 0x8A0E,
		ELEMENT_ARRAY_POINTER_ATI = 0x876A,
		ELEMENT_ARRAY_TYPE_APPLE = 0x8A0D,
		ELEMENT_ARRAY_TYPE_ATI = 0x8769,
		ELEMENT_ARRAY_UNIFIED_NV = 0x8F1F,
		EMBOSS_CONSTANT_NV = 0x855E,
		EMBOSS_LIGHT_NV = 0x855D,
		EMBOSS_MAP_NV = 0x855F,
		EMISSION = 0x1600,
		ENABLE_BIT = 0x00002000,
		EQUAL = 0x0202,
		EQUIV = 0x1509,
		ETC1_RGB8_OES = 0x8D64,
		EVAL_2D_NV = 0x86C0,
		EVAL_BIT = 0x00010000,
		EVAL_FRACTIONAL_TESSELLATION_NV = 0x86C5,
		EVAL_TRIANGULAR_2D_NV = 0x86C1,
		EVAL_VERTEX_ATRRIB0_NV = 0x86C6,
		EVAL_VERTEX_ATRRIB10_NV = 0x86D0,
		EVAL_VERTEX_ATRRIB11_NV = 0x86D1,
		EVAL_VERTEX_ATRRIB12_NV = 0x86D2,
		EVAL_VERTEX_ATRRIB13_NV = 0x86D3,
		EVAL_VERTEX_ATRRIB14_NV = 0x86D4,
		EVAL_VERTEX_ATRRIB15_NV = 0x86D5,
		EVAL_VERTEX_ATRRIB1_NV = 0x86C7,
		EVAL_VERTEX_ATRRIB2_NV = 0x86C8,
		EVAL_VERTEX_ATRRIB3_NV = 0x86C9,
		EVAL_VERTEX_ATRRIB4_NV = 0x86CA,
		EVAL_VERTEX_ATRRIB5_NV = 0x86CB,
		EVAL_VERTEX_ATRRIB6_NV = 0x86CC,
		EVAL_VERTEX_ATRRIB7_NV = 0x86CD,
		EVAL_VERTEX_ATRRIB8_NV = 0x86CE,
		EVAL_VERTEX_ATRRIB9_NV = 0x86CF,
		EXP = 0x0800,
		EXP2 = 0x0801,
		EXPAND_NEGATE_NV = 0x8539,
		EXPAND_NORMAL_NV = 0x8538,
		EXTENSIONS = 0x1F03,
		EXT_abgr = 1,
		EXT_blend_color = 1,
		EXT_blend_logic_op = 1,
		EXT_blend_minmax = 1,
		EXT_blend_subtract = 1,
		EXT_cmyka = 1,
		EXT_convolution = 1,
		EXT_copy_texture = 1,
		EXT_histogram = 1,
		EXT_packed_pixels = 1,
		EXT_point_parameters = 1,
		EXT_polygon_offset = 1,
		EXT_rescale_normal = 1,
		EXT_shared_texture_palette = 1,
		EXT_subtexture = 1,
		EXT_texture = 1,
		EXT_texture3D = 1,
		EXT_texture_object = 1,
		EXT_vertex_array = 1,
		EYE_DISTANCE_TO_LINE_SGIS = 0x81F2,
		EYE_DISTANCE_TO_POINT_SGIS = 0x81F0,
		EYE_LINEAR = 0x2400,
		EYE_LINE_SGIS = 0x81F6,
		EYE_PLANE = 0x2502,
		EYE_PLANE_ABSOLUTE_NV = 0x855C,
		EYE_POINT_SGIS = 0x81F4,
		EYE_RADIAL_NV = 0x855B,
		E_TIMES_F_NV = 0x8531,
		FACTOR_ALPHA_MODULATE_IMG = 0x8C07,
		//FALSE = 0,
		FASTEST = 0x1101,
		FEEDBACK = 0x1C01,
		FEEDBACK_BUFFER_POINTER = 0x0DF0,
		FEEDBACK_BUFFER_SIZE = 0x0DF1,
		FEEDBACK_BUFFER_TYPE = 0x0DF2,
		FENCE_APPLE = 0x8A0B,
		FENCE_CONDITION_NV = 0x84F4,
		FENCE_STATUS_NV = 0x84F3,
		FIELDS_NV = 0x8E27,
		FILL = 0x1B02,
		FILTER4_SGIS = 0x8146,
		FIRST_VERTEX_CONVENTION = 0x8E4D,
		FIRST_VERTEX_CONVENTION_EXT = 0x8E4D,
		FIXED_OES = 0x140C,
		FIXED_ONLY = 0x891D,
		FIXED_ONLY_ARB = 0x891D,
		FLAT = 0x1D00,
		FLOAT = 0x1406,
		FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD,
		FLOAT_32_UNSIGNED_INT_24_8_REV_NV = 0x8DAD,
		FLOAT_CLEAR_COLOR_VALUE_NV = 0x888D,
		FLOAT_MAT2 = 0x8B5A,
		FLOAT_MAT2_ARB = 0x8B5A,
		FLOAT_MAT2x3 = 0x8B65,
		FLOAT_MAT2x4 = 0x8B66,
		FLOAT_MAT3 = 0x8B5B,
		FLOAT_MAT3_ARB = 0x8B5B,
		FLOAT_MAT3x2 = 0x8B67,
		FLOAT_MAT3x4 = 0x8B68,
		FLOAT_MAT4 = 0x8B5C,
		FLOAT_MAT4_ARB = 0x8B5C,
		FLOAT_MAT4x2 = 0x8B69,
		FLOAT_MAT4x3 = 0x8B6A,
		FLOAT_R16_NV = 0x8884,
		FLOAT_R32_NV = 0x8885,
		FLOAT_RG16_NV = 0x8886,
		FLOAT_RG32_NV = 0x8887,
		FLOAT_RGB16_NV = 0x8888,
		FLOAT_RGB32_NV = 0x8889,
		FLOAT_RGBA16_NV = 0x888A,
		FLOAT_RGBA32_NV = 0x888B,
		FLOAT_RGBA_MODE_NV = 0x888E,
		FLOAT_RGBA_NV = 0x8883,
		FLOAT_RGB_NV = 0x8882,
		FLOAT_RG_NV = 0x8881,
		FLOAT_R_NV = 0x8880,
		FLOAT_VEC2 = 0x8B50,
		FLOAT_VEC2_ARB = 0x8B50,
		FLOAT_VEC3 = 0x8B51,
		FLOAT_VEC3_ARB = 0x8B51,
		FLOAT_VEC4 = 0x8B52,
		FLOAT_VEC4_ARB = 0x8B52,
		FOG = 0x0B60,
		FOG_BIT = 0x00000080,
		FOG_COLOR = 0x0B66,
		FOG_COORD = 0x8451,
		FOG_COORDINATE = 0x8451,
		FOG_COORDINATE_ARRAY = 0x8457,
		FOG_COORDINATE_ARRAY_BUFFER_BINDING = 0x889D,
		FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB = 0x889D,
		FOG_COORDINATE_ARRAY_EXT = 0x8457,
		FOG_COORDINATE_ARRAY_POINTER = 0x8456,
		FOG_COORDINATE_ARRAY_POINTER_EXT = 0x8456,
		FOG_COORDINATE_ARRAY_STRIDE = 0x8455,
		FOG_COORDINATE_ARRAY_STRIDE_EXT = 0x8455,
		FOG_COORDINATE_ARRAY_TYPE = 0x8454,
		FOG_COORDINATE_ARRAY_TYPE_EXT = 0x8454,
		FOG_COORDINATE_EXT = 0x8451,
		FOG_COORDINATE_SOURCE = 0x8450,
		FOG_COORDINATE_SOURCE_EXT = 0x8450,
		FOG_COORD_ARRAY = 0x8457,
		FOG_COORD_ARRAY_ADDRESS_NV = 0x8F28,
		FOG_COORD_ARRAY_BUFFER_BINDING = 0x889D,
		FOG_COORD_ARRAY_LENGTH_NV = 0x8F32,
		FOG_COORD_ARRAY_POINTER = 0x8456,
		FOG_COORD_ARRAY_STRIDE = 0x8455,
		FOG_COORD_ARRAY_TYPE = 0x8454,
		FOG_COORD_SRC = 0x8450,
		FOG_DENSITY = 0x0B62,
		FOG_END = 0x0B64,
		FOG_FACTOR_TO_ALPHA_SGIX = 0x836F,
		FOG_FUNC_POINTS_SGIS = 0x812B,
		FOG_FUNC_SGIS = 0x812A,
		FOG_GEN_MODE_NV = 0x855A,
		FOG_HINT = 0x0C54,
		FOG_INDEX = 0x0B61,
		FOG_MODE = 0x0B65,
		FOG_OFFSET_SGIX = 0x8198,
		FOG_OFFSET_VALUE_SGIX = 0x8199,
		FOG_START = 0x0B63,
		FORCE_BLUE_TO_ONE_NV = 0x8860,
		FORMAT_SUBSAMPLE_244_244_OML = 0x8983,
		FORMAT_SUBSAMPLE_24_24_OML = 0x8982,
		FRAGMENTS_INSTRUMENT_COUNTERS_SGIX = 0x8314,
		FRAGMENTS_INSTRUMENT_MAX_SGIX = 0x8315,
		FRAGMENTS_INSTRUMENT_SGIX = 0x8313,
		FRAGMENT_ALPHA_MODULATE_IMG = 0x8C08,
		FRAGMENT_COLOR_EXT = 0x834C,
		FRAGMENT_COLOR_MATERIAL_FACE_SGIX = 0x8402,
		FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX = 0x8403,
		FRAGMENT_COLOR_MATERIAL_SGIX = 0x8401,
		FRAGMENT_DEPTH = 0x8452,
		FRAGMENT_DEPTH_EXT = 0x8452,
		FRAGMENT_LIGHT0_SGIX = 0x840C,
		FRAGMENT_LIGHT1_SGIX = 0x840D,
		FRAGMENT_LIGHT2_SGIX = 0x840E,
		FRAGMENT_LIGHT3_SGIX = 0x840F,
		FRAGMENT_LIGHT4_SGIX = 0x8410,
		FRAGMENT_LIGHT5_SGIX = 0x8411,
		FRAGMENT_LIGHT6_SGIX = 0x8412,
		FRAGMENT_LIGHT7_SGIX = 0x8413,
		FRAGMENT_LIGHTING_SGIX = 0x8400,
		FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX = 0x840A,
		FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX = 0x8408,
		FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX = 0x840B,
		FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX = 0x8409,
		FRAGMENT_MATERIAL_EXT = 0x8349,
		FRAGMENT_NORMAL_EXT = 0x834A,
		FRAGMENT_PROGRAM_ARB = 0x8804,
		FRAGMENT_PROGRAM_BINDING_NV = 0x8873,
		FRAGMENT_PROGRAM_CALLBACK_DATA_MESA = 0x8BB3,
		FRAGMENT_PROGRAM_CALLBACK_FUNC_MESA = 0x8BB2,
		FRAGMENT_PROGRAM_CALLBACK_MESA = 0x8BB1,
		FRAGMENT_PROGRAM_NV = 0x8870,
		FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV = 0x8DA4,
		FRAGMENT_PROGRAM_POSITION_MESA = 0x8BB0,
		FRAGMENT_SHADER = 0x8B30,
		FRAGMENT_SHADER_ARB = 0x8B30,
		FRAGMENT_SHADER_ATI = 0x8920,
		FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B,
		FRAGMENT_SHADER_DERIVATIVE_HINT_ARB = 0x8B8B,
		FRAGMENT_SHADER_DERIVATIVE_HINT_OES = 0x8B8B,
		FRAMEBUFFER = 0x8D40,
		FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x8215,
		FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x8214,
		FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x8210,
		FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x8211,
		FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x8216,
		FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x8213,
		FRAMEBUFFER_ATTACHMENT_LAYERED = 0x8DA7,
		FRAMEBUFFER_ATTACHMENT_LAYERED_ARB = 0x8DA7,
		FRAMEBUFFER_ATTACHMENT_LAYERED_EXT = 0x8DA7,
		FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1,
		FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT = 0x8CD1,
		FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES = 0x8CD1,
		FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0,
		FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT = 0x8CD0,
		FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OES = 0x8CD0,
		FRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x8212,
		FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x8217,
		FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT = 0x8CD4,
		FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_OES = 0x8CD4,
		FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3,
		FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT = 0x8CD3,
		FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OES = 0x8CD3,
		FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x8CD4,
		FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT = 0x8CD4,
		FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2,
		FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT = 0x8CD2,
		FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OES = 0x8CD2,
		FRAMEBUFFER_BINDING = 0x8CA6,
		FRAMEBUFFER_BINDING_EXT = 0x8CA6,
		FRAMEBUFFER_BINDING_OES = 0x8CA6,
		FRAMEBUFFER_COMPLETE = 0x8CD5,
		FRAMEBUFFER_COMPLETE_EXT = 0x8CD5,
		FRAMEBUFFER_COMPLETE_OES = 0x8CD5,
		FRAMEBUFFER_DEFAULT = 0x8218,
		FRAMEBUFFER_EXT = 0x8D40,
		FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6,
		FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT = 0x8CD6,
		FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OES = 0x8CD6,
		FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT = 0x8CD9,
		FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OES = 0x8CD9,
		FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = 0x8CDB,
		FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT = 0x8CDB,
		FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_OES = 0x8CDB,
		FRAMEBUFFER_INCOMPLETE_FORMATS_EXT = 0x8CDA,
		FRAMEBUFFER_INCOMPLETE_FORMATS_OES = 0x8CDA,
		FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB = 0x8DA9,
		FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT = 0x8DA9,
		FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = 0x8DA8,
		FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB = 0x8DA8,
		FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT = 0x8DA8,
		FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7,
		FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT = 0x8CD7,
		FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OES = 0x8CD7,
		FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x8D56,
		FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT = 0x8D56,
		FRAMEBUFFER_INCOMPLETE_READ_BUFFER = 0x8CDC,
		FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT = 0x8CDC,
		FRAMEBUFFER_INCOMPLETE_READ_BUFFER_OES = 0x8CDC,
		FRAMEBUFFER_OES = 0x8D40,
		FRAMEBUFFER_SRGB = 0x8DB9,
		FRAMEBUFFER_SRGB_CAPABLE_EXT = 0x8DBA,
		FRAMEBUFFER_SRGB_EXT = 0x8DB9,
		FRAMEBUFFER_UNDEFINED = 0x8219,
		FRAMEBUFFER_UNSUPPORTED = 0x8CDD,
		FRAMEBUFFER_UNSUPPORTED_EXT = 0x8CDD,
		FRAMEBUFFER_UNSUPPORTED_OES = 0x8CDD,
		FRAMEZOOM_FACTOR_SGIX = 0x818C,
		FRAMEZOOM_SGIX = 0x818B,
		FRAME_NV = 0x8E26,
		FRONT = 0x0404,
		FRONT_AND_BACK = 0x0408,
		FRONT_FACE = 0x0B46,
		FRONT_LEFT = 0x0400,
		FRONT_RIGHT = 0x0401,
		FULL_RANGE_EXT = 0x87E1,
		FUNC_ADD = 0x8006,
		FUNC_ADD_EXT = 0x8006,
		FUNC_ADD_OES = 0x8006,
		FUNC_REVERSE_SUBTRACT = 0x800B,
		FUNC_REVERSE_SUBTRACT_EXT = 0x800B,
		FUNC_REVERSE_SUBTRACT_OES = 0x800B,
		FUNC_SUBTRACT = 0x800A,
		FUNC_SUBTRACT_EXT = 0x800A,
		FUNC_SUBTRACT_OES = 0x800A,
		GENERATE_MIPMAP = 0x8191,
		GENERATE_MIPMAP_HINT = 0x8192,
		GENERATE_MIPMAP_HINT_SGIS = 0x8192,
		GENERATE_MIPMAP_SGIS = 0x8191,
		GENERIC_ATTRIB_NV = 0x8C7D,
		GEOMETRY_DEFORMATION_BIT_SGIX = 0x00000002,
		GEOMETRY_DEFORMATION_SGIX = 0x8194,
		GEOMETRY_INPUT_TYPE = 0x8917,
		GEOMETRY_INPUT_TYPE_ARB = 0x8DDB,
		GEOMETRY_INPUT_TYPE_EXT = 0x8DDB,
		GEOMETRY_OUTPUT_TYPE = 0x8918,
		GEOMETRY_OUTPUT_TYPE_ARB = 0x8DDC,
		GEOMETRY_OUTPUT_TYPE_EXT = 0x8DDC,
		GEOMETRY_PROGRAM_NV = 0x8C26,
		GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV = 0x8DA3,
		GEOMETRY_SHADER = 0x8DD9,
		GEOMETRY_SHADER_ARB = 0x8DD9,
		GEOMETRY_SHADER_EXT = 0x8DD9,
		GEOMETRY_VERTICES_OUT = 0x8916,
		GEOMETRY_VERTICES_OUT_ARB = 0x8DDA,
		GEOMETRY_VERTICES_OUT_EXT = 0x8DDA,
		GEQUAL = 0x0206,
		GPU_ADDRESS_NV = 0x8F34,
		GREATER = 0x0204,
		GREEN = 0x1904,
		GREEN_BIAS = 0x0D19,
		GREEN_BITS = 0x0D53,
		GREEN_BIT_ATI = 0x00000002,
		GREEN_INTEGER = 0x8D95,
		GREEN_INTEGER_EXT = 0x8D95,
		GREEN_MAX_CLAMP_INGR = 0x8565,
		GREEN_MIN_CLAMP_INGR = 0x8561,
		GREEN_SCALE = 0x0D18,
		HALF_APPLE = 0x140B,
		HALF_BIAS_NEGATE_NV = 0x853B,
		HALF_BIAS_NORMAL_NV = 0x853A,
		HALF_BIT_ATI = 0x00000008,
		HALF_FLOAT = 0x140B,
		HALF_FLOAT_ARB = 0x140B,
		HALF_FLOAT_NV = 0x140B,
		HALF_FLOAT_OES = 0x8D61,
		HILO16_NV = 0x86F8,
		HILO8_NV = 0x885E,
		HILO_NV = 0x86F4,
		HINT_BIT = 0x00008000,
		HISTOGRAM = 0x8024,
		HISTOGRAM_ALPHA_SIZE = 0x802B,
		HISTOGRAM_ALPHA_SIZE_EXT = 0x802B,
		HISTOGRAM_BLUE_SIZE = 0x802A,
		HISTOGRAM_BLUE_SIZE_EXT = 0x802A,
		HISTOGRAM_EXT = 0x8024,
		HISTOGRAM_FORMAT = 0x8027,
		HISTOGRAM_FORMAT_EXT = 0x8027,
		HISTOGRAM_GREEN_SIZE = 0x8029,
		HISTOGRAM_GREEN_SIZE_EXT = 0x8029,
		HISTOGRAM_LUMINANCE_SIZE = 0x802C,
		HISTOGRAM_LUMINANCE_SIZE_EXT = 0x802C,
		HISTOGRAM_RED_SIZE = 0x8028,
		HISTOGRAM_RED_SIZE_EXT = 0x8028,
		HISTOGRAM_SINK = 0x802D,
		HISTOGRAM_SINK_EXT = 0x802D,
		HISTOGRAM_WIDTH = 0x8026,
		HISTOGRAM_WIDTH_EXT = 0x8026,
		HI_BIAS_NV = 0x8714,
		HI_SCALE_NV = 0x870E,
		IDENTITY_NV = 0x862A,
		IGNORE_BORDER_HP = 0x8150,
		IMPLEMENTATION_COLOR_READ_FORMAT_OES = 0x8B9B,
		IMPLEMENTATION_COLOR_READ_TYPE_OES = 0x8B9A,
		INCR = 0x1E02,
		INCR_WRAP = 0x8507,
		INCR_WRAP_EXT = 0x8507,
		INCR_WRAP_OES = 0x8507,
		INDEX = 0x8222,
		INDEX_ARRAY = 0x8077,
		INDEX_ARRAY_ADDRESS_NV = 0x8F24,
		INDEX_ARRAY_BUFFER_BINDING = 0x8899,
		INDEX_ARRAY_BUFFER_BINDING_ARB = 0x8899,
		INDEX_ARRAY_COUNT_EXT = 0x8087,
		INDEX_ARRAY_EXT = 0x8077,
		INDEX_ARRAY_LENGTH_NV = 0x8F2E,
		INDEX_ARRAY_POINTER = 0x8091,
		INDEX_ARRAY_POINTER_EXT = 0x8091,
		INDEX_ARRAY_STRIDE = 0x8086,
		INDEX_ARRAY_STRIDE_EXT = 0x8086,
		INDEX_ARRAY_TYPE = 0x8085,
		INDEX_ARRAY_TYPE_EXT = 0x8085,
		INDEX_BITS = 0x0D51,
		INDEX_CLEAR_VALUE = 0x0C20,
		INDEX_LOGIC_OP = 0x0BF1,
		INDEX_MATERIAL_EXT = 0x81B8,
		INDEX_MATERIAL_FACE_EXT = 0x81BA,
		INDEX_MATERIAL_PARAMETER_EXT = 0x81B9,
		INDEX_MODE = 0x0C30,
		INDEX_OFFSET = 0x0D13,
		INDEX_SHIFT = 0x0D12,
		INDEX_TEST_EXT = 0x81B5,
		INDEX_TEST_FUNC_EXT = 0x81B6,
		INDEX_TEST_REF_EXT = 0x81B7,
		INDEX_WRITEMASK = 0x0C21,
		INFO_LOG_LENGTH = 0x8B84,
		INSTRUMENT_BUFFER_POINTER_SGIX = 0x8180,
		INSTRUMENT_MEASUREMENTS_SGIX = 0x8181,
		INT = 0x1404,
		INT64_NV = 0x140E,
		INTENSITY = 0x8049,
		INTENSITY12 = 0x804C,
		INTENSITY12_EXT = 0x804C,
		INTENSITY16 = 0x804D,
		INTENSITY16F_ARB = 0x881D,
		INTENSITY16I_EXT = 0x8D8B,
		INTENSITY16UI_EXT = 0x8D79,
		INTENSITY16_EXT = 0x804D,
		INTENSITY16_SNORM = 0x901B,
		INTENSITY32F_ARB = 0x8817,
		INTENSITY32I_EXT = 0x8D85,
		INTENSITY32UI_EXT = 0x8D73,
		INTENSITY4 = 0x804A,
		INTENSITY4_EXT = 0x804A,
		INTENSITY8 = 0x804B,
		INTENSITY8I_EXT = 0x8D91,
		INTENSITY8UI_EXT = 0x8D7F,
		INTENSITY8_EXT = 0x804B,
		INTENSITY8_SNORM = 0x9017,
		INTENSITY_EXT = 0x8049,
		INTENSITY_FLOAT16_APPLE = 0x881D,
		INTENSITY_FLOAT16_ATI = 0x881D,
		INTENSITY_FLOAT32_APPLE = 0x8817,
		INTENSITY_FLOAT32_ATI = 0x8817,
		INTENSITY_SNORM = 0x9013,
		INTERLACE_OML = 0x8980,
		INTERLACE_READ_INGR = 0x8568,
		INTERLACE_READ_OML = 0x8981,
		INTERLACE_SGIX = 0x8094,
		INTERLEAVED_ATTRIBS = 0x8C8C,
		INTERLEAVED_ATTRIBS_EXT = 0x8C8C,
		INTERLEAVED_ATTRIBS_NV = 0x8C8C,
		INTERPOLATE = 0x8575,
		INTERPOLATE_EXT = 0x8575,
		INT_10_10_10_2_OES = 0x8DF7,
		INT_SAMPLER_1D = 0x8DC9,
		INT_SAMPLER_1D_ARRAY = 0x8DCE,
		INT_SAMPLER_1D_ARRAY_EXT = 0x8DCE,
		INT_SAMPLER_1D_EXT = 0x8DC9,
		INT_SAMPLER_2D = 0x8DCA,
		INT_SAMPLER_2D_ARRAY = 0x8DCF,
		INT_SAMPLER_2D_ARRAY_EXT = 0x8DCF,
		INT_SAMPLER_2D_EXT = 0x8DCA,
		INT_SAMPLER_2D_MULTISAMPLE = 0x9109,
		INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910C,
		INT_SAMPLER_2D_RECT = 0x8DCD,
		INT_SAMPLER_2D_RECT_EXT = 0x8DCD,
		INT_SAMPLER_3D = 0x8DCB,
		INT_SAMPLER_3D_EXT = 0x8DCB,
		INT_SAMPLER_BUFFER = 0x8DD0,
		INT_SAMPLER_BUFFER_AMD = 0x9002,
		INT_SAMPLER_BUFFER_EXT = 0x8DD0,
		INT_SAMPLER_CUBE = 0x8DCC,
		INT_SAMPLER_CUBE_EXT = 0x8DCC,
		INT_SAMPLER_CUBE_MAP_ARRAY = 0x900E,
		INT_SAMPLER_RENDERBUFFER_NV = 0x8E57,
		INT_VEC2 = 0x8B53,
		INT_VEC2_ARB = 0x8B53,
		INT_VEC3 = 0x8B54,
		INT_VEC3_ARB = 0x8B54,
		INT_VEC4 = 0x8B55,
		INT_VEC4_ARB = 0x8B55,
		INVALID_ENUM = 0x0500,
		INVALID_FRAMEBUFFER_OPERATION = 0x0506,
		INVALID_FRAMEBUFFER_OPERATION_EXT = 0x0506,
		INVALID_FRAMEBUFFER_OPERATION_OES = 0x0506,
		INVALID_INDEX = 0xFFFFFFFFu,
		INVALID_OPERATION = 0x0502,
		INVALID_VALUE = 0x0501,
		INVARIANT_DATATYPE_EXT = 0x87EB,
		INVARIANT_EXT = 0x87C2,
		INVARIANT_VALUE_EXT = 0x87EA,
		INVERSE_NV = 0x862B,
		INVERSE_TRANSPOSE_NV = 0x862D,
		INVERT = 0x150A,
		INVERTED_SCREEN_W_REND = 0x8491,
		IR_INSTRUMENT1_SGIX = 0x817F,
		IUI_N3F_V2F_EXT = 0x81AF,
		IUI_N3F_V3F_EXT = 0x81B0,
		IUI_V2F_EXT = 0x81AD,
		IUI_V3F_EXT = 0x81AE,
		KEEP = 0x1E00,
		LAST_VERTEX_CONVENTION = 0x8E4E,
		LAST_VERTEX_CONVENTION_EXT = 0x8E4E,
		LEFT = 0x0406,
		LEQUAL = 0x0203,
		LERP_ATI = 0x8969,
		LESS = 0x0201,
		LIGHT0 = 0x4000,
		LIGHT1 = 0x4001,
		LIGHT2 = 0x4002,
		LIGHT3 = 0x4003,
		LIGHT4 = 0x4004,
		LIGHT5 = 0x4005,
		LIGHT6 = 0x4006,
		LIGHT7 = 0x4007,
		LIGHTING = 0x0B50,
		LIGHTING_BIT = 0x00000040,
		LIGHT_ENV_MODE_SGIX = 0x8407,
		LIGHT_MODEL_AMBIENT = 0x0B53,
		LIGHT_MODEL_COLOR_CONTROL = 0x81F8,
		LIGHT_MODEL_COLOR_CONTROL_EXT = 0x81F8,
		LIGHT_MODEL_LOCAL_VIEWER = 0x0B51,
		LIGHT_MODEL_SPECULAR_VECTOR_APPLE = 0x85B0,
		LIGHT_MODEL_TWO_SIDE = 0x0B52,
		LINE = 0x1B01,
		LINEAR = 0x2601,
		LINEAR_ATTENUATION = 0x1208,
		LINEAR_CLIPMAP_LINEAR_SGIX = 0x8170,
		LINEAR_CLIPMAP_NEAREST_SGIX = 0x844F,
		LINEAR_DETAIL_ALPHA_SGIS = 0x8098,
		LINEAR_DETAIL_COLOR_SGIS = 0x8099,
		LINEAR_DETAIL_SGIS = 0x8097,
		LINEAR_MIPMAP_LINEAR = 0x2703,
		LINEAR_MIPMAP_NEAREST = 0x2701,
		LINEAR_SHARPEN_ALPHA_SGIS = 0x80AE,
		LINEAR_SHARPEN_COLOR_SGIS = 0x80AF,
		LINEAR_SHARPEN_SGIS = 0x80AD,
		LINES = 0x0001,
		LINES_ADJACENCY = 0x000A,
		LINES_ADJACENCY_ARB = 0x000A,
		LINES_ADJACENCY_EXT = 0x000A,
		LINE_BIT = 0x00000004,
		LINE_LOOP = 0x0002,
		LINE_QUALITY_HINT_SGIX = 0x835B,
		LINE_RESET_TOKEN = 0x0707,
		LINE_SMOOTH = 0x0B20,
		LINE_SMOOTH_HINT = 0x0C52,
		LINE_STIPPLE = 0x0B24,
		LINE_STIPPLE_PATTERN = 0x0B25,
		LINE_STIPPLE_REPEAT = 0x0B26,
		LINE_STRIP = 0x0003,
		LINE_STRIP_ADJACENCY = 0x000B,
		LINE_STRIP_ADJACENCY_ARB = 0x000B,
		LINE_STRIP_ADJACENCY_EXT = 0x000B,
		LINE_TOKEN = 0x0702,
		LINE_WIDTH = 0x0B21,
		LINE_WIDTH_GRANULARITY = 0x0B23,
		LINE_WIDTH_RANGE = 0x0B22,
		LINK_STATUS = 0x8B82,
		LIST_BASE = 0x0B32,
		LIST_BIT = 0x00020000,
		LIST_INDEX = 0x0B33,
		LIST_MODE = 0x0B30,
		LIST_PRIORITY_SGIX = 0x8182,
		LOAD = 0x0101,
		LOCAL_CONSTANT_DATATYPE_EXT = 0x87ED,
		LOCAL_CONSTANT_EXT = 0x87C3,
		LOCAL_CONSTANT_VALUE_EXT = 0x87EC,
		LOCAL_EXT = 0x87C4,
		LOGIC_OP = 0x0BF1,
		LOGIC_OP_MODE = 0x0BF0,
		LOWER_LEFT = 0x8CA1,
		LO_BIAS_NV = 0x8715,
		LO_SCALE_NV = 0x870F,
		LUMINANCE = 0x1909,
		LUMINANCE12 = 0x8041,
		LUMINANCE12_ALPHA12 = 0x8047,
		LUMINANCE12_ALPHA12_EXT = 0x8047,
		LUMINANCE12_ALPHA4 = 0x8046,
		LUMINANCE12_ALPHA4_EXT = 0x8046,
		LUMINANCE12_EXT = 0x8041,
		LUMINANCE16 = 0x8042,
		LUMINANCE16F_ARB = 0x881E,
		LUMINANCE16I_EXT = 0x8D8C,
		LUMINANCE16UI_EXT = 0x8D7A,
		LUMINANCE16_ALPHA16 = 0x8048,
		LUMINANCE16_ALPHA16_EXT = 0x8048,
		LUMINANCE16_ALPHA16_SNORM = 0x901A,
		LUMINANCE16_EXT = 0x8042,
		LUMINANCE16_SNORM = 0x9019,
		LUMINANCE32F_ARB = 0x8818,
		LUMINANCE32I_EXT = 0x8D86,
		LUMINANCE32UI_EXT = 0x8D74,
		LUMINANCE4 = 0x803F,
		LUMINANCE4_ALPHA4 = 0x8043,
		LUMINANCE4_ALPHA4_EXT = 0x8043,
		LUMINANCE4_EXT = 0x803F,
		LUMINANCE6_ALPHA2 = 0x8044,
		LUMINANCE6_ALPHA2_EXT = 0x8044,
		LUMINANCE8 = 0x8040,
		LUMINANCE8I_EXT = 0x8D92,
		LUMINANCE8UI_EXT = 0x8D80,
		LUMINANCE8_ALPHA8 = 0x8045,
		LUMINANCE8_ALPHA8_EXT = 0x8045,
		LUMINANCE8_ALPHA8_SNORM = 0x9016,
		LUMINANCE8_EXT = 0x8040,
		LUMINANCE8_SNORM = 0x9015,
		LUMINANCE_ALPHA = 0x190A,
		LUMINANCE_ALPHA16F_ARB = 0x881F,
		LUMINANCE_ALPHA16I_EXT = 0x8D8D,
		LUMINANCE_ALPHA16UI_EXT = 0x8D7B,
		LUMINANCE_ALPHA32F_ARB = 0x8819,
		LUMINANCE_ALPHA32I_EXT = 0x8D87,
		LUMINANCE_ALPHA32UI_EXT = 0x8D75,
		LUMINANCE_ALPHA8I_EXT = 0x8D93,
		LUMINANCE_ALPHA8UI_EXT = 0x8D81,
		LUMINANCE_ALPHA_FLOAT16_APPLE = 0x881F,
		LUMINANCE_ALPHA_FLOAT16_ATI = 0x881F,
		LUMINANCE_ALPHA_FLOAT32_APPLE = 0x8819,
		LUMINANCE_ALPHA_FLOAT32_ATI = 0x8819,
		LUMINANCE_ALPHA_INTEGER_EXT = 0x8D9D,
		LUMINANCE_ALPHA_SNORM = 0x9012,
		LUMINANCE_FLOAT16_APPLE = 0x881E,
		LUMINANCE_FLOAT16_ATI = 0x881E,
		LUMINANCE_FLOAT32_APPLE = 0x8818,
		LUMINANCE_FLOAT32_ATI = 0x8818,
		LUMINANCE_INTEGER_EXT = 0x8D9C,
		LUMINANCE_SNORM = 0x9011,
		MAD_ATI = 0x8968,
		MAGNITUDE_BIAS_NV = 0x8718,
		MAGNITUDE_SCALE_NV = 0x8712,
		MAJOR_VERSION = 0x821B,
		MAP1_COLOR_4 = 0x0D90,
		MAP1_GRID_DOMAIN = 0x0DD0,
		MAP1_GRID_SEGMENTS = 0x0DD1,
		MAP1_INDEX = 0x0D91,
		MAP1_NORMAL = 0x0D92,
		MAP1_TEXTURE_COORD_1 = 0x0D93,
		MAP1_TEXTURE_COORD_2 = 0x0D94,
		MAP1_TEXTURE_COORD_3 = 0x0D95,
		MAP1_TEXTURE_COORD_4 = 0x0D96,
		MAP1_VERTEX_3 = 0x0D97,
		MAP1_VERTEX_4 = 0x0D98,
		MAP1_VERTEX_ATTRIB0_4_NV = 0x8660,
		MAP1_VERTEX_ATTRIB10_4_NV = 0x866A,
		MAP1_VERTEX_ATTRIB11_4_NV = 0x866B,
		MAP1_VERTEX_ATTRIB12_4_NV = 0x866C,
		MAP1_VERTEX_ATTRIB13_4_NV = 0x866D,
		MAP1_VERTEX_ATTRIB14_4_NV = 0x866E,
		MAP1_VERTEX_ATTRIB15_4_NV = 0x866F,
		MAP1_VERTEX_ATTRIB1_4_NV = 0x8661,
		MAP1_VERTEX_ATTRIB2_4_NV = 0x8662,
		MAP1_VERTEX_ATTRIB3_4_NV = 0x8663,
		MAP1_VERTEX_ATTRIB4_4_NV = 0x8664,
		MAP1_VERTEX_ATTRIB5_4_NV = 0x8665,
		MAP1_VERTEX_ATTRIB6_4_NV = 0x8666,
		MAP1_VERTEX_ATTRIB7_4_NV = 0x8667,
		MAP1_VERTEX_ATTRIB8_4_NV = 0x8668,
		MAP1_VERTEX_ATTRIB9_4_NV = 0x8669,
		MAP2_COLOR_4 = 0x0DB0,
		MAP2_GRID_DOMAIN = 0x0DD2,
		MAP2_GRID_SEGMENTS = 0x0DD3,
		MAP2_INDEX = 0x0DB1,
		MAP2_NORMAL = 0x0DB2,
		MAP2_TEXTURE_COORD_1 = 0x0DB3,
		MAP2_TEXTURE_COORD_2 = 0x0DB4,
		MAP2_TEXTURE_COORD_3 = 0x0DB5,
		MAP2_TEXTURE_COORD_4 = 0x0DB6,
		MAP2_VERTEX_3 = 0x0DB7,
		MAP2_VERTEX_4 = 0x0DB8,
		MAP2_VERTEX_ATTRIB0_4_NV = 0x8670,
		MAP2_VERTEX_ATTRIB10_4_NV = 0x867A,
		MAP2_VERTEX_ATTRIB11_4_NV = 0x867B,
		MAP2_VERTEX_ATTRIB12_4_NV = 0x867C,
		MAP2_VERTEX_ATTRIB13_4_NV = 0x867D,
		MAP2_VERTEX_ATTRIB14_4_NV = 0x867E,
		MAP2_VERTEX_ATTRIB15_4_NV = 0x867F,
		MAP2_VERTEX_ATTRIB1_4_NV = 0x8671,
		MAP2_VERTEX_ATTRIB2_4_NV = 0x8672,
		MAP2_VERTEX_ATTRIB3_4_NV = 0x8673,
		MAP2_VERTEX_ATTRIB4_4_NV = 0x8674,
		MAP2_VERTEX_ATTRIB5_4_NV = 0x8675,
		MAP2_VERTEX_ATTRIB6_4_NV = 0x8676,
		MAP2_VERTEX_ATTRIB7_4_NV = 0x8677,
		MAP2_VERTEX_ATTRIB8_4_NV = 0x8678,
		MAP2_VERTEX_ATTRIB9_4_NV = 0x8679,
		MAP_ATTRIB_U_ORDER_NV = 0x86C3,
		MAP_ATTRIB_V_ORDER_NV = 0x86C4,
		MAP_COLOR = 0x0D10,
		MAP_FLUSH_EXPLICIT_BIT = 0x0010,
		MAP_INVALIDATE_BUFFER_BIT = 0x0008,
		MAP_INVALIDATE_RANGE_BIT = 0x0004,
		MAP_READ_BIT = 0x0001,
		MAP_STENCIL = 0x0D11,
		MAP_TESSELLATION_NV = 0x86C2,
		MAP_UNSYNCHRONIZED_BIT = 0x0020,
		MAP_WRITE_BIT = 0x0002,
		MATRIX0_ARB = 0x88C0,
		MATRIX0_NV = 0x8630,
		MATRIX10_ARB = 0x88CA,
		MATRIX11_ARB = 0x88CB,
		MATRIX12_ARB = 0x88CC,
		MATRIX13_ARB = 0x88CD,
		MATRIX14_ARB = 0x88CE,
		MATRIX15_ARB = 0x88CF,
		MATRIX16_ARB = 0x88D0,
		MATRIX17_ARB = 0x88D1,
		MATRIX18_ARB = 0x88D2,
		MATRIX19_ARB = 0x88D3,
		MATRIX1_ARB = 0x88C1,
		MATRIX1_NV = 0x8631,
		MATRIX20_ARB = 0x88D4,
		MATRIX21_ARB = 0x88D5,
		MATRIX22_ARB = 0x88D6,
		MATRIX23_ARB = 0x88D7,
		MATRIX24_ARB = 0x88D8,
		MATRIX25_ARB = 0x88D9,
		MATRIX26_ARB = 0x88DA,
		MATRIX27_ARB = 0x88DB,
		MATRIX28_ARB = 0x88DC,
		MATRIX29_ARB = 0x88DD,
		MATRIX2_ARB = 0x88C2,
		MATRIX2_NV = 0x8632,
		MATRIX30_ARB = 0x88DE,
		MATRIX31_ARB = 0x88DF,
		MATRIX3_ARB = 0x88C3,
		MATRIX3_NV = 0x8633,
		MATRIX4_ARB = 0x88C4,
		MATRIX4_NV = 0x8634,
		MATRIX5_ARB = 0x88C5,
		MATRIX5_NV = 0x8635,
		MATRIX6_ARB = 0x88C6,
		MATRIX6_NV = 0x8636,
		MATRIX7_ARB = 0x88C7,
		MATRIX7_NV = 0x8637,
		MATRIX8_ARB = 0x88C8,
		MATRIX9_ARB = 0x88C9,
		MATRIX_EXT = 0x87C0,
		MATRIX_INDEX_ARRAY_ARB = 0x8844,
		MATRIX_INDEX_ARRAY_BUFFER_BINDING_OES = 0x8B9E,
		MATRIX_INDEX_ARRAY_OES = 0x8844,
		MATRIX_INDEX_ARRAY_POINTER_ARB = 0x8849,
		MATRIX_INDEX_ARRAY_POINTER_OES = 0x8849,
		MATRIX_INDEX_ARRAY_SIZE_ARB = 0x8846,
		MATRIX_INDEX_ARRAY_SIZE_OES = 0x8846,
		MATRIX_INDEX_ARRAY_STRIDE_ARB = 0x8848,
		MATRIX_INDEX_ARRAY_STRIDE_OES = 0x8848,
		MATRIX_INDEX_ARRAY_TYPE_ARB = 0x8847,
		MATRIX_INDEX_ARRAY_TYPE_OES = 0x8847,
		MATRIX_MODE = 0x0BA0,
		MATRIX_PALETTE_ARB = 0x8840,
		MATRIX_PALETTE_OES = 0x8840,
		MAX = 0x8008,
		MAX_3D_TEXTURE_SIZE = 0x8073,
		MAX_3D_TEXTURE_SIZE_EXT = 0x8073,
		MAX_3D_TEXTURE_SIZE_OES = 0x8073,
		MAX_4D_TEXTURE_SIZE_SGIS = 0x8138,
		MAX_ACTIVE_LIGHTS_SGIX = 0x8405,
		MAX_ARRAY_TEXTURE_LAYERS = 0x88FF,
		MAX_ARRAY_TEXTURE_LAYERS_EXT = 0x88FF,
		MAX_ASYNC_DRAW_PIXELS_SGIX = 0x8360,
		MAX_ASYNC_HISTOGRAM_SGIX = 0x832D,
		MAX_ASYNC_READ_PIXELS_SGIX = 0x8361,
		MAX_ASYNC_TEX_IMAGE_SGIX = 0x835F,
		MAX_ATTRIB_STACK_DEPTH = 0x0D35,
		MAX_BINDABLE_UNIFORM_SIZE_EXT = 0x8DED,
		MAX_CLIENT_ATTRIB_STACK_DEPTH = 0x0D3B,
		MAX_CLIPMAP_DEPTH_SGIX = 0x8177,
		MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX = 0x8178,
		MAX_CLIP_DISTANCES = 0x0D32,
		MAX_CLIP_PLANES = 0x0D32,
		MAX_COLOR_ATTACHMENTS = 0x8CDF,
		MAX_COLOR_ATTACHMENTS_EXT = 0x8CDF,
		MAX_COLOR_MATRIX_STACK_DEPTH = 0x80B3,
		MAX_COLOR_MATRIX_STACK_DEPTH_SGI = 0x80B3,
		MAX_COLOR_TEXTURE_SAMPLES = 0x910E,
		MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x8A33,
		MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = 0x8A32,
		MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D,
		MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB = 0x8B4D,
		MAX_COMBINED_UNIFORM_BLOCKS = 0x8A2E,
		MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x8A31,
		MAX_CONVOLUTION_HEIGHT = 0x801B,
		MAX_CONVOLUTION_HEIGHT_EXT = 0x801B,
		MAX_CONVOLUTION_WIDTH = 0x801A,
		MAX_CONVOLUTION_WIDTH_EXT = 0x801A,
		MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C,
		MAX_CUBE_MAP_TEXTURE_SIZE_ARB = 0x851C,
		MAX_CUBE_MAP_TEXTURE_SIZE_EXT = 0x851C,
		MAX_CUBE_MAP_TEXTURE_SIZE_OES = 0x851C,
		MAX_DEFORMATION_ORDER_SGIX = 0x8197,
		MAX_DEPTH_TEXTURE_SAMPLES = 0x910F,
		MAX_DRAW_BUFFERS = 0x8824,
		MAX_DRAW_BUFFERS_ARB = 0x8824,
		MAX_DRAW_BUFFERS_ATI = 0x8824,
		MAX_ELEMENTS_INDICES = 0x80E9,
		MAX_ELEMENTS_VERTICES = 0x80E8,
		MAX_EVAL_ORDER = 0x0D30,
		MAX_EXT = 0x8008,
		MAX_FOG_FUNC_POINTS_SGIS = 0x812C,
		MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT = 0x8DE3,
		MAX_FRAGMENT_INPUT_COMPONENTS = 0x9125,
		MAX_FRAGMENT_LIGHTS_SGIX = 0x8404,
		MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV = 0x8868,
		MAX_FRAGMENT_UNIFORM_BLOCKS = 0x8A2D,
		MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49,
		MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB = 0x8B49,
		MAX_FRAMEZOOM_FACTOR_SGIX = 0x818D,
		MAX_GENERAL_COMBINERS_NV = 0x854D,
		MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT = 0x8DE4,
		MAX_GEOMETRY_INPUT_COMPONENTS = 0x9123,
		MAX_GEOMETRY_OUTPUT_COMPONENTS = 0x9124,
		MAX_GEOMETRY_OUTPUT_VERTICES = 0x8DE0,
		MAX_GEOMETRY_OUTPUT_VERTICES_ARB = 0x8DE0,
		MAX_GEOMETRY_OUTPUT_VERTICES_EXT = 0x8DE0,
		MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 0x8C29,
		MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB = 0x8C29,
		MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT = 0x8C29,
		MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 0x8DE1,
		MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB = 0x8DE1,
		MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT = 0x8DE1,
		MAX_GEOMETRY_UNIFORM_BLOCKS = 0x8A2C,
		MAX_GEOMETRY_UNIFORM_COMPONENTS = 0x8DDF,
		MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB = 0x8DDF,
		MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT = 0x8DDF,
		MAX_GEOMETRY_VARYING_COMPONENTS_ARB = 0x8DDD,
		MAX_GEOMETRY_VARYING_COMPONENTS_EXT = 0x8DDD,
		MAX_INTEGER_SAMPLES = 0x9110,
		MAX_LIGHTS = 0x0D31,
		MAX_LIST_NESTING = 0x0B31,
		MAX_MAP_TESSELLATION_NV = 0x86D6,
		MAX_MATRIX_PALETTE_STACK_DEPTH_ARB = 0x8841,
		MAX_MODELVIEW_STACK_DEPTH = 0x0D36,
		MAX_MULTISAMPLE_COVERAGE_MODES_NV = 0x8E11,
		MAX_NAME_STACK_DEPTH = 0x0D37,
		MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87CA,
		MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT = 0x87CD,
		MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT = 0x87CE,
		MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87CC,
		MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT = 0x87CB,
		MAX_PALETTE_MATRICES_ARB = 0x8842,
		MAX_PALETTE_MATRICES_OES = 0x8842,
		MAX_PIXEL_MAP_TABLE = 0x0D34,
		MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 0x8337,
		MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 0x87F1,
		MAX_PROGRAM_ADDRESS_REGISTERS_ARB = 0x88B1,
		MAX_PROGRAM_ALU_INSTRUCTIONS_ARB = 0x880B,
		MAX_PROGRAM_ATTRIBS_ARB = 0x88AD,
		MAX_PROGRAM_ATTRIB_COMPONENTS_NV = 0x8908,
		MAX_PROGRAM_CALL_DEPTH_NV = 0x88F5,
		MAX_PROGRAM_ENV_PARAMETERS_ARB = 0x88B5,
		MAX_PROGRAM_EXEC_INSTRUCTIONS_NV = 0x88F4,
		MAX_PROGRAM_GENERIC_ATTRIBS_NV = 0x8DA5,
		MAX_PROGRAM_GENERIC_RESULTS_NV = 0x8DA6,
		MAX_PROGRAM_IF_DEPTH_NV = 0x88F6,
		MAX_PROGRAM_INSTRUCTIONS_ARB = 0x88A1,
		MAX_PROGRAM_LOCAL_PARAMETERS_ARB = 0x88B4,
		MAX_PROGRAM_LOOP_COUNT_NV = 0x88F8,
		MAX_PROGRAM_LOOP_DEPTH_NV = 0x88F7,
		MAX_PROGRAM_MATRICES_ARB = 0x862F,
		MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB = 0x862E,
		MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 0x88B3,
		MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 0x880E,
		MAX_PROGRAM_NATIVE_ATTRIBS_ARB = 0x88AF,
		MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 0x88A3,
		MAX_PROGRAM_NATIVE_PARAMETERS_ARB = 0x88AB,
		MAX_PROGRAM_NATIVE_TEMPORARIES_ARB = 0x88A7,
		MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 0x8810,
		MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 0x880F,
		MAX_PROGRAM_OUTPUT_VERTICES_NV = 0x8C27,
		MAX_PROGRAM_PARAMETERS_ARB = 0x88A9,
		MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV = 0x8DA0,
		MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV = 0x8DA1,
		MAX_PROGRAM_RESULT_COMPONENTS_NV = 0x8909,
		MAX_PROGRAM_TEMPORARIES_ARB = 0x88A5,
		MAX_PROGRAM_TEXEL_OFFSET = 0x8905,
		MAX_PROGRAM_TEXEL_OFFSET_NV = 0x8905,
		MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS = 0x8F9F,
		MAX_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5F,
		MAX_PROGRAM_TEX_INDIRECTIONS_ARB = 0x880D,
		MAX_PROGRAM_TEX_INSTRUCTIONS_ARB = 0x880C,
		MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV = 0x8C28,
		MAX_PROJECTION_STACK_DEPTH = 0x0D38,
		MAX_RATIONAL_EVAL_ORDER_NV = 0x86D7,
		MAX_RECTANGLE_TEXTURE_SIZE = 0x84F8,
		MAX_RECTANGLE_TEXTURE_SIZE_ARB = 0x84F8,
		MAX_RECTANGLE_TEXTURE_SIZE_NV = 0x84F8,
		MAX_RENDERBUFFER_SIZE = 0x84E8,
		MAX_RENDERBUFFER_SIZE_EXT = 0x84E8,
		MAX_RENDERBUFFER_SIZE_OES = 0x84E8,
		MAX_SAMPLES = 0x8D57,
		MAX_SAMPLES_EXT = 0x8D57,
		MAX_SAMPLE_MASK_WORDS = 0x8E59,
		MAX_SAMPLE_MASK_WORDS_NV = 0x8E59,
		MAX_SERVER_WAIT_TIMEOUT = 0x9111,
		MAX_SHADER_BUFFER_ADDRESS_NV = 0x8F35,
		MAX_SHININESS_NV = 0x8504,
		MAX_SPOT_EXPONENT_NV = 0x8505,
		MAX_TEXTURE_BUFFER_SIZE = 0x8C2B,
		MAX_TEXTURE_BUFFER_SIZE_ARB = 0x8C2B,
		MAX_TEXTURE_BUFFER_SIZE_EXT = 0x8C2B,
		MAX_TEXTURE_COORDS = 0x8871,
		MAX_TEXTURE_COORDS_ARB = 0x8871,
		MAX_TEXTURE_COORDS_NV = 0x8871,
		MAX_TEXTURE_IMAGE_UNITS = 0x8872,
		MAX_TEXTURE_IMAGE_UNITS_ARB = 0x8872,
		MAX_TEXTURE_IMAGE_UNITS_NV = 0x8872,
		MAX_TEXTURE_LOD_BIAS = 0x84FD,
		MAX_TEXTURE_LOD_BIAS_EXT = 0x84FD,
		MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FF,
		MAX_TEXTURE_SIZE = 0x0D33,
		MAX_TEXTURE_STACK_DEPTH = 0x0D39,
		MAX_TEXTURE_UNITS = 0x84E2,
		MAX_TEXTURE_UNITS_ARB = 0x84E2,
		MAX_TRACK_MATRICES_NV = 0x862F,
		MAX_TRACK_MATRIX_STACK_DEPTH_NV = 0x862E,
		MAX_TRANSFORM_FEEDBACK_INTERLEAVED_ATTRIBS_NV = 0x8C8A,
		MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x8C8A,
		MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT = 0x8C8A,
		MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 0x8C8B,
		MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT = 0x8C8B,
		MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV = 0x8C8B,
		MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 0x8C80,
		MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT = 0x8C80,
		MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV = 0x8C80,
		MAX_UNIFORM_BLOCK_SIZE = 0x8A30,
		MAX_UNIFORM_BUFFER_BINDINGS = 0x8A2F,
		MAX_VARYING_COMPONENTS = 0x8B4B,
		MAX_VARYING_COMPONENTS_EXT = 0x8B4B,
		MAX_VARYING_FLOATS = 0x8B4B,
		MAX_VARYING_FLOATS_ARB = 0x8B4B,
		MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV = 0x8520,
		MAX_VERTEX_ATTRIBS = 0x8869,
		MAX_VERTEX_ATTRIBS_ARB = 0x8869,
		MAX_VERTEX_BINDABLE_UNIFORMS_EXT = 0x8DE2,
		MAX_VERTEX_OUTPUT_COMPONENTS = 0x9122,
		MAX_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87C5,
		MAX_VERTEX_SHADER_INVARIANTS_EXT = 0x87C7,
		MAX_VERTEX_SHADER_LOCALS_EXT = 0x87C9,
		MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87C8,
		MAX_VERTEX_SHADER_VARIANTS_EXT = 0x87C6,
		MAX_VERTEX_STREAMS_ATI = 0x876B,
		MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C,
		MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB = 0x8B4C,
		MAX_VERTEX_UNIFORM_BLOCKS = 0x8A2B,
		MAX_VERTEX_UNIFORM_COMPONENTS = 0x8B4A,
		MAX_VERTEX_UNIFORM_COMPONENTS_ARB = 0x8B4A,
		MAX_VERTEX_UNITS_ARB = 0x86A4,
		MAX_VERTEX_UNITS_OES = 0x86A4,
		MAX_VERTEX_VARYING_COMPONENTS_ARB = 0x8DDE,
		MAX_VERTEX_VARYING_COMPONENTS_EXT = 0x8DDE,
		MAX_VIEWPORT_DIMS = 0x0D3A,
		MIN = 0x8007,
		MINMAX = 0x802E,
		MINMAX_EXT = 0x802E,
		MINMAX_FORMAT = 0x802F,
		MINMAX_FORMAT_EXT = 0x802F,
		MINMAX_SINK = 0x8030,
		MINMAX_SINK_EXT = 0x8030,
		MINOR_VERSION = 0x821C,
		MIN_EXT = 0x8007,
		MIN_PROGRAM_TEXEL_OFFSET = 0x8904,
		MIN_PROGRAM_TEXEL_OFFSET_NV = 0x8904,
		MIN_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5E,
		MIN_SAMPLE_SHADING_VALUE_ARB = 0x8C37,
		MIRRORED_REPEAT = 0x8370,
		MIRRORED_REPEAT_ARB = 0x8370,
		MIRRORED_REPEAT_IBM = 0x8370,
		MIRRORED_REPEAT_OES = 0x8370,
		MIRROR_CLAMP_ATI = 0x8742,
		MIRROR_CLAMP_EXT = 0x8742,
		MIRROR_CLAMP_TO_BORDER_EXT = 0x8912,
		MIRROR_CLAMP_TO_EDGE_ATI = 0x8743,
		MIRROR_CLAMP_TO_EDGE_EXT = 0x8743,
		MODELVIEW = 0x1700,
		MODELVIEW0_ARB = 0x1700,
		MODELVIEW10_ARB = 0x872A,
		MODELVIEW11_ARB = 0x872B,
		MODELVIEW12_ARB = 0x872C,
		MODELVIEW13_ARB = 0x872D,
		MODELVIEW14_ARB = 0x872E,
		MODELVIEW15_ARB = 0x872F,
		MODELVIEW16_ARB = 0x8730,
		MODELVIEW17_ARB = 0x8731,
		MODELVIEW18_ARB = 0x8732,
		MODELVIEW19_ARB = 0x8733,
		MODELVIEW1_ARB = 0x850A,
		MODELVIEW1_EXT = 0x850A,
		MODELVIEW1_STACK_DEPTH_EXT = 0x8502,
		MODELVIEW20_ARB = 0x8734,
		MODELVIEW21_ARB = 0x8735,
		MODELVIEW22_ARB = 0x8736,
		MODELVIEW23_ARB = 0x8737,
		MODELVIEW24_ARB = 0x8738,
		MODELVIEW25_ARB = 0x8739,
		MODELVIEW26_ARB = 0x873A,
		MODELVIEW27_ARB = 0x873B,
		MODELVIEW28_ARB = 0x873C,
		MODELVIEW29_ARB = 0x873D,
		MODELVIEW2_ARB = 0x8722,
		MODELVIEW30_ARB = 0x873E,
		MODELVIEW31_ARB = 0x873F,
		MODELVIEW3_ARB = 0x8723,
		MODELVIEW4_ARB = 0x8724,
		MODELVIEW5_ARB = 0x8725,
		MODELVIEW6_ARB = 0x8726,
		MODELVIEW7_ARB = 0x8727,
		MODELVIEW8_ARB = 0x8728,
		MODELVIEW9_ARB = 0x8729,
		MODELVIEW_MATRIX = 0x0BA6,
		MODELVIEW_MATRIX1_EXT = 0x8506,
		MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES = 0x898D,
		MODELVIEW_PROJECTION_NV = 0x8629,
		MODELVIEW_STACK_DEPTH = 0x0BA3,
		MODULATE = 0x2100,
		MODULATE_ADD_ATI = 0x8744,
		MODULATE_COLOR_IMG = 0x8C04,
		MODULATE_SIGNED_ADD_ATI = 0x8745,
		MODULATE_SUBTRACT_ATI = 0x8746,
		MOV_ATI = 0x8961,
		MULT = 0x0103,
		MULTISAMPLE = 0x809D,
		MULTISAMPLE_3DFX = 0x86B2,
		MULTISAMPLE_ARB = 0x809D,
		MULTISAMPLE_BIT = 0x20000000,
		MULTISAMPLE_BIT_3DFX = 0x20000000,
		MULTISAMPLE_BIT_ARB = 0x20000000,
		MULTISAMPLE_BIT_EXT = 0x20000000,
		MULTISAMPLE_COVERAGE_MODES_NV = 0x8E12,
		MULTISAMPLE_EXT = 0x809D,
		MULTISAMPLE_FILTER_HINT_NV = 0x8534,
		MULTISAMPLE_SGIS = 0x809D,
		MUL_ATI = 0x8964,
		MVP_MATRIX_EXT = 0x87E3,
		N3F_V3F = 0x2A25,
		NAME_STACK_DEPTH = 0x0D70,
		NAND = 0x150E,
		NEAREST = 0x2600,
		NEAREST_CLIPMAP_LINEAR_SGIX = 0x844E,
		NEAREST_CLIPMAP_NEAREST_SGIX = 0x844D,
		NEAREST_MIPMAP_LINEAR = 0x2702,
		NEAREST_MIPMAP_NEAREST = 0x2700,
		NEGATE_BIT_ATI = 0x00000004,
		NEGATIVE_ONE_EXT = 0x87DF,
		NEGATIVE_W_EXT = 0x87DC,
		NEGATIVE_X_EXT = 0x87D9,
		NEGATIVE_Y_EXT = 0x87DA,
		NEGATIVE_Z_EXT = 0x87DB,
		NEVER = 0x0200,
		NICEST = 0x1102,
		NONE = 0,
		NOOP = 0x1505,
		NOR = 0x1508,
		NORMALIZE = 0x0BA1,
		NORMALIZED_RANGE_EXT = 0x87E0,
		NORMAL_ARRAY = 0x8075,
		NORMAL_ARRAY_ADDRESS_NV = 0x8F22,
		NORMAL_ARRAY_BUFFER_BINDING = 0x8897,
		NORMAL_ARRAY_BUFFER_BINDING_ARB = 0x8897,
		NORMAL_ARRAY_COUNT_EXT = 0x8080,
		NORMAL_ARRAY_EXT = 0x8075,
		NORMAL_ARRAY_LENGTH_NV = 0x8F2C,
		NORMAL_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F6,
		NORMAL_ARRAY_POINTER = 0x808F,
		NORMAL_ARRAY_POINTER_EXT = 0x808F,
		NORMAL_ARRAY_STRIDE = 0x807F,
		NORMAL_ARRAY_STRIDE_EXT = 0x807F,
		NORMAL_ARRAY_TYPE = 0x807E,
		NORMAL_ARRAY_TYPE_EXT = 0x807E,
		NORMAL_MAP = 0x8511,
		NORMAL_MAP_ARB = 0x8511,
		NORMAL_MAP_EXT = 0x8511,
		NORMAL_MAP_OES = 0x8511,
		NOTEQUAL = 0x0205,
		NO_ERROR = 0,
		NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2,
		NUM_COMPRESSED_TEXTURE_FORMATS_ARB = 0x86A2,
		NUM_EXTENSIONS = 0x821D,
		NUM_FILL_STREAMS_NV = 0x8E29,
		NUM_FRAGMENT_CONSTANTS_ATI = 0x896F,
		NUM_FRAGMENT_REGISTERS_ATI = 0x896E,
		NUM_GENERAL_COMBINERS_NV = 0x854E,
		NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI = 0x8973,
		NUM_INSTRUCTIONS_PER_PASS_ATI = 0x8971,
		NUM_INSTRUCTIONS_TOTAL_ATI = 0x8972,
		NUM_LOOPBACK_COMPONENTS_ATI = 0x8974,
		NUM_PASSES_ATI = 0x8970,
		NUM_PROGRAM_BINARY_FORMATS_OES = 0x87FE,
		OBJECT_ACTIVE_ATTRIBUTES_ARB = 0x8B89,
		OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB = 0x8B8A,
		OBJECT_ACTIVE_UNIFORMS_ARB = 0x8B86,
		OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB = 0x8B87,
		OBJECT_ATTACHED_OBJECTS_ARB = 0x8B85,
		OBJECT_BUFFER_SIZE_ATI = 0x8764,
		OBJECT_BUFFER_USAGE_ATI = 0x8765,
		OBJECT_COMPILE_STATUS_ARB = 0x8B81,
		OBJECT_DELETE_STATUS_ARB = 0x8B80,
		OBJECT_DISTANCE_TO_LINE_SGIS = 0x81F3,
		OBJECT_DISTANCE_TO_POINT_SGIS = 0x81F1,
		OBJECT_INFO_LOG_LENGTH_ARB = 0x8B84,
		OBJECT_LINEAR = 0x2401,
		OBJECT_LINE_SGIS = 0x81F7,
		OBJECT_LINK_STATUS_ARB = 0x8B82,
		OBJECT_PLANE = 0x2501,
		OBJECT_POINT_SGIS = 0x81F5,
		OBJECT_SHADER_SOURCE_LENGTH_ARB = 0x8B88,
		OBJECT_SUBTYPE_ARB = 0x8B4F,
		OBJECT_TYPE = 0x9112,
		OBJECT_TYPE_ARB = 0x8B4E,
		OBJECT_VALIDATE_STATUS_ARB = 0x8B83,
		OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV = 0x8856,
		OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV = 0x8857,
		OFFSET_HILO_TEXTURE_2D_NV = 0x8854,
		OFFSET_HILO_TEXTURE_RECTANGLE_NV = 0x8855,
		OFFSET_PROJECTIVE_TEXTURE_2D_NV = 0x8850,
		OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV = 0x8851,
		OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV = 0x8852,
		OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV = 0x8853,
		OFFSET_TEXTURE_2D_NV = 0x86E8,
		OFFSET_TEXTURE_BIAS_NV = 0x86E3,
		OFFSET_TEXTURE_MATRIX_NV = 0x86E1,
		OFFSET_TEXTURE_RECTANGLE_NV = 0x864C,
		OFFSET_TEXTURE_RECTANGLE_SCALE_NV = 0x864D,
		OFFSET_TEXTURE_SCALE_NV = 0x86E2,
		ONE = 1,
		ONE_EXT = 0x87DE,
		ONE_MINUS_CONSTANT_ALPHA = 0x8004,
		ONE_MINUS_CONSTANT_ALPHA_EXT = 0x8004,
		ONE_MINUS_CONSTANT_COLOR = 0x8002,
		ONE_MINUS_CONSTANT_COLOR_EXT = 0x8002,
		ONE_MINUS_DST_ALPHA = 0x0305,
		ONE_MINUS_DST_COLOR = 0x0307,
		ONE_MINUS_SRC_ALPHA = 0x0303,
		ONE_MINUS_SRC_COLOR = 0x0301,
		OPERAND0_ALPHA = 0x8598,
		OPERAND0_ALPHA_EXT = 0x8598,
		OPERAND0_RGB = 0x8590,
		OPERAND0_RGB_EXT = 0x8590,
		OPERAND1_ALPHA = 0x8599,
		OPERAND1_ALPHA_EXT = 0x8599,
		OPERAND1_RGB = 0x8591,
		OPERAND1_RGB_EXT = 0x8591,
		OPERAND2_ALPHA = 0x859A,
		OPERAND2_ALPHA_EXT = 0x859A,
		OPERAND2_RGB = 0x8592,
		OPERAND2_RGB_EXT = 0x8592,
		OPERAND3_ALPHA_NV = 0x859B,
		OPERAND3_RGB_NV = 0x8593,
		OP_ADD_EXT = 0x8787,
		OP_CLAMP_EXT = 0x878E,
		OP_CROSS_PRODUCT_EXT = 0x8797,
		OP_DOT3_EXT = 0x8784,
		OP_DOT4_EXT = 0x8785,
		OP_EXP_BASE_2_EXT = 0x8791,
		OP_FLOOR_EXT = 0x878F,
		OP_FRAC_EXT = 0x8789,
		OP_INDEX_EXT = 0x8782,
		OP_LOG_BASE_2_EXT = 0x8792,
		OP_MADD_EXT = 0x8788,
		OP_MAX_EXT = 0x878A,
		OP_MIN_EXT = 0x878B,
		OP_MOV_EXT = 0x8799,
		OP_MULTIPLY_MATRIX_EXT = 0x8798,
		OP_MUL_EXT = 0x8786,
		OP_NEGATE_EXT = 0x8783,
		OP_POWER_EXT = 0x8793,
		OP_RECIP_EXT = 0x8794,
		OP_RECIP_SQRT_EXT = 0x8795,
		OP_ROUND_EXT = 0x8790,
		OP_SET_GE_EXT = 0x878C,
		OP_SET_LT_EXT = 0x878D,
		OP_SUB_EXT = 0x8796,
		OR = 0x1507,
		ORDER = 0x0A01,
		OR_INVERTED = 0x150D,
		OR_REVERSE = 0x150B,
		OUTPUT_COLOR0_EXT = 0x879B,
		OUTPUT_COLOR1_EXT = 0x879C,
		OUTPUT_FOG_EXT = 0x87BD,
		OUTPUT_TEXTURE_COORD0_EXT = 0x879D,
		OUTPUT_TEXTURE_COORD10_EXT = 0x87A7,
		OUTPUT_TEXTURE_COORD11_EXT = 0x87A8,
		OUTPUT_TEXTURE_COORD12_EXT = 0x87A9,
		OUTPUT_TEXTURE_COORD13_EXT = 0x87AA,
		OUTPUT_TEXTURE_COORD14_EXT = 0x87AB,
		OUTPUT_TEXTURE_COORD15_EXT = 0x87AC,
		OUTPUT_TEXTURE_COORD16_EXT = 0x87AD,
		OUTPUT_TEXTURE_COORD17_EXT = 0x87AE,
		OUTPUT_TEXTURE_COORD18_EXT = 0x87AF,
		OUTPUT_TEXTURE_COORD19_EXT = 0x87B0,
		OUTPUT_TEXTURE_COORD1_EXT = 0x879E,
		OUTPUT_TEXTURE_COORD20_EXT = 0x87B1,
		OUTPUT_TEXTURE_COORD21_EXT = 0x87B2,
		OUTPUT_TEXTURE_COORD22_EXT = 0x87B3,
		OUTPUT_TEXTURE_COORD23_EXT = 0x87B4,
		OUTPUT_TEXTURE_COORD24_EXT = 0x87B5,
		OUTPUT_TEXTURE_COORD25_EXT = 0x87B6,
		OUTPUT_TEXTURE_COORD26_EXT = 0x87B7,
		OUTPUT_TEXTURE_COORD27_EXT = 0x87B8,
		OUTPUT_TEXTURE_COORD28_EXT = 0x87B9,
		OUTPUT_TEXTURE_COORD29_EXT = 0x87BA,
		OUTPUT_TEXTURE_COORD2_EXT = 0x879F,
		OUTPUT_TEXTURE_COORD30_EXT = 0x87BB,
		OUTPUT_TEXTURE_COORD31_EXT = 0x87BC,
		OUTPUT_TEXTURE_COORD3_EXT = 0x87A0,
		OUTPUT_TEXTURE_COORD4_EXT = 0x87A1,
		OUTPUT_TEXTURE_COORD5_EXT = 0x87A2,
		OUTPUT_TEXTURE_COORD6_EXT = 0x87A3,
		OUTPUT_TEXTURE_COORD7_EXT = 0x87A4,
		OUTPUT_TEXTURE_COORD8_EXT = 0x87A5,
		OUTPUT_TEXTURE_COORD9_EXT = 0x87A6,
		OUTPUT_VERTEX_EXT = 0x879A,
		OUT_OF_MEMORY = 0x0505,
		PACK_ALIGNMENT = 0x0D05,
		PACK_CMYK_HINT_EXT = 0x800E,
		PACK_COMPRESSED_SIZE_SGIX = 0x831C,
		PACK_IMAGE_DEPTH_SGIS = 0x8131,
		PACK_IMAGE_HEIGHT = 0x806C,
		PACK_IMAGE_HEIGHT_EXT = 0x806C,
		PACK_INVERT_MESA = 0x8758,
		PACK_LSB_FIRST = 0x0D01,
		PACK_MAX_COMPRESSED_SIZE_SGIX = 0x831B,
		PACK_RESAMPLE_OML = 0x8984,
		PACK_RESAMPLE_SGIX = 0x842C,
		PACK_ROW_BYTES_APPLE = 0x8A15,
		PACK_ROW_LENGTH = 0x0D02,
		PACK_SKIP_IMAGES = 0x806B,
		PACK_SKIP_IMAGES_EXT = 0x806B,
		PACK_SKIP_PIXELS = 0x0D04,
		PACK_SKIP_ROWS = 0x0D03,
		PACK_SKIP_VOLUMES_SGIS = 0x8130,
		PACK_SUBSAMPLE_RATE_SGIX = 0x85A0,
		PACK_SWAP_BYTES = 0x0D00,
		PALETTE4_R5_G6_B5_OES = 0x8B92,
		PALETTE4_RGB5_A1_OES = 0x8B94,
		PALETTE4_RGB8_OES = 0x8B90,
		PALETTE4_RGBA4_OES = 0x8B93,
		PALETTE4_RGBA8_OES = 0x8B91,
		PALETTE8_R5_G6_B5_OES = 0x8B97,
		PALETTE8_RGB5_A1_OES = 0x8B99,
		PALETTE8_RGB8_OES = 0x8B95,
		PALETTE8_RGBA4_OES = 0x8B98,
		PALETTE8_RGBA8_OES = 0x8B96,
		PARALLEL_ARRAYS_INTEL = 0x83F4,
		PASS_THROUGH_NV = 0x86E6,
		PASS_THROUGH_TOKEN = 0x0700,
		PERCENTAGE_AMD = 0x8BC3,
		PERFMON_GLOBAL_MODE_QCOM = 0x8FA0,
		PERFMON_RESULT_AMD = 0x8BC6,
		PERFMON_RESULT_AVAILABLE_AMD = 0x8BC4,
		PERFMON_RESULT_SIZE_AMD = 0x8BC5,
		PERSPECTIVE_CORRECTION_HINT = 0x0C50,
		PERTURB_EXT = 0x85AE,
		PER_STAGE_CONSTANTS_NV = 0x8535,
		PIXEL_COUNTER_BITS_NV = 0x8864,
		PIXEL_COUNT_AVAILABLE_NV = 0x8867,
		PIXEL_COUNT_NV = 0x8866,
		PIXEL_CUBIC_WEIGHT_EXT = 0x8333,
		PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS = 0x8355,
		PIXEL_FRAGMENT_RGB_SOURCE_SGIS = 0x8354,
		PIXEL_GROUP_COLOR_SGIS = 0x8356,
		PIXEL_MAG_FILTER_EXT = 0x8331,
		PIXEL_MAP_A_TO_A = 0x0C79,
		PIXEL_MAP_A_TO_A_SIZE = 0x0CB9,
		PIXEL_MAP_B_TO_B = 0x0C78,
		PIXEL_MAP_B_TO_B_SIZE = 0x0CB8,
		PIXEL_MAP_G_TO_G = 0x0C77,
		PIXEL_MAP_G_TO_G_SIZE = 0x0CB7,
		PIXEL_MAP_I_TO_A = 0x0C75,
		PIXEL_MAP_I_TO_A_SIZE = 0x0CB5,
		PIXEL_MAP_I_TO_B = 0x0C74,
		PIXEL_MAP_I_TO_B_SIZE = 0x0CB4,
		PIXEL_MAP_I_TO_G = 0x0C73,
		PIXEL_MAP_I_TO_G_SIZE = 0x0CB3,
		PIXEL_MAP_I_TO_I = 0x0C70,
		PIXEL_MAP_I_TO_I_SIZE = 0x0CB0,
		PIXEL_MAP_I_TO_R = 0x0C72,
		PIXEL_MAP_I_TO_R_SIZE = 0x0CB2,
		PIXEL_MAP_R_TO_R = 0x0C76,
		PIXEL_MAP_R_TO_R_SIZE = 0x0CB6,
		PIXEL_MAP_S_TO_S = 0x0C71,
		PIXEL_MAP_S_TO_S_SIZE = 0x0CB1,
		PIXEL_MIN_FILTER_EXT = 0x8332,
		PIXEL_MODE_BIT = 0x00000020,
		PIXEL_PACK_BUFFER = 0x88EB,
		PIXEL_PACK_BUFFER_ARB = 0x88EB,
		PIXEL_PACK_BUFFER_BINDING = 0x88ED,
		PIXEL_PACK_BUFFER_BINDING_ARB = 0x88ED,
		PIXEL_PACK_BUFFER_BINDING_EXT = 0x88ED,
		PIXEL_PACK_BUFFER_EXT = 0x88EB,
		PIXEL_SUBSAMPLE_2424_SGIX = 0x85A3,
		PIXEL_SUBSAMPLE_4242_SGIX = 0x85A4,
		PIXEL_SUBSAMPLE_4444_SGIX = 0x85A2,
		PIXEL_TEXTURE_SGIS = 0x8353,
		PIXEL_TEX_GEN_ALPHA_LS_SGIX = 0x8189,
		PIXEL_TEX_GEN_ALPHA_MS_SGIX = 0x818A,
		PIXEL_TEX_GEN_ALPHA_NO_REPLACE_SGIX = 0x8188,
		PIXEL_TEX_GEN_ALPHA_REPLACE_SGIX = 0x8187,
		PIXEL_TEX_GEN_MODE_SGIX = 0x832B,
		PIXEL_TEX_GEN_Q_CEILING_SGIX = 0x8184,
		PIXEL_TEX_GEN_Q_FLOOR_SGIX = 0x8186,
		PIXEL_TEX_GEN_Q_ROUND_SGIX = 0x8185,
		PIXEL_TEX_GEN_SGIX = 0x8139,
		PIXEL_TILE_BEST_ALIGNMENT_SGIX = 0x813E,
		PIXEL_TILE_CACHE_INCREMENT_SGIX = 0x813F,
		PIXEL_TILE_CACHE_SIZE_SGIX = 0x8145,
		PIXEL_TILE_GRID_DEPTH_SGIX = 0x8144,
		PIXEL_TILE_GRID_HEIGHT_SGIX = 0x8143,
		PIXEL_TILE_GRID_WIDTH_SGIX = 0x8142,
		PIXEL_TILE_HEIGHT_SGIX = 0x8141,
		PIXEL_TILE_WIDTH_SGIX = 0x8140,
		PIXEL_TRANSFORM_2D_EXT = 0x8330,
		PIXEL_TRANSFORM_2D_MATRIX_EXT = 0x8338,
		PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 0x8336,
		PIXEL_UNPACK_BUFFER = 0x88EC,
		PIXEL_UNPACK_BUFFER_ARB = 0x88EC,
		PIXEL_UNPACK_BUFFER_BINDING = 0x88EF,
		PIXEL_UNPACK_BUFFER_BINDING_ARB = 0x88EF,
		PIXEL_UNPACK_BUFFER_BINDING_EXT = 0x88EF,
		PIXEL_UNPACK_BUFFER_EXT = 0x88EC,
		PN_TRIANGLES_ATI = 0x87F0,
		PN_TRIANGLES_NORMAL_MODE_ATI = 0x87F3,
		PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI = 0x87F7,
		PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI = 0x87F8,
		PN_TRIANGLES_POINT_MODE_ATI = 0x87F2,
		PN_TRIANGLES_POINT_MODE_CUBIC_ATI = 0x87F6,
		PN_TRIANGLES_POINT_MODE_LINEAR_ATI = 0x87F5,
		PN_TRIANGLES_TESSELATION_LEVEL_ATI = 0x87F4,
		POINT = 0x1B00,
		POINTS = 0x0000,
		POINT_BIT = 0x00000002,
		POINT_DISTANCE_ATTENUATION = 0x8129,
		POINT_DISTANCE_ATTENUATION_ARB = 0x8129,
		POINT_FADE_THRESHOLD_SIZE = 0x8128,
		POINT_FADE_THRESHOLD_SIZE_ARB = 0x8128,
		POINT_FADE_THRESHOLD_SIZE_EXT = 0x8128,
		POINT_FADE_THRESHOLD_SIZE_SGIS = 0x8128,
		POINT_SIZE = 0x0B11,
		POINT_SIZE_ARRAY_BUFFER_BINDING_OES = 0x8B9F,
		POINT_SIZE_ARRAY_OES = 0x8B9C,
		POINT_SIZE_ARRAY_POINTER_OES = 0x898C,
		POINT_SIZE_ARRAY_STRIDE_OES = 0x898B,
		POINT_SIZE_ARRAY_TYPE_OES = 0x898A,
		POINT_SIZE_GRANULARITY = 0x0B13,
		POINT_SIZE_MAX = 0x8127,
		POINT_SIZE_MAX_ARB = 0x8127,
		POINT_SIZE_MAX_EXT = 0x8127,
		POINT_SIZE_MAX_SGIS = 0x8127,
		POINT_SIZE_MIN = 0x8126,
		POINT_SIZE_MIN_ARB = 0x8126,
		POINT_SIZE_MIN_EXT = 0x8126,
		POINT_SIZE_MIN_SGIS = 0x8126,
		POINT_SIZE_RANGE = 0x0B12,
		POINT_SMOOTH = 0x0B10,
		POINT_SMOOTH_HINT = 0x0C51,
		POINT_SPRITE = 0x8861,
		POINT_SPRITE_ARB = 0x8861,
		POINT_SPRITE_COORD_ORIGIN = 0x8CA0,
		POINT_SPRITE_NV = 0x8861,
		POINT_SPRITE_R_MODE_NV = 0x8863,
		POINT_TOKEN = 0x0701,
		POLYGON = 0x0009,
		POLYGON_BIT = 0x00000008,
		POLYGON_MODE = 0x0B40,
		POLYGON_OFFSET_BIAS_EXT = 0x8039,
		POLYGON_OFFSET_EXT = 0x8037,
		POLYGON_OFFSET_FACTOR = 0x8038,
		POLYGON_OFFSET_FACTOR_EXT = 0x8038,
		POLYGON_OFFSET_FILL = 0x8037,
		POLYGON_OFFSET_LINE = 0x2A02,
		POLYGON_OFFSET_POINT = 0x2A01,
		POLYGON_OFFSET_UNITS = 0x2A00,
		POLYGON_SMOOTH = 0x0B41,
		POLYGON_SMOOTH_HINT = 0x0C53,
		POLYGON_STIPPLE = 0x0B42,
		POLYGON_STIPPLE_BIT = 0x00000010,
		POLYGON_TOKEN = 0x0703,
		POSITION = 0x1203,
		POST_COLOR_MATRIX_ALPHA_BIAS = 0x80BB,
		POST_COLOR_MATRIX_ALPHA_BIAS_SGI = 0x80BB,
		POST_COLOR_MATRIX_ALPHA_SCALE = 0x80B7,
		POST_COLOR_MATRIX_ALPHA_SCALE_SGI = 0x80B7,
		POST_COLOR_MATRIX_BLUE_BIAS = 0x80BA,
		POST_COLOR_MATRIX_BLUE_BIAS_SGI = 0x80BA,
		POST_COLOR_MATRIX_BLUE_SCALE = 0x80B6,
		POST_COLOR_MATRIX_BLUE_SCALE_SGI = 0x80B6,
		POST_COLOR_MATRIX_COLOR_TABLE = 0x80D2,
		POST_COLOR_MATRIX_COLOR_TABLE_SGI = 0x80D2,
		POST_COLOR_MATRIX_GREEN_BIAS = 0x80B9,
		POST_COLOR_MATRIX_GREEN_BIAS_SGI = 0x80B9,
		POST_COLOR_MATRIX_GREEN_SCALE = 0x80B5,
		POST_COLOR_MATRIX_GREEN_SCALE_SGI = 0x80B5,
		POST_COLOR_MATRIX_RED_BIAS = 0x80B8,
		POST_COLOR_MATRIX_RED_BIAS_SGI = 0x80B8,
		POST_COLOR_MATRIX_RED_SCALE = 0x80B4,
		POST_COLOR_MATRIX_RED_SCALE_SGI = 0x80B4,
		POST_CONVOLUTION_ALPHA_BIAS = 0x8023,
		POST_CONVOLUTION_ALPHA_BIAS_EXT = 0x8023,
		POST_CONVOLUTION_ALPHA_SCALE = 0x801F,
		POST_CONVOLUTION_ALPHA_SCALE_EXT = 0x801F,
		POST_CONVOLUTION_BLUE_BIAS = 0x8022,
		POST_CONVOLUTION_BLUE_BIAS_EXT = 0x8022,
		POST_CONVOLUTION_BLUE_SCALE = 0x801E,
		POST_CONVOLUTION_BLUE_SCALE_EXT = 0x801E,
		POST_CONVOLUTION_COLOR_TABLE = 0x80D1,
		POST_CONVOLUTION_COLOR_TABLE_SGI = 0x80D1,
		POST_CONVOLUTION_GREEN_BIAS = 0x8021,
		POST_CONVOLUTION_GREEN_BIAS_EXT = 0x8021,
		POST_CONVOLUTION_GREEN_SCALE = 0x801D,
		POST_CONVOLUTION_GREEN_SCALE_EXT = 0x801D,
		POST_CONVOLUTION_RED_BIAS = 0x8020,
		POST_CONVOLUTION_RED_BIAS_EXT = 0x8020,
		POST_CONVOLUTION_RED_SCALE = 0x801C,
		POST_CONVOLUTION_RED_SCALE_EXT = 0x801C,
		POST_TEXTURE_FILTER_BIAS_RANGE_SGIX = 0x817B,
		POST_TEXTURE_FILTER_BIAS_SGIX = 0x8179,
		POST_TEXTURE_FILTER_SCALE_RANGE_SGIX = 0x817C,
		POST_TEXTURE_FILTER_SCALE_SGIX = 0x817A,
		PRESENT_DURATION_NV = 0x8E2B,
		PRESENT_TIME_NV = 0x8E2A,
		PRESERVE_ATI = 0x8762,
		PREVIOUS = 0x8578,
		PREVIOUS_EXT = 0x8578,
		PREVIOUS_TEXTURE_INPUT_NV = 0x86E4,
		PRIMARY_COLOR = 0x8577,
		PRIMARY_COLOR_EXT = 0x8577,
		PRIMARY_COLOR_NV = 0x852C,
		PRIMITIVES_GENERATED = 0x8C87,
		PRIMITIVES_GENERATED_EXT = 0x8C87,
		PRIMITIVES_GENERATED_NV = 0x8C87,
		PRIMITIVE_ID_NV = 0x8C7C,
		PRIMITIVE_RESTART = 0x8F9D,
		PRIMITIVE_RESTART_INDEX = 0x8F9E,
		PRIMITIVE_RESTART_INDEX_NV = 0x8559,
		PRIMITIVE_RESTART_NV = 0x8558,
		PROGRAM_ADDRESS_REGISTERS_ARB = 0x88B0,
		PROGRAM_ALU_INSTRUCTIONS_ARB = 0x8805,
		PROGRAM_ATTRIBS_ARB = 0x88AC,
		PROGRAM_ATTRIB_COMPONENTS_NV = 0x8906,
		PROGRAM_BINARY_FORMATS_OES = 0x87FF,
		PROGRAM_BINARY_LENGTH_OES = 0x8741,
		PROGRAM_BINDING_ARB = 0x8677,
		PROGRAM_ERROR_POSITION_ARB = 0x864B,
		PROGRAM_ERROR_POSITION_NV = 0x864B,
		PROGRAM_ERROR_STRING_ARB = 0x8874,
		PROGRAM_ERROR_STRING_NV = 0x8874,
		PROGRAM_FORMAT_ARB = 0x8876,
		PROGRAM_FORMAT_ASCII_ARB = 0x8875,
		PROGRAM_INSTRUCTIONS_ARB = 0x88A0,
		PROGRAM_LENGTH_ARB = 0x8627,
		PROGRAM_LENGTH_NV = 0x8627,
		PROGRAM_MATRIX_EXT = 0x8E2D,
		PROGRAM_MATRIX_STACK_DEPTH_EXT = 0x8E2F,
		PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 0x88B2,
		PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 0x8808,
		PROGRAM_NATIVE_ATTRIBS_ARB = 0x88AE,
		PROGRAM_NATIVE_INSTRUCTIONS_ARB = 0x88A2,
		PROGRAM_NATIVE_PARAMETERS_ARB = 0x88AA,
		PROGRAM_NATIVE_TEMPORARIES_ARB = 0x88A6,
		PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 0x880A,
		PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 0x8809,
		PROGRAM_OBJECT_ARB = 0x8B40,
		PROGRAM_PARAMETERS_ARB = 0x88A8,
		PROGRAM_PARAMETER_NV = 0x8644,
		PROGRAM_POINT_SIZE = 0x8642,
		PROGRAM_POINT_SIZE_ARB = 0x8642,
		PROGRAM_POINT_SIZE_EXT = 0x8642,
		PROGRAM_RESIDENT_NV = 0x8647,
		PROGRAM_RESULT_COMPONENTS_NV = 0x8907,
		PROGRAM_STRING_ARB = 0x8628,
		PROGRAM_STRING_NV = 0x8628,
		PROGRAM_TARGET_NV = 0x8646,
		PROGRAM_TEMPORARIES_ARB = 0x88A4,
		PROGRAM_TEX_INDIRECTIONS_ARB = 0x8807,
		PROGRAM_TEX_INSTRUCTIONS_ARB = 0x8806,
		PROGRAM_UNDER_NATIVE_LIMITS_ARB = 0x88B6,
		PROJECTION = 0x1701,
		PROJECTION_MATRIX = 0x0BA7,
		PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES = 0x898E,
		PROJECTION_STACK_DEPTH = 0x0BA4,
		PROVOKING_VERTEX = 0x8E4F,
		PROVOKING_VERTEX_EXT = 0x8E4F,
		PROXY_COLOR_TABLE = 0x80D3,
		PROXY_COLOR_TABLE_SGI = 0x80D3,
		PROXY_HISTOGRAM = 0x8025,
		PROXY_HISTOGRAM_EXT = 0x8025,
		PROXY_POST_COLOR_MATRIX_COLOR_TABLE = 0x80D5,
		PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI = 0x80D5,
		PROXY_POST_CONVOLUTION_COLOR_TABLE = 0x80D4,
		PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI = 0x80D4,
		PROXY_TEXTURE_1D = 0x8063,
		PROXY_TEXTURE_1D_ARRAY = 0x8C19,
		PROXY_TEXTURE_1D_ARRAY_EXT = 0x8C19,
		PROXY_TEXTURE_1D_EXT = 0x8063,
		PROXY_TEXTURE_1D_STACK_MESAX = 0x875B,
		PROXY_TEXTURE_2D = 0x8064,
		PROXY_TEXTURE_2D_ARRAY = 0x8C1B,
		PROXY_TEXTURE_2D_ARRAY_EXT = 0x8C1B,
		PROXY_TEXTURE_2D_EXT = 0x8064,
		PROXY_TEXTURE_2D_MULTISAMPLE = 0x9101,
		PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9103,
		PROXY_TEXTURE_2D_STACK_MESAX = 0x875C,
		PROXY_TEXTURE_3D = 0x8070,
		PROXY_TEXTURE_3D_EXT = 0x8070,
		PROXY_TEXTURE_4D_SGIS = 0x8135,
		PROXY_TEXTURE_COLOR_TABLE_SGI = 0x80BD,
		PROXY_TEXTURE_CUBE_MAP = 0x851B,
		PROXY_TEXTURE_CUBE_MAP_ARB = 0x851B,
		PROXY_TEXTURE_CUBE_MAP_ARRAY = 0x900B,
		PROXY_TEXTURE_CUBE_MAP_EXT = 0x851B,
		PROXY_TEXTURE_RECTANGLE = 0x84F7,
		PROXY_TEXTURE_RECTANGLE_ARB = 0x84F7,
		PROXY_TEXTURE_RECTANGLE_NV = 0x84F7,
		PURGEABLE_APPLE = 0x8A1D,
		Q = 0x2003,
		QUADRATIC_ATTENUATION = 0x1209,
		QUADS = 0x0007,
		QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = 0x8E4C,
		QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT = 0x8E4C,
		QUAD_ALPHA4_SGIS = 0x811E,
		QUAD_ALPHA8_SGIS = 0x811F,
		QUAD_INTENSITY4_SGIS = 0x8122,
		QUAD_INTENSITY8_SGIS = 0x8123,
		QUAD_LUMINANCE4_SGIS = 0x8120,
		QUAD_LUMINANCE8_SGIS = 0x8121,
		QUAD_MESH_SUN = 0x8614,
		QUAD_STRIP = 0x0008,
		QUAD_TEXTURE_SELECT_SGIS = 0x8125,
		QUARTER_BIT_ATI = 0x00000010,
		QUERY_BY_REGION_NO_WAIT = 0x8E16,
		QUERY_BY_REGION_NO_WAIT_NV = 0x8E16,
		QUERY_BY_REGION_WAIT = 0x8E15,
		QUERY_BY_REGION_WAIT_NV = 0x8E15,
		QUERY_COUNTER_BITS = 0x8864,
		QUERY_COUNTER_BITS_ARB = 0x8864,
		QUERY_NO_WAIT = 0x8E14,
		QUERY_NO_WAIT_NV = 0x8E14,
		QUERY_RESULT = 0x8866,
		QUERY_RESULT_ARB = 0x8866,
		QUERY_RESULT_AVAILABLE = 0x8867,
		QUERY_RESULT_AVAILABLE_ARB = 0x8867,
		QUERY_WAIT = 0x8E13,
		QUERY_WAIT_NV = 0x8E13,
		R = 0x2002,
		R11F_G11F_B10F = 0x8C3A,
		R11F_G11F_B10F_EXT = 0x8C3A,
		R16 = 0x822A,
		R16F = 0x822D,
		R16I = 0x8233,
		R16UI = 0x8234,
		R16_SNORM = 0x8F98,
		R32F = 0x822E,
		R32I = 0x8235,
		R32UI = 0x8236,
		R3_G3_B2 = 0x2A10,
		R8 = 0x8229,
		R8I = 0x8231,
		R8UI = 0x8232,
		R8_SNORM = 0x8F94,
		RASTERIZER_DISCARD = 0x8C89,
		RASTERIZER_DISCARD_EXT = 0x8C89,
		RASTERIZER_DISCARD_NV = 0x8C89,
		READ_BUFFER = 0x0C02,
		READ_FRAMEBUFFER = 0x8CA8,
		READ_FRAMEBUFFER_BINDING = 0x8CAA,
		READ_FRAMEBUFFER_BINDING_EXT = 0x8CAA,
		READ_FRAMEBUFFER_EXT = 0x8CA8,
		READ_ONLY = 0x88B8,
		READ_ONLY_ARB = 0x88B8,
		READ_PIXEL_DATA_RANGE_LENGTH_NV = 0x887B,
		READ_PIXEL_DATA_RANGE_NV = 0x8879,
		READ_PIXEL_DATA_RANGE_POINTER_NV = 0x887D,
		READ_WRITE = 0x88BA,
		READ_WRITE_ARB = 0x88BA,
		RECIP_ADD_SIGNED_ALPHA_IMG = 0x8C05,
		RED = 0x1903,
		REDUCE = 0x8016,
		REDUCE_EXT = 0x8016,
		RED_BIAS = 0x0D15,
		RED_BITS = 0x0D52,
		RED_BIT_ATI = 0x00000001,
		RED_INTEGER = 0x8D94,
		RED_INTEGER_EXT = 0x8D94,
		RED_MAX_CLAMP_INGR = 0x8564,
		RED_MIN_CLAMP_INGR = 0x8560,
		RED_SCALE = 0x0D14,
		RED_SNORM = 0x8F90,
		REFERENCE_PLANE_EQUATION_SGIX = 0x817E,
		REFERENCE_PLANE_SGIX = 0x817D,
		REFLECTION_MAP = 0x8512,
		REFLECTION_MAP_ARB = 0x8512,
		REFLECTION_MAP_EXT = 0x8512,
		REFLECTION_MAP_OES = 0x8512,
		REGISTER_COMBINERS_NV = 0x8522,
		REG_0_ATI = 0x8921,
		REG_10_ATI = 0x892B,
		REG_11_ATI = 0x892C,
		REG_12_ATI = 0x892D,
		REG_13_ATI = 0x892E,
		REG_14_ATI = 0x892F,
		REG_15_ATI = 0x8930,
		REG_16_ATI = 0x8931,
		REG_17_ATI = 0x8932,
		REG_18_ATI = 0x8933,
		REG_19_ATI = 0x8934,
		REG_1_ATI = 0x8922,
		REG_20_ATI = 0x8935,
		REG_21_ATI = 0x8936,
		REG_22_ATI = 0x8937,
		REG_23_ATI = 0x8938,
		REG_24_ATI = 0x8939,
		REG_25_ATI = 0x893A,
		REG_26_ATI = 0x893B,
		REG_27_ATI = 0x893C,
		REG_28_ATI = 0x893D,
		REG_29_ATI = 0x893E,
		REG_2_ATI = 0x8923,
		REG_30_ATI = 0x893F,
		REG_31_ATI = 0x8940,
		REG_3_ATI = 0x8924,
		REG_4_ATI = 0x8925,
		REG_5_ATI = 0x8926,
		REG_6_ATI = 0x8927,
		REG_7_ATI = 0x8928,
		REG_8_ATI = 0x8929,
		REG_9_ATI = 0x892A,
		RELEASED_APPLE = 0x8A19,
		RENDER = 0x1C00,
		RENDERBUFFER = 0x8D41,
		RENDERBUFFER_ALPHA_SIZE = 0x8D53,
		RENDERBUFFER_ALPHA_SIZE_EXT = 0x8D53,
		RENDERBUFFER_ALPHA_SIZE_OES = 0x8D53,
		RENDERBUFFER_BINDING = 0x8CA7,
		RENDERBUFFER_BINDING_EXT = 0x8CA7,
		RENDERBUFFER_BINDING_OES = 0x8CA7,
		RENDERBUFFER_BLUE_SIZE = 0x8D52,
		RENDERBUFFER_BLUE_SIZE_EXT = 0x8D52,
		RENDERBUFFER_BLUE_SIZE_OES = 0x8D52,
		RENDERBUFFER_COLOR_SAMPLES_NV = 0x8E10,
		RENDERBUFFER_COVERAGE_SAMPLES_NV = 0x8CAB,
		RENDERBUFFER_DEPTH_SIZE = 0x8D54,
		RENDERBUFFER_DEPTH_SIZE_EXT = 0x8D54,
		RENDERBUFFER_DEPTH_SIZE_OES = 0x8D54,
		RENDERBUFFER_EXT = 0x8D41,
		RENDERBUFFER_FREE_MEMORY_ATI = 0x87FD,
		RENDERBUFFER_GREEN_SIZE = 0x8D51,
		RENDERBUFFER_GREEN_SIZE_EXT = 0x8D51,
		RENDERBUFFER_GREEN_SIZE_OES = 0x8D51,
		RENDERBUFFER_HEIGHT = 0x8D43,
		RENDERBUFFER_HEIGHT_EXT = 0x8D43,
		RENDERBUFFER_HEIGHT_OES = 0x8D43,
		RENDERBUFFER_INTERNAL_FORMAT = 0x8D44,
		RENDERBUFFER_INTERNAL_FORMAT_EXT = 0x8D44,
		RENDERBUFFER_INTERNAL_FORMAT_OES = 0x8D44,
		RENDERBUFFER_OES = 0x8D41,
		RENDERBUFFER_RED_SIZE = 0x8D50,
		RENDERBUFFER_RED_SIZE_EXT = 0x8D50,
		RENDERBUFFER_RED_SIZE_OES = 0x8D50,
		RENDERBUFFER_SAMPLES = 0x8CAB,
		RENDERBUFFER_SAMPLES_EXT = 0x8CAB,
		RENDERBUFFER_STENCIL_SIZE = 0x8D55,
		RENDERBUFFER_STENCIL_SIZE_EXT = 0x8D55,
		RENDERBUFFER_STENCIL_SIZE_OES = 0x8D55,
		RENDERBUFFER_WIDTH = 0x8D42,
		RENDERBUFFER_WIDTH_EXT = 0x8D42,
		RENDERBUFFER_WIDTH_OES = 0x8D42,
		RENDERER = 0x1F01,
		RENDER_MODE = 0x0C40,
		REPEAT = 0x2901,
		REPLACE = 0x1E01,
		REPLACE_EXT = 0x8062,
		REPLICATE_BORDER = 0x8153,
		REPLICATE_BORDER_HP = 0x8153,
		REQUIRED_TEXTURE_IMAGE_UNITS_OES = 0x8D68,
		RESAMPLE_AVERAGE_OML = 0x8988,
		RESAMPLE_DECIMATE_OML = 0x8989,
		RESAMPLE_DECIMATE_SGIX = 0x8430,
		RESAMPLE_REPLICATE_OML = 0x8986,
		RESAMPLE_REPLICATE_SGIX = 0x842E,
		RESAMPLE_ZERO_FILL_OML = 0x8987,
		RESAMPLE_ZERO_FILL_SGIX = 0x842F,
		RESCALE_NORMAL = 0x803A,
		RESCALE_NORMAL_EXT = 0x803A,
		RETAINED_APPLE = 0x8A1B,
		RETURN = 0x0102,
		RG = 0x8227,
		RG16 = 0x822C,
		RG16F = 0x822F,
		RG16I = 0x8239,
		RG16UI = 0x823A,
		RG16_SNORM = 0x8F99,
		RG32F = 0x8230,
		RG32I = 0x823B,
		RG32UI = 0x823C,
		RG8 = 0x822B,
		RG8I = 0x8237,
		RG8UI = 0x8238,
		RG8_SNORM = 0x8F95,
		RGB = 0x1907,
		RGB10 = 0x8052,
		RGB10_A2 = 0x8059,
		RGB10_A2_EXT = 0x8059,
		RGB10_EXT = 0x8052,
		RGB12 = 0x8053,
		RGB12_EXT = 0x8053,
		RGB16 = 0x8054,
		RGB16F = 0x881B,
		RGB16F_ARB = 0x881B,
		RGB16I = 0x8D89,
		RGB16I_EXT = 0x8D89,
		RGB16UI = 0x8D77,
		RGB16UI_EXT = 0x8D77,
		RGB16_EXT = 0x8054,
		RGB16_SNORM = 0x8F9A,
		RGB2_EXT = 0x804E,
		RGB32F = 0x8815,
		RGB32F_ARB = 0x8815,
		RGB32I = 0x8D83,
		RGB32I_EXT = 0x8D83,
		RGB32UI = 0x8D71,
		RGB32UI_EXT = 0x8D71,
		RGB4 = 0x804F,
		RGB4_EXT = 0x804F,
		RGB4_S3TC = 0x83A1,
		RGB5 = 0x8050,
		RGB565_OES = 0x8D62,
		RGB5_A1 = 0x8057,
		RGB5_A1_EXT = 0x8057,
		RGB5_A1_OES = 0x8057,
		RGB5_EXT = 0x8050,
		RGB8 = 0x8051,
		RGB8I = 0x8D8F,
		RGB8I_EXT = 0x8D8F,
		RGB8UI = 0x8D7D,
		RGB8UI_EXT = 0x8D7D,
		RGB8_EXT = 0x8051,
		RGB8_SNORM = 0x8F96,
		RGB9_E5 = 0x8C3D,
		RGB9_E5_EXT = 0x8C3D,
		RGBA = 0x1908,
		RGBA12 = 0x805A,
		RGBA12_EXT = 0x805A,
		RGBA16 = 0x805B,
		RGBA16F = 0x881A,
		RGBA16F_ARB = 0x881A,
		RGBA16I = 0x8D88,
		RGBA16I_EXT = 0x8D88,
		RGBA16UI = 0x8D76,
		RGBA16UI_EXT = 0x8D76,
		RGBA16_EXT = 0x805B,
		RGBA16_SNORM = 0x8F9B,
		RGBA2 = 0x8055,
		RGBA2_EXT = 0x8055,
		RGBA32F = 0x8814,
		RGBA32F_ARB = 0x8814,
		RGBA32I = 0x8D82,
		RGBA32I_EXT = 0x8D82,
		RGBA32UI = 0x8D70,
		RGBA32UI_EXT = 0x8D70,
		RGBA4 = 0x8056,
		RGBA4_EXT = 0x8056,
		RGBA4_OES = 0x8056,
		RGBA4_S3TC = 0x83A3,
		RGBA8 = 0x8058,
		RGBA8I = 0x8D8E,
		RGBA8I_EXT = 0x8D8E,
		RGBA8UI = 0x8D7C,
		RGBA8UI_EXT = 0x8D7C,
		RGBA8_EXT = 0x8058,
		RGBA8_SNORM = 0x8F97,
		RGBA_FLOAT16_APPLE = 0x881A,
		RGBA_FLOAT16_ATI = 0x881A,
		RGBA_FLOAT32_APPLE = 0x8814,
		RGBA_FLOAT32_ATI = 0x8814,
		RGBA_FLOAT_MODE_ARB = 0x8820,
		RGBA_INTEGER = 0x8D99,
		RGBA_INTEGER_EXT = 0x8D99,
		RGBA_INTEGER_MODE_EXT = 0x8D9E,
		RGBA_MODE = 0x0C31,
		RGBA_S3TC = 0x83A2,
		RGBA_SIGNED_COMPONENTS_EXT = 0x8C3C,
		RGBA_SNORM = 0x8F93,
		RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV = 0x86D9,
		RGB_422_APPLE = 0x8A1F,
		RGB_FLOAT16_APPLE = 0x881B,
		RGB_FLOAT16_ATI = 0x881B,
		RGB_FLOAT32_APPLE = 0x8815,
		RGB_FLOAT32_ATI = 0x8815,
		RGB_INTEGER = 0x8D98,
		RGB_INTEGER_EXT = 0x8D98,
		RGB_S3TC = 0x83A0,
		RGB_SCALE = 0x8573,
		RGB_SCALE_EXT = 0x8573,
		RGB_SNORM = 0x8F92,
		RG_INTEGER = 0x8228,
		RG_SNORM = 0x8F91,
		RIGHT = 0x0407,
		S = 0x2000,
		SAMPLER_1D = 0x8B5D,
		SAMPLER_1D_ARB = 0x8B5D,
		SAMPLER_1D_ARRAY = 0x8DC0,
		SAMPLER_1D_ARRAY_EXT = 0x8DC0,
		SAMPLER_1D_ARRAY_SHADOW = 0x8DC3,
		SAMPLER_1D_ARRAY_SHADOW_EXT = 0x8DC3,
		SAMPLER_1D_SHADOW = 0x8B61,
		SAMPLER_1D_SHADOW_ARB = 0x8B61,
		SAMPLER_2D = 0x8B5E,
		SAMPLER_2D_ARB = 0x8B5E,
		SAMPLER_2D_ARRAY = 0x8DC1,
		SAMPLER_2D_ARRAY_EXT = 0x8DC1,
		SAMPLER_2D_ARRAY_SHADOW = 0x8DC4,
		SAMPLER_2D_ARRAY_SHADOW_EXT = 0x8DC4,
		SAMPLER_2D_MULTISAMPLE = 0x9108,
		SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910B,
		SAMPLER_2D_RECT = 0x8B63,
		SAMPLER_2D_RECT_ARB = 0x8B63,
		SAMPLER_2D_RECT_SHADOW = 0x8B64,
		SAMPLER_2D_RECT_SHADOW_ARB = 0x8B64,
		SAMPLER_2D_SHADOW = 0x8B62,
		SAMPLER_2D_SHADOW_ARB = 0x8B62,
		SAMPLER_3D = 0x8B5F,
		SAMPLER_3D_ARB = 0x8B5F,
		SAMPLER_3D_OES = 0x8B5F,
		SAMPLER_BUFFER = 0x8DC2,
		SAMPLER_BUFFER_AMD = 0x9001,
		SAMPLER_BUFFER_EXT = 0x8DC2,
		SAMPLER_CUBE = 0x8B60,
		SAMPLER_CUBE_ARB = 0x8B60,
		SAMPLER_CUBE_MAP_ARRAY = 0x900C,
		SAMPLER_CUBE_MAP_ARRAY_SHADOW = 0x900D,
		SAMPLER_CUBE_SHADOW = 0x8DC5,
		SAMPLER_CUBE_SHADOW_EXT = 0x8DC5,
		SAMPLER_EXTERNAL_OES = 0x8D66,
		SAMPLER_RENDERBUFFER_NV = 0x8E56,
		SAMPLES = 0x80A9,
		SAMPLES_3DFX = 0x86B4,
		SAMPLES_ARB = 0x80A9,
		SAMPLES_EXT = 0x80A9,
		SAMPLES_PASSED = 0x8914,
		SAMPLES_PASSED_ARB = 0x8914,
		SAMPLES_SGIS = 0x80A9,
		SAMPLE_ALPHA_TO_COVERAGE = 0x809E,
		SAMPLE_ALPHA_TO_COVERAGE_ARB = 0x809E,
		SAMPLE_ALPHA_TO_MASK_EXT = 0x809E,
		SAMPLE_ALPHA_TO_MASK_SGIS = 0x809E,
		SAMPLE_ALPHA_TO_ONE = 0x809F,
		SAMPLE_ALPHA_TO_ONE_ARB = 0x809F,
		SAMPLE_ALPHA_TO_ONE_EXT = 0x809F,
		SAMPLE_ALPHA_TO_ONE_SGIS = 0x809F,
		SAMPLE_BUFFERS = 0x80A8,
		SAMPLE_BUFFERS_3DFX = 0x86B3,
		SAMPLE_BUFFERS_ARB = 0x80A8,
		SAMPLE_BUFFERS_EXT = 0x80A8,
		SAMPLE_BUFFERS_SGIS = 0x80A8,
		SAMPLE_COVERAGE = 0x80A0,
		SAMPLE_COVERAGE_ARB = 0x80A0,
		SAMPLE_COVERAGE_INVERT = 0x80AB,
		SAMPLE_COVERAGE_INVERT_ARB = 0x80AB,
		SAMPLE_COVERAGE_VALUE = 0x80AA,
		SAMPLE_COVERAGE_VALUE_ARB = 0x80AA,
		SAMPLE_MASK = 0x8E51,
		SAMPLE_MASK_EXT = 0x80A0,
		SAMPLE_MASK_INVERT_EXT = 0x80AB,
		SAMPLE_MASK_INVERT_SGIS = 0x80AB,
		SAMPLE_MASK_NV = 0x8E51,
		SAMPLE_MASK_SGIS = 0x80A0,
		SAMPLE_MASK_VALUE = 0x8E52,
		SAMPLE_MASK_VALUE_EXT = 0x80AA,
		SAMPLE_MASK_VALUE_NV = 0x8E52,
		SAMPLE_MASK_VALUE_SGIS = 0x80AA,
		SAMPLE_PATTERN_EXT = 0x80AC,
		SAMPLE_PATTERN_SGIS = 0x80AC,
		SAMPLE_POSITION = 0x8E50,
		SAMPLE_POSITION_NV = 0x8E50,
		SAMPLE_SHADING_ARB = 0x8C36,
		SATURATE_BIT_ATI = 0x00000040,
		SCALAR_EXT = 0x87BE,
		SCALEBIAS_HINT_SGIX = 0x8322,
		SCALE_BY_FOUR_NV = 0x853F,
		SCALE_BY_ONE_HALF_NV = 0x8540,
		SCALE_BY_TWO_NV = 0x853E,
		SCISSOR_BIT = 0x00080000,
		SCISSOR_BOX = 0x0C10,
		SCISSOR_TEST = 0x0C11,
		SCREEN_COORDINATES_REND = 0x8490,
		SECONDARY_COLOR_ARRAY = 0x845E,
		SECONDARY_COLOR_ARRAY_ADDRESS_NV = 0x8F27,
		SECONDARY_COLOR_ARRAY_BUFFER_BINDING = 0x889C,
		SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB = 0x889C,
		SECONDARY_COLOR_ARRAY_EXT = 0x845E,
		SECONDARY_COLOR_ARRAY_LENGTH_NV = 0x8F31,
		SECONDARY_COLOR_ARRAY_POINTER = 0x845D,
		SECONDARY_COLOR_ARRAY_POINTER_EXT = 0x845D,
		SECONDARY_COLOR_ARRAY_SIZE = 0x845A,
		SECONDARY_COLOR_ARRAY_SIZE_EXT = 0x845A,
		SECONDARY_COLOR_ARRAY_STRIDE = 0x845C,
		SECONDARY_COLOR_ARRAY_STRIDE_EXT = 0x845C,
		SECONDARY_COLOR_ARRAY_TYPE = 0x845B,
		SECONDARY_COLOR_ARRAY_TYPE_EXT = 0x845B,
		SECONDARY_COLOR_NV = 0x852D,
		SECONDARY_INTERPOLATOR_ATI = 0x896D,
		SELECT = 0x1C02,
		SELECTION_BUFFER_POINTER = 0x0DF3,
		SELECTION_BUFFER_SIZE = 0x0DF4,
		SEPARABLE_2D = 0x8012,
		SEPARABLE_2D_EXT = 0x8012,
		SEPARATE_ATTRIBS = 0x8C8D,
		SEPARATE_ATTRIBS_EXT = 0x8C8D,
		SEPARATE_ATTRIBS_NV = 0x8C8D,
		SEPARATE_SPECULAR_COLOR = 0x81FA,
		SEPARATE_SPECULAR_COLOR_EXT = 0x81FA,
		SET = 0x150F,
		SGIS_detail_texture = 1,
		SGIS_fog_function = 1,
		SGIS_generate_mipmap = 1,
		SGIS_multisample = 1,
		SGIS_pixel_texture = 1,
		SGIS_point_line_texgen = 1,
		SGIS_point_parameters = 1,
		SGIS_sharpen_texture = 1,
		SGIS_texture4D = 1,
		SGIS_texture_border_clamp = 1,
		SGIS_texture_edge_clamp = 1,
		SGIS_texture_filter4 = 1,
		SGIS_texture_lod = 1,
		SGIS_texture_select = 1,
		SGIX_async = 1,
		SGIX_async_histogram = 1,
		SGIX_async_pixel = 1,
		SGIX_blend_alpha_minmax = 1,
		SGIX_calligraphic_fragment = 1,
		SGIX_clipmap = 1,
		SGIX_convolution_accuracy = 1,
		SGIX_depth_texture = 1,
		SGIX_flush_raster = 1,
		SGIX_fog_offset = 1,
		SGIX_fragment_lighting = 1,
		SGIX_framezoom = 1,
		SGIX_icc_texture = 1,
		SGIX_impact_pixel_texture = 1,
		SGIX_instruments = 1,
		SGIX_interlace = 1,
		SGIX_ir_instrument1 = 1,
		SGIX_list_priority = 1,
		SGIX_pixel_texture = 1,
		SGIX_pixel_tiles = 1,
		SGIX_polynomial_ffd = 1,
		SGIX_reference_plane = 1,
		SGIX_resample = 1,
		SGIX_scalebias_hint = 1,
		SGIX_shadow = 1,
		SGIX_shadow_ambient = 1,
		SGIX_sprite = 1,
		SGIX_subsample = 1,
		SGIX_tag_sample_buffer = 1,
		SGIX_texture_add_env = 1,
		SGIX_texture_coordinate_clamp = 1,
		SGIX_texture_lod_bias = 1,
		SGIX_texture_multi_buffer = 1,
		SGIX_texture_scale_bias = 1,
		SGIX_vertex_preclip = 1,
		SGIX_ycrcb = 1,
		SGI_color_matrix = 1,
		SGI_color_table = 1,
		SGI_texture_color_table = 1,
		SGX_BINARY_IMG = 0x8C0A,
		SGX_PROGRAM_BINARY_IMG = 0x9130,
		SHADER_CONSISTENT_NV = 0x86DD,
		SHADER_OBJECT_ARB = 0x8B48,
		SHADER_OPERATION_NV = 0x86DF,
		SHADER_SOURCE_LENGTH = 0x8B88,
		SHADER_TYPE = 0x8B4F,
		SHADE_MODEL = 0x0B54,
		SHADING_LANGUAGE_VERSION = 0x8B8C,
		SHADING_LANGUAGE_VERSION_ARB = 0x8B8C,
		SHADOW_AMBIENT_SGIX = 0x80BF,
		SHADOW_ATTENUATION_EXT = 0x834E,
		SHARED_TEXTURE_PALETTE_EXT = 0x81FB,
		SHARPEN_TEXTURE_FUNC_POINTS_SGIS = 0x80B0,
		SHININESS = 0x1601,
		SHORT = 0x1402,
		SIGNALED = 0x9119,
		SIGNED_ALPHA8_NV = 0x8706,
		SIGNED_ALPHA_NV = 0x8705,
		SIGNED_HILO16_NV = 0x86FA,
		SIGNED_HILO8_NV = 0x885F,
		SIGNED_HILO_NV = 0x86F9,
		SIGNED_IDENTITY_NV = 0x853C,
		SIGNED_INTENSITY8_NV = 0x8708,
		SIGNED_INTENSITY_NV = 0x8707,
		SIGNED_LUMINANCE8_ALPHA8_NV = 0x8704,
		SIGNED_LUMINANCE8_NV = 0x8702,
		SIGNED_LUMINANCE_ALPHA_NV = 0x8703,
		SIGNED_LUMINANCE_NV = 0x8701,
		SIGNED_NORMALIZED = 0x8F9C,
		SIGNED_RGB8_NV = 0x86FF,
		SIGNED_RGB8_UNSIGNED_ALPHA8_NV = 0x870D,
		SIGNED_RGBA8_NV = 0x86FC,
		SIGNED_RGBA_NV = 0x86FB,
		SIGNED_RGB_NV = 0x86FE,
		SIGNED_RGB_UNSIGNED_ALPHA_NV = 0x870C,
		SINGLE_COLOR = 0x81F9,
		SINGLE_COLOR_EXT = 0x81F9,
		SLICE_ACCUM_SUN = 0x85CC,
		SLIM10U_SGIX = 0x831E,
		SLIM12S_SGIX = 0x831F,
		SLIM8U_SGIX = 0x831D,
		SLUMINANCE = 0x8C46,
		SLUMINANCE8 = 0x8C47,
		SLUMINANCE8_ALPHA8 = 0x8C45,
		SLUMINANCE8_ALPHA8_EXT = 0x8C45,
		SLUMINANCE8_EXT = 0x8C47,
		SLUMINANCE_ALPHA = 0x8C44,
		SLUMINANCE_ALPHA_EXT = 0x8C44,
		SLUMINANCE_EXT = 0x8C46,
		SMOOTH = 0x1D01,
		SMOOTH_LINE_WIDTH_GRANULARITY = 0x0B23,
		SMOOTH_LINE_WIDTH_RANGE = 0x0B22,
		SMOOTH_POINT_SIZE_GRANULARITY = 0x0B13,
		SMOOTH_POINT_SIZE_RANGE = 0x0B12,
		SOURCE0_ALPHA = 0x8588,
		SOURCE0_ALPHA_EXT = 0x8588,
		SOURCE0_RGB = 0x8580,
		SOURCE0_RGB_EXT = 0x8580,
		SOURCE1_ALPHA = 0x8589,
		SOURCE1_ALPHA_EXT = 0x8589,
		SOURCE1_RGB = 0x8581,
		SOURCE1_RGB_EXT = 0x8581,
		SOURCE2_ALPHA = 0x858A,
		SOURCE2_ALPHA_EXT = 0x858A,
		SOURCE2_RGB = 0x8582,
		SOURCE2_RGB_EXT = 0x8582,
		SOURCE3_ALPHA_NV = 0x858B,
		SOURCE3_RGB_NV = 0x8583,
		SPARE0_NV = 0x852E,
		SPARE0_PLUS_SECONDARY_COLOR_NV = 0x8532,
		SPARE1_NV = 0x852F,
		SPECULAR = 0x1202,
		SPHERE_MAP = 0x2402,
		SPOT_CUTOFF = 0x1206,
		SPOT_DIRECTION = 0x1204,
		SPOT_EXPONENT = 0x1205,
		SPRITE_AXIAL_SGIX = 0x814C,
		SPRITE_AXIS_SGIX = 0x814A,
		SPRITE_EYE_ALIGNED_SGIX = 0x814E,
		SPRITE_MODE_SGIX = 0x8149,
		SPRITE_OBJECT_ALIGNED_SGIX = 0x814D,
		SPRITE_SGIX = 0x8148,
		SPRITE_TRANSLATION_SGIX = 0x814B,
		SRC0_ALPHA = 0x8588,
		SRC0_RGB = 0x8580,
		SRC1_ALPHA = 0x8589,
		SRC1_RGB = 0x8581,
		SRC2_ALPHA = 0x858A,
		SRC2_RGB = 0x8582,
		SRC_ALPHA = 0x0302,
		SRC_ALPHA_SATURATE = 0x0308,
		SRC_COLOR = 0x0300,
		SRGB = 0x8C40,
		SRGB8 = 0x8C41,
		SRGB8_ALPHA8 = 0x8C43,
		SRGB8_ALPHA8_EXT = 0x8C43,
		SRGB8_EXT = 0x8C41,
		SRGB_ALPHA = 0x8C42,
		SRGB_ALPHA_EXT = 0x8C42,
		SRGB_EXT = 0x8C40,
		STACK_OVERFLOW = 0x0503,
		STACK_UNDERFLOW = 0x0504,
		STATE_RESTORE = 0x8BDC,
		STATIC_ATI = 0x8760,
		STATIC_COPY = 0x88E6,
		STATIC_COPY_ARB = 0x88E6,
		STATIC_DRAW = 0x88E4,
		STATIC_DRAW_ARB = 0x88E4,
		STATIC_READ = 0x88E5,
		STATIC_READ_ARB = 0x88E5,
		STENCIL = 0x1802,
		STENCIL_ATTACHMENT = 0x8D20,
		STENCIL_ATTACHMENT_EXT = 0x8D20,
		STENCIL_ATTACHMENT_OES = 0x8D20,
		STENCIL_BACK_FAIL = 0x8801,
		STENCIL_BACK_FAIL_ATI = 0x8801,
		STENCIL_BACK_FUNC = 0x8800,
		STENCIL_BACK_FUNC_ATI = 0x8800,
		STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802,
		STENCIL_BACK_PASS_DEPTH_FAIL_ATI = 0x8802,
		STENCIL_BACK_PASS_DEPTH_PASS = 0x8803,
		STENCIL_BACK_PASS_DEPTH_PASS_ATI = 0x8803,
		STENCIL_BACK_REF = 0x8CA3,
		STENCIL_BACK_VALUE_MASK = 0x8CA4,
		STENCIL_BACK_WRITEMASK = 0x8CA5,
		STENCIL_BITS = 0x0D57,
		STENCIL_BUFFER = 0x8224,
		STENCIL_BUFFER_BIT = 0x00000400,
		STENCIL_CLEAR_TAG_VALUE_EXT = 0x88F3,
		STENCIL_CLEAR_VALUE = 0x0B91,
		STENCIL_EXT = 0x1802,
		STENCIL_FAIL = 0x0B94,
		STENCIL_FUNC = 0x0B92,
		STENCIL_INDEX = 0x1901,
		STENCIL_INDEX1 = 0x8D46,
		STENCIL_INDEX16 = 0x8D49,
		STENCIL_INDEX16_EXT = 0x8D49,
		STENCIL_INDEX1_EXT = 0x8D46,
		STENCIL_INDEX1_OES = 0x8D46,
		STENCIL_INDEX4 = 0x8D47,
		STENCIL_INDEX4_EXT = 0x8D47,
		STENCIL_INDEX4_OES = 0x8D47,
		STENCIL_INDEX8 = 0x8D48,
		STENCIL_INDEX8_EXT = 0x8D48,
		STENCIL_INDEX8_OES = 0x8D48,
		STENCIL_PASS_DEPTH_FAIL = 0x0B95,
		STENCIL_PASS_DEPTH_PASS = 0x0B96,
		STENCIL_REF = 0x0B97,
		STENCIL_TAG_BITS_EXT = 0x88F2,
		STENCIL_TEST = 0x0B90,
		STENCIL_TEST_TWO_SIDE_EXT = 0x8910,
		STENCIL_VALUE_MASK = 0x0B93,
		STENCIL_WRITEMASK = 0x0B98,
		STEREO = 0x0C33,
		STORAGE_CACHED_APPLE = 0x85BE,
		STORAGE_PRIVATE_APPLE = 0x85BD,
		STORAGE_SHARED_APPLE = 0x85BF,
		STREAM_COPY = 0x88E2,
		STREAM_COPY_ARB = 0x88E2,
		STREAM_DRAW = 0x88E0,
		STREAM_DRAW_ARB = 0x88E0,
		STREAM_READ = 0x88E1,
		STREAM_READ_ARB = 0x88E1,
		SUBPIXEL_BITS = 0x0D50,
		SUBTRACT = 0x84E7,
		SUBTRACT_ARB = 0x84E7,
		SUB_ATI = 0x8965,
		SWIZZLE_STQ_ATI = 0x8977,
		SWIZZLE_STQ_DQ_ATI = 0x8979,
		SWIZZLE_STRQ_ATI = 0x897A,
		SWIZZLE_STRQ_DQ_ATI = 0x897B,
		SWIZZLE_STR_ATI = 0x8976,
		SWIZZLE_STR_DR_ATI = 0x8978,
		SYNC_CONDITION = 0x9113,
		SYNC_FENCE = 0x9116,
		SYNC_FLAGS = 0x9115,
		SYNC_FLUSH_COMMANDS_BIT = 0x00000001,
		SYNC_GPU_COMMANDS_COMPLETE = 0x9117,
		SYNC_STATUS = 0x9114,
		T = 0x2001,
		T2F_C3F_V3F = 0x2A2A,
		T2F_C4F_N3F_V3F = 0x2A2C,
		T2F_C4UB_V3F = 0x2A29,
		T2F_IUI_N3F_V2F_EXT = 0x81B3,
		T2F_IUI_N3F_V3F_EXT = 0x81B4,
		T2F_IUI_V2F_EXT = 0x81B1,
		T2F_IUI_V3F_EXT = 0x81B2,
		T2F_N3F_V3F = 0x2A2B,
		T2F_V3F = 0x2A27,
		T4F_C4F_N3F_V4F = 0x2A2D,
		T4F_V4F = 0x2A28,
		TABLE_TOO_LARGE = 0x8031,
		TABLE_TOO_LARGE_EXT = 0x8031,
		TESSELLATION_FACTOR_AMD = 0x9005,
		TESSELLATION_MODE_AMD = 0x9004,
		TEXTURE = 0x1702,
		TEXTURE0 = 0x84C0,
		TEXTURE0_ARB = 0x84C0,
		TEXTURE1 = 0x84C1,
		TEXTURE10 = 0x84CA,
		TEXTURE10_ARB = 0x84CA,
		TEXTURE11 = 0x84CB,
		TEXTURE11_ARB = 0x84CB,
		TEXTURE12 = 0x84CC,
		TEXTURE12_ARB = 0x84CC,
		TEXTURE13 = 0x84CD,
		TEXTURE13_ARB = 0x84CD,
		TEXTURE14 = 0x84CE,
		TEXTURE14_ARB = 0x84CE,
		TEXTURE15 = 0x84CF,
		TEXTURE15_ARB = 0x84CF,
		TEXTURE16 = 0x84D0,
		TEXTURE16_ARB = 0x84D0,
		TEXTURE17 = 0x84D1,
		TEXTURE17_ARB = 0x84D1,
		TEXTURE18 = 0x84D2,
		TEXTURE18_ARB = 0x84D2,
		TEXTURE19 = 0x84D3,
		TEXTURE19_ARB = 0x84D3,
		TEXTURE1_ARB = 0x84C1,
		TEXTURE2 = 0x84C2,
		TEXTURE20 = 0x84D4,
		TEXTURE20_ARB = 0x84D4,
		TEXTURE21 = 0x84D5,
		TEXTURE21_ARB = 0x84D5,
		TEXTURE22 = 0x84D6,
		TEXTURE22_ARB = 0x84D6,
		TEXTURE23 = 0x84D7,
		TEXTURE23_ARB = 0x84D7,
		TEXTURE24 = 0x84D8,
		TEXTURE24_ARB = 0x84D8,
		TEXTURE25 = 0x84D9,
		TEXTURE25_ARB = 0x84D9,
		TEXTURE26 = 0x84DA,
		TEXTURE26_ARB = 0x84DA,
		TEXTURE27 = 0x84DB,
		TEXTURE27_ARB = 0x84DB,
		TEXTURE28 = 0x84DC,
		TEXTURE28_ARB = 0x84DC,
		TEXTURE29 = 0x84DD,
		TEXTURE29_ARB = 0x84DD,
		TEXTURE2_ARB = 0x84C2,
		TEXTURE3 = 0x84C3,
		TEXTURE30 = 0x84DE,
		TEXTURE30_ARB = 0x84DE,
		TEXTURE31 = 0x84DF,
		TEXTURE31_ARB = 0x84DF,
		TEXTURE3_ARB = 0x84C3,
		TEXTURE4 = 0x84C4,
		TEXTURE4_ARB = 0x84C4,
		TEXTURE5 = 0x84C5,
		TEXTURE5_ARB = 0x84C5,
		TEXTURE6 = 0x84C6,
		TEXTURE6_ARB = 0x84C6,
		TEXTURE7 = 0x84C7,
		TEXTURE7_ARB = 0x84C7,
		TEXTURE8 = 0x84C8,
		TEXTURE8_ARB = 0x84C8,
		TEXTURE9 = 0x84C9,
		TEXTURE9_ARB = 0x84C9,
		TEXTURE_1D = 0x0DE0,
		TEXTURE_1D_ARRAY = 0x8C18,
		TEXTURE_1D_ARRAY_EXT = 0x8C18,
		TEXTURE_1D_BINDING_EXT = 0x8068,
		TEXTURE_1D_STACK_BINDING_MESAX = 0x875D,
		TEXTURE_1D_STACK_MESAX = 0x8759,
		TEXTURE_2D = 0x0DE1,
		TEXTURE_2D_ARRAY = 0x8C1A,
		TEXTURE_2D_ARRAY_EXT = 0x8C1A,
		TEXTURE_2D_BINDING_EXT = 0x8069,
		TEXTURE_2D_MULTISAMPLE = 0x9100,
		TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9102,
		TEXTURE_2D_STACK_BINDING_MESAX = 0x875E,
		TEXTURE_2D_STACK_MESAX = 0x875A,
		TEXTURE_3D = 0x806F,
		TEXTURE_3D_BINDING_EXT = 0x806A,
		TEXTURE_3D_BINDING_OES = 0x806A,
		TEXTURE_3D_EXT = 0x806F,
		TEXTURE_3D_OES = 0x806F,
		TEXTURE_4DSIZE_SGIS = 0x8136,
		TEXTURE_4D_BINDING_SGIS = 0x814F,
		TEXTURE_4D_SGIS = 0x8134,
		TEXTURE_ALPHA_MODULATE_IMG = 0x8C06,
		TEXTURE_ALPHA_SIZE = 0x805F,
		TEXTURE_ALPHA_SIZE_EXT = 0x805F,
		TEXTURE_ALPHA_TYPE = 0x8C13,
		TEXTURE_ALPHA_TYPE_ARB = 0x8C13,
		TEXTURE_APPLICATION_MODE_EXT = 0x834F,
		TEXTURE_BASE_LEVEL = 0x813C,
		TEXTURE_BASE_LEVEL_SGIS = 0x813C,
		TEXTURE_BINDING_1D = 0x8068,
		TEXTURE_BINDING_1D_ARRAY = 0x8C1C,
		TEXTURE_BINDING_1D_ARRAY_EXT = 0x8C1C,
		TEXTURE_BINDING_2D = 0x8069,
		TEXTURE_BINDING_2D_ARRAY = 0x8C1D,
		TEXTURE_BINDING_2D_ARRAY_EXT = 0x8C1D,
		TEXTURE_BINDING_2D_MULTISAMPLE = 0x9104,
		TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 0x9105,
		TEXTURE_BINDING_3D = 0x806A,
		TEXTURE_BINDING_BUFFER = 0x8C2C,
		TEXTURE_BINDING_BUFFER_ARB = 0x8C2C,
		TEXTURE_BINDING_BUFFER_EXT = 0x8C2C,
		TEXTURE_BINDING_CUBE_MAP = 0x8514,
		TEXTURE_BINDING_CUBE_MAP_ARB = 0x8514,
		TEXTURE_BINDING_CUBE_MAP_ARRAY = 0x900A,
		TEXTURE_BINDING_CUBE_MAP_EXT = 0x8514,
		TEXTURE_BINDING_CUBE_MAP_OES = 0x8514,
		TEXTURE_BINDING_EXTERNAL_OES = 0x8D67,
		TEXTURE_BINDING_RECTANGLE = 0x84F6,
		TEXTURE_BINDING_RECTANGLE_ARB = 0x84F6,
		TEXTURE_BINDING_RECTANGLE_NV = 0x84F6,
		TEXTURE_BINDING_RENDERBUFFER_NV = 0x8E53,
		TEXTURE_BIT = 0x00040000,
		TEXTURE_BLUE_SIZE = 0x805E,
		TEXTURE_BLUE_SIZE_EXT = 0x805E,
		TEXTURE_BLUE_TYPE = 0x8C12,
		TEXTURE_BLUE_TYPE_ARB = 0x8C12,
		TEXTURE_BORDER = 0x1005,
		TEXTURE_BORDER_COLOR = 0x1004,
		TEXTURE_BORDER_VALUES_NV = 0x871A,
		TEXTURE_BUFFER = 0x8C2A,
		TEXTURE_BUFFER_ARB = 0x8C2A,
		TEXTURE_BUFFER_DATA_STORE_BINDING = 0x8C2D,
		TEXTURE_BUFFER_DATA_STORE_BINDING_ARB = 0x8C2D,
		TEXTURE_BUFFER_DATA_STORE_BINDING_EXT = 0x8C2D,
		TEXTURE_BUFFER_EXT = 0x8C2A,
		TEXTURE_BUFFER_FORMAT = 0x8C2E,
		TEXTURE_BUFFER_FORMAT_ARB = 0x8C2E,
		TEXTURE_BUFFER_FORMAT_EXT = 0x8C2E,
		TEXTURE_CLIPMAP_CENTER_SGIX = 0x8171,
		TEXTURE_CLIPMAP_DEPTH_SGIX = 0x8176,
		TEXTURE_CLIPMAP_FRAME_SGIX = 0x8172,
		TEXTURE_CLIPMAP_LOD_OFFSET_SGIX = 0x8175,
		TEXTURE_CLIPMAP_OFFSET_SGIX = 0x8173,
		TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX = 0x8174,
		TEXTURE_COLOR_TABLE_SGI = 0x80BC,
		TEXTURE_COLOR_WRITEMASK_SGIS = 0x81EF,
		TEXTURE_COMPARE_FUNC = 0x884D,
		TEXTURE_COMPARE_FUNC_ARB = 0x884D,
		TEXTURE_COMPARE_MODE = 0x884C,
		TEXTURE_COMPARE_MODE_ARB = 0x884C,
		TEXTURE_COMPARE_OPERATOR_SGIX = 0x819B,
		TEXTURE_COMPARE_SGIX = 0x819A,
		TEXTURE_COMPONENTS = 0x1003,
		TEXTURE_COMPRESSED = 0x86A1,
		TEXTURE_COMPRESSED_ARB = 0x86A1,
		TEXTURE_COMPRESSED_IMAGE_SIZE = 0x86A0,
		TEXTURE_COMPRESSED_IMAGE_SIZE_ARB = 0x86A0,
		TEXTURE_COMPRESSION_HINT = 0x84EF,
		TEXTURE_COMPRESSION_HINT_ARB = 0x84EF,
		TEXTURE_COORD_ARRAY = 0x8078,
		TEXTURE_COORD_ARRAY_ADDRESS_NV = 0x8F25,
		TEXTURE_COORD_ARRAY_BUFFER_BINDING = 0x889A,
		TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB = 0x889A,
		TEXTURE_COORD_ARRAY_COUNT_EXT = 0x808B,
		TEXTURE_COORD_ARRAY_EXT = 0x8078,
		TEXTURE_COORD_ARRAY_LENGTH_NV = 0x8F2F,
		TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F8,
		TEXTURE_COORD_ARRAY_POINTER = 0x8092,
		TEXTURE_COORD_ARRAY_POINTER_EXT = 0x8092,
		TEXTURE_COORD_ARRAY_SIZE = 0x8088,
		TEXTURE_COORD_ARRAY_SIZE_EXT = 0x8088,
		TEXTURE_COORD_ARRAY_STRIDE = 0x808A,
		TEXTURE_COORD_ARRAY_STRIDE_EXT = 0x808A,
		TEXTURE_COORD_ARRAY_TYPE = 0x8089,
		TEXTURE_COORD_ARRAY_TYPE_EXT = 0x8089,
		TEXTURE_COORD_NV = 0x8C79,
		TEXTURE_CROP_RECT_OES = 0x8B9D,
		TEXTURE_CUBE_MAP = 0x8513,
		TEXTURE_CUBE_MAP_ARB = 0x8513,
		TEXTURE_CUBE_MAP_ARRAY = 0x9009,
		TEXTURE_CUBE_MAP_EXT = 0x8513,
		TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516,
		TEXTURE_CUBE_MAP_NEGATIVE_X_ARB = 0x8516,
		TEXTURE_CUBE_MAP_NEGATIVE_X_EXT = 0x8516,
		TEXTURE_CUBE_MAP_NEGATIVE_X_OES = 0x8516,
		TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518,
		TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB = 0x8518,
		TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT = 0x8518,
		TEXTURE_CUBE_MAP_NEGATIVE_Y_OES = 0x8518,
		TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A,
		TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB = 0x851A,
		TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT = 0x851A,
		TEXTURE_CUBE_MAP_NEGATIVE_Z_OES = 0x851A,
		TEXTURE_CUBE_MAP_OES = 0x8513,
		TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515,
		TEXTURE_CUBE_MAP_POSITIVE_X_ARB = 0x8515,
		TEXTURE_CUBE_MAP_POSITIVE_X_EXT = 0x8515,
		TEXTURE_CUBE_MAP_POSITIVE_X_OES = 0x8515,
		TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517,
		TEXTURE_CUBE_MAP_POSITIVE_Y_ARB = 0x8517,
		TEXTURE_CUBE_MAP_POSITIVE_Y_EXT = 0x8517,
		TEXTURE_CUBE_MAP_POSITIVE_Y_OES = 0x8517,
		TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519,
		TEXTURE_CUBE_MAP_POSITIVE_Z_ARB = 0x8519,
		TEXTURE_CUBE_MAP_POSITIVE_Z_EXT = 0x8519,
		TEXTURE_CUBE_MAP_POSITIVE_Z_OES = 0x8519,
		TEXTURE_CUBE_MAP_SEAMLESS = 0x884F,
		TEXTURE_DEFORMATION_BIT_SGIX = 0x00000001,
		TEXTURE_DEFORMATION_SGIX = 0x8195,
		TEXTURE_DEPTH = 0x8071,
		TEXTURE_DEPTH_EXT = 0x8071,
		TEXTURE_DEPTH_QCOM = 0x8BD4,
		TEXTURE_DEPTH_SIZE = 0x884A,
		TEXTURE_DEPTH_SIZE_ARB = 0x884A,
		TEXTURE_DEPTH_TYPE = 0x8C16,
		TEXTURE_DEPTH_TYPE_ARB = 0x8C16,
		TEXTURE_DS_SIZE_NV = 0x871D,
		TEXTURE_DT_SIZE_NV = 0x871E,
		TEXTURE_ENV = 0x2300,
		TEXTURE_ENV_BIAS_SGIX = 0x80BE,
		TEXTURE_ENV_COLOR = 0x2201,
		TEXTURE_ENV_MODE = 0x2200,
		TEXTURE_EXTERNAL_OES = 0x8D65,
		TEXTURE_FILTER4_SIZE_SGIS = 0x8147,
		TEXTURE_FILTER_CONTROL = 0x8500,
		TEXTURE_FILTER_CONTROL_EXT = 0x8500,
		TEXTURE_FIXED_SAMPLE_LOCATIONS = 0x9107,
		TEXTURE_FLOAT_COMPONENTS_NV = 0x888C,
		TEXTURE_FORMAT_QCOM = 0x8BD6,
		TEXTURE_FREE_MEMORY_ATI = 0x87FC,
		TEXTURE_GEN_MODE = 0x2500,
		TEXTURE_GEN_Q = 0x0C63,
		TEXTURE_GEN_R = 0x0C62,
		TEXTURE_GEN_S = 0x0C60,
		TEXTURE_GEN_STR_OES = 0x8D60,
		TEXTURE_GEN_T = 0x0C61,
		TEXTURE_GEQUAL_R_SGIX = 0x819D,
		TEXTURE_GREEN_SIZE = 0x805D,
		TEXTURE_GREEN_SIZE_EXT = 0x805D,
		TEXTURE_GREEN_TYPE = 0x8C11,
		TEXTURE_GREEN_TYPE_ARB = 0x8C11,
		TEXTURE_HEIGHT = 0x1001,
		TEXTURE_HEIGHT_QCOM = 0x8BD3,
		TEXTURE_HI_SIZE_NV = 0x871B,
		TEXTURE_IMAGE_VALID_QCOM = 0x8BD8,
		TEXTURE_INTENSITY_SIZE = 0x8061,
		TEXTURE_INTENSITY_SIZE_EXT = 0x8061,
		TEXTURE_INTENSITY_TYPE = 0x8C15,
		TEXTURE_INTENSITY_TYPE_ARB = 0x8C15,
		TEXTURE_INTERNAL_FORMAT = 0x1003,
		TEXTURE_INTERNAL_FORMAT_QCOM = 0x8BD5,
		TEXTURE_LEQUAL_R_SGIX = 0x819C,
		TEXTURE_LIGHT_EXT = 0x8350,
		TEXTURE_LOD_BIAS = 0x8501,
		TEXTURE_LOD_BIAS_EXT = 0x8501,
		TEXTURE_LOD_BIAS_R_SGIX = 0x8190,
		TEXTURE_LOD_BIAS_S_SGIX = 0x818E,
		TEXTURE_LOD_BIAS_T_SGIX = 0x818F,
		TEXTURE_LO_SIZE_NV = 0x871C,
		TEXTURE_LUMINANCE_SIZE = 0x8060,
		TEXTURE_LUMINANCE_SIZE_EXT = 0x8060,
		TEXTURE_LUMINANCE_TYPE = 0x8C14,
		TEXTURE_LUMINANCE_TYPE_ARB = 0x8C14,
		TEXTURE_MAG_FILTER = 0x2800,
		TEXTURE_MAG_SIZE_NV = 0x871F,
		TEXTURE_MATERIAL_FACE_EXT = 0x8351,
		TEXTURE_MATERIAL_PARAMETER_EXT = 0x8352,
		TEXTURE_MATRIX = 0x0BA8,
		TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES = 0x898F,
		TEXTURE_MAX_ANISOTROPY_EXT = 0x84FE,
		TEXTURE_MAX_CLAMP_R_SGIX = 0x836B,
		TEXTURE_MAX_CLAMP_S_SGIX = 0x8369,
		TEXTURE_MAX_CLAMP_T_SGIX = 0x836A,
		TEXTURE_MAX_LEVEL = 0x813D,
		TEXTURE_MAX_LEVEL_SGIS = 0x813D,
		TEXTURE_MAX_LOD = 0x813B,
		TEXTURE_MAX_LOD_SGIS = 0x813B,
		TEXTURE_MIN_FILTER = 0x2801,
		TEXTURE_MIN_LOD = 0x813A,
		TEXTURE_MIN_LOD_SGIS = 0x813A,
		TEXTURE_MULTI_BUFFER_HINT_SGIX = 0x812E,
		TEXTURE_NORMAL_EXT = 0x85AF,
		TEXTURE_NUM_LEVELS_QCOM = 0x8BD9,
		TEXTURE_OBJECT_VALID_QCOM = 0x8BDB,
		TEXTURE_PRIORITY = 0x8066,
		TEXTURE_PRIORITY_EXT = 0x8066,
		TEXTURE_RANGE_LENGTH_APPLE = 0x85B7,
		TEXTURE_RANGE_POINTER_APPLE = 0x85B8,
		TEXTURE_RECTANGLE = 0x84F5,
		TEXTURE_RECTANGLE_ARB = 0x84F5,
		TEXTURE_RECTANGLE_NV = 0x84F5,
		TEXTURE_RED_SIZE = 0x805C,
		TEXTURE_RED_SIZE_EXT = 0x805C,
		TEXTURE_RED_TYPE = 0x8C10,
		TEXTURE_RED_TYPE_ARB = 0x8C10,
		TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV = 0x8E54,
		TEXTURE_RENDERBUFFER_NV = 0x8E55,
		TEXTURE_RESIDENT = 0x8067,
		TEXTURE_RESIDENT_EXT = 0x8067,
		TEXTURE_SAMPLES = 0x9106,
		TEXTURE_SHADER_NV = 0x86DE,
		TEXTURE_SHARED_SIZE = 0x8C3F,
		TEXTURE_SHARED_SIZE_EXT = 0x8C3F,
		TEXTURE_STACK_DEPTH = 0x0BA5,
		TEXTURE_STENCIL_SIZE = 0x88F1,
		TEXTURE_STENCIL_SIZE_EXT = 0x88F1,
		TEXTURE_STORAGE_HINT_APPLE = 0x85BC,
		TEXTURE_SWIZZLE_A_EXT = 0x8E45,
		TEXTURE_SWIZZLE_B_EXT = 0x8E44,
		TEXTURE_SWIZZLE_G_EXT = 0x8E43,
		TEXTURE_SWIZZLE_RGBA_EXT = 0x8E46,
		TEXTURE_SWIZZLE_R_EXT = 0x8E42,
		TEXTURE_TARGET_QCOM = 0x8BDA,
		TEXTURE_TOO_LARGE_EXT = 0x8065,
		TEXTURE_TYPE_QCOM = 0x8BD7,
		TEXTURE_UNSIGNED_REMAP_MODE_NV = 0x888F,
		TEXTURE_WIDTH = 0x1000,
		TEXTURE_WIDTH_QCOM = 0x8BD2,
		TEXTURE_WRAP_Q_SGIS = 0x8137,
		TEXTURE_WRAP_R = 0x8072,
		TEXTURE_WRAP_R_EXT = 0x8072,
		TEXTURE_WRAP_R_OES = 0x8072,
		TEXTURE_WRAP_S = 0x2802,
		TEXTURE_WRAP_T = 0x2803,
		TEXT_FRAGMENT_SHADER_ATI = 0x8200,
		TIMEOUT_EXPIRED = 0x911B,
		TIMEOUT_IGNORED = 0xFFFFFFFFFFFFFFFFull,
		TIME_ELAPSED_EXT = 0x88BF,
		TRACE_ALL_BITS_MESA = 0xFFFF,
		TRACE_ARRAYS_BIT_MESA = 0x0004,
		TRACE_ERRORS_BIT_MESA = 0x0020,
		TRACE_MASK_MESA = 0x8755,
		TRACE_NAME_MESA = 0x8756,
		TRACE_OPERATIONS_BIT_MESA = 0x0001,
		TRACE_PIXELS_BIT_MESA = 0x0010,
		TRACE_PRIMITIVES_BIT_MESA = 0x0002,
		TRACE_TEXTURES_BIT_MESA = 0x0008,
		TRACK_MATRIX_NV = 0x8648,
		TRACK_MATRIX_TRANSFORM_NV = 0x8649,
		TRANSFORM_BIT = 0x00001000,
		TRANSFORM_FEEDBACK_ATTRIBS_NV = 0x8C7E,
		TRANSFORM_FEEDBACK_BUFFER = 0x8C8E,
		TRANSFORM_FEEDBACK_BUFFER_BINDING = 0x8C8F,
		TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT = 0x8C8F,
		TRANSFORM_FEEDBACK_BUFFER_BINDING_NV = 0x8C8F,
		TRANSFORM_FEEDBACK_BUFFER_EXT = 0x8C8E,
		TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F,
		TRANSFORM_FEEDBACK_BUFFER_MODE_EXT = 0x8C7F,
		TRANSFORM_FEEDBACK_BUFFER_MODE_NV = 0x8C7F,
		TRANSFORM_FEEDBACK_BUFFER_NV = 0x8C8E,
		TRANSFORM_FEEDBACK_BUFFER_SIZE = 0x8C85,
		TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT = 0x8C85,
		TRANSFORM_FEEDBACK_BUFFER_SIZE_NV = 0x8C85,
		TRANSFORM_FEEDBACK_BUFFER_START = 0x8C84,
		TRANSFORM_FEEDBACK_BUFFER_START_EXT = 0x8C84,
		TRANSFORM_FEEDBACK_BUFFER_START_NV = 0x8C84,
		TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8C88,
		TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT = 0x8C88,
		TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV = 0x8C88,
		TRANSFORM_FEEDBACK_RECORD_NV = 0x8C86,
		TRANSFORM_FEEDBACK_VARYINGS = 0x8C83,
		TRANSFORM_FEEDBACK_VARYINGS_EXT = 0x8C83,
		TRANSFORM_FEEDBACK_VARYINGS_NV = 0x8C83,
		TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 0x8C76,
		TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT = 0x8C76,
		TRANSFORM_HINT_APPLE = 0x85B1,
		TRANSPOSE_COLOR_MATRIX = 0x84E6,
		TRANSPOSE_COLOR_MATRIX_ARB = 0x84E6,
		TRANSPOSE_CURRENT_MATRIX_ARB = 0x88B7,
		TRANSPOSE_MODELVIEW_MATRIX = 0x84E3,
		TRANSPOSE_MODELVIEW_MATRIX_ARB = 0x84E3,
		TRANSPOSE_NV = 0x862C,
		TRANSPOSE_PROGRAM_MATRIX_EXT = 0x8E2E,
		TRANSPOSE_PROJECTION_MATRIX = 0x84E4,
		TRANSPOSE_PROJECTION_MATRIX_ARB = 0x84E4,
		TRANSPOSE_TEXTURE_MATRIX = 0x84E5,
		TRANSPOSE_TEXTURE_MATRIX_ARB = 0x84E5,
		TRIANGLES = 0x0004,
		TRIANGLES_ADJACENCY = 0x000C,
		TRIANGLES_ADJACENCY_ARB = 0x000C,
		TRIANGLES_ADJACENCY_EXT = 0x000C,
		TRIANGLE_FAN = 0x0006,
		TRIANGLE_MESH_SUN = 0x8615,
		TRIANGLE_STRIP = 0x0005,
		TRIANGLE_STRIP_ADJACENCY = 0x000D,
		TRIANGLE_STRIP_ADJACENCY_ARB = 0x000D,
		TRIANGLE_STRIP_ADJACENCY_EXT = 0x000D,
		//TRUE = 1,
		TYPE_RGBA_FLOAT_ATI = 0x8820,
		UNDEFINED_APPLE = 0x8A1C,
		UNIFORM_ARRAY_STRIDE = 0x8A3C,
		UNIFORM_BLOCK_ACTIVE_UNIFORMS = 0x8A42,
		UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x8A43,
		UNIFORM_BLOCK_BINDING = 0x8A3F,
		UNIFORM_BLOCK_DATA_SIZE = 0x8A40,
		UNIFORM_BLOCK_INDEX = 0x8A3A,
		UNIFORM_BLOCK_NAME_LENGTH = 0x8A41,
		UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8A46,
		UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = 0x8A45,
		UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x8A44,
		UNIFORM_BUFFER = 0x8A11,
		UNIFORM_BUFFER_BINDING = 0x8A28,
		UNIFORM_BUFFER_BINDING_EXT = 0x8DEF,
		UNIFORM_BUFFER_EXT = 0x8DEE,
		UNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x8A34,
		UNIFORM_BUFFER_SIZE = 0x8A2A,
		UNIFORM_BUFFER_START = 0x8A29,
		UNIFORM_IS_ROW_MAJOR = 0x8A3E,
		UNIFORM_MATRIX_STRIDE = 0x8A3D,
		UNIFORM_NAME_LENGTH = 0x8A39,
		UNIFORM_OFFSET = 0x8A3B,
		UNIFORM_SIZE = 0x8A38,
		UNIFORM_TYPE = 0x8A37,
		UNPACK_ALIGNMENT = 0x0CF5,
		UNPACK_CLIENT_STORAGE_APPLE = 0x85B2,
		UNPACK_CMYK_HINT_EXT = 0x800F,
		UNPACK_COMPRESSED_SIZE_SGIX = 0x831A,
		UNPACK_IMAGE_DEPTH_SGIS = 0x8133,
		UNPACK_IMAGE_HEIGHT = 0x806E,
		UNPACK_IMAGE_HEIGHT_EXT = 0x806E,
		UNPACK_LSB_FIRST = 0x0CF1,
		UNPACK_RESAMPLE_OML = 0x8985,
		UNPACK_RESAMPLE_SGIX = 0x842D,
		UNPACK_ROW_BYTES_APPLE = 0x8A16,
		UNPACK_ROW_LENGTH = 0x0CF2,
		UNPACK_SKIP_IMAGES = 0x806D,
		UNPACK_SKIP_IMAGES_EXT = 0x806D,
		UNPACK_SKIP_PIXELS = 0x0CF4,
		UNPACK_SKIP_ROWS = 0x0CF3,
		UNPACK_SKIP_VOLUMES_SGIS = 0x8132,
		UNPACK_SUBSAMPLE_RATE_SGIX = 0x85A1,
		UNPACK_SWAP_BYTES = 0x0CF0,
		UNSIGNALED = 0x9118,
		UNSIGNED_BYTE = 0x1401,
		UNSIGNED_BYTE_2_3_3_REV = 0x8362,
		UNSIGNED_BYTE_2_3_3_REV_EXT = 0x8362,
		UNSIGNED_BYTE_3_3_2 = 0x8032,
		UNSIGNED_BYTE_3_3_2_EXT = 0x8032,
		UNSIGNED_IDENTITY_NV = 0x8536,
		UNSIGNED_INT = 0x1405,
		UNSIGNED_INT64_AMD = 0x8BC2,
		UNSIGNED_INT64_NV = 0x140F,
		UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B,
		UNSIGNED_INT_10F_11F_11F_REV_EXT = 0x8C3B,
		UNSIGNED_INT_10_10_10_2 = 0x8036,
		UNSIGNED_INT_10_10_10_2_EXT = 0x8036,
		UNSIGNED_INT_10_10_10_2_OES = 0x8DF6,
		UNSIGNED_INT_24_8 = 0x84FA,
		UNSIGNED_INT_24_8_EXT = 0x84FA,
		UNSIGNED_INT_24_8_MESA = 0x8751,
		UNSIGNED_INT_24_8_NV = 0x84FA,
		UNSIGNED_INT_24_8_OES = 0x84FA,
		UNSIGNED_INT_2_10_10_10_REV = 0x8368,
		UNSIGNED_INT_2_10_10_10_REV_EXT = 0x8368,
		UNSIGNED_INT_5_9_9_9_REV = 0x8C3E,
		UNSIGNED_INT_5_9_9_9_REV_EXT = 0x8C3E,
		UNSIGNED_INT_8_24_REV_MESA = 0x8752,
		UNSIGNED_INT_8_8_8_8 = 0x8035,
		UNSIGNED_INT_8_8_8_8_EXT = 0x8035,
		UNSIGNED_INT_8_8_8_8_REV = 0x8367,
		UNSIGNED_INT_8_8_8_8_REV_EXT = 0x8367,
		UNSIGNED_INT_8_8_S8_S8_REV_NV = 0x86DB,
		UNSIGNED_INT_S8_S8_8_8_NV = 0x86DA,
		UNSIGNED_INT_SAMPLER_1D = 0x8DD1,
		UNSIGNED_INT_SAMPLER_1D_ARRAY = 0x8DD6,
		UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT = 0x8DD6,
		UNSIGNED_INT_SAMPLER_1D_EXT = 0x8DD1,
		UNSIGNED_INT_SAMPLER_2D = 0x8DD2,
		UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7,
		UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT = 0x8DD7,
		UNSIGNED_INT_SAMPLER_2D_EXT = 0x8DD2,
		UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 0x910A,
		UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910D,
		UNSIGNED_INT_SAMPLER_2D_RECT = 0x8DD5,
		UNSIGNED_INT_SAMPLER_2D_RECT_EXT = 0x8DD5,
		UNSIGNED_INT_SAMPLER_3D = 0x8DD3,
		UNSIGNED_INT_SAMPLER_3D_EXT = 0x8DD3,
		UNSIGNED_INT_SAMPLER_BUFFER = 0x8DD8,
		UNSIGNED_INT_SAMPLER_BUFFER_AMD = 0x9003,
		UNSIGNED_INT_SAMPLER_BUFFER_EXT = 0x8DD8,
		UNSIGNED_INT_SAMPLER_CUBE = 0x8DD4,
		UNSIGNED_INT_SAMPLER_CUBE_EXT = 0x8DD4,
		UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900F,
		UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV = 0x8E58,
		UNSIGNED_INT_VEC2 = 0x8DC6,
		UNSIGNED_INT_VEC2_EXT = 0x8DC6,
		UNSIGNED_INT_VEC3 = 0x8DC7,
		UNSIGNED_INT_VEC3_EXT = 0x8DC7,
		UNSIGNED_INT_VEC4 = 0x8DC8,
		UNSIGNED_INT_VEC4_EXT = 0x8DC8,
		UNSIGNED_INVERT_NV = 0x8537,
		UNSIGNED_NEGATE_NV = 0x853D,
		UNSIGNED_NORMALIZED = 0x8C17,
		UNSIGNED_NORMALIZED_ARB = 0x8C17,
		UNSIGNED_SHORT = 0x1403,
		UNSIGNED_SHORT_15_1_MESA = 0x8753,
		UNSIGNED_SHORT_1_15_REV_MESA = 0x8754,
		UNSIGNED_SHORT_1_5_5_5_REV = 0x8366,
		UNSIGNED_SHORT_1_5_5_5_REV_EXT = 0x8366,
		UNSIGNED_SHORT_4_4_4_4 = 0x8033,
		UNSIGNED_SHORT_4_4_4_4_EXT = 0x8033,
		UNSIGNED_SHORT_4_4_4_4_REV = 0x8365,
		UNSIGNED_SHORT_4_4_4_4_REV_EXT = 0x8365,
		UNSIGNED_SHORT_5_5_5_1 = 0x8034,
		UNSIGNED_SHORT_5_5_5_1_EXT = 0x8034,
		UNSIGNED_SHORT_5_6_5 = 0x8363,
		UNSIGNED_SHORT_5_6_5_EXT = 0x8363,
		UNSIGNED_SHORT_5_6_5_REV = 0x8364,
		UNSIGNED_SHORT_5_6_5_REV_EXT = 0x8364,
		UNSIGNED_SHORT_8_8_APPLE = 0x85BA,
		UNSIGNED_SHORT_8_8_MESA = 0x85BA,
		UNSIGNED_SHORT_8_8_REV_APPLE = 0x85BB,
		UNSIGNED_SHORT_8_8_REV_MESA = 0x85BB,
		UPPER_LEFT = 0x8CA2,
		V2F = 0x2A20,
		V3F = 0x2A21,
		VALIDATE_STATUS = 0x8B83,
		VARIABLE_A_NV = 0x8523,
		VARIABLE_B_NV = 0x8524,
		VARIABLE_C_NV = 0x8525,
		VARIABLE_D_NV = 0x8526,
		VARIABLE_E_NV = 0x8527,
		VARIABLE_F_NV = 0x8528,
		VARIABLE_G_NV = 0x8529,
		VARIANT_ARRAY_EXT = 0x87E8,
		VARIANT_ARRAY_POINTER_EXT = 0x87E9,
		VARIANT_ARRAY_STRIDE_EXT = 0x87E6,
		VARIANT_ARRAY_TYPE_EXT = 0x87E7,
		VARIANT_DATATYPE_EXT = 0x87E5,
		VARIANT_EXT = 0x87C1,
		VARIANT_VALUE_EXT = 0x87E4,
		VBO_FREE_MEMORY_ATI = 0x87FB,
		VECTOR_EXT = 0x87BF,
		VENDOR = 0x1F00,
		VERSION = 0x1F02,
		VERSION_1_1 = 1,
		VERSION_1_2 = 1,
		VERSION_1_3 = 1,
		VERSION_1_4 = 1,
		VERSION_1_5 = 1,
		VERSION_2_0 = 1,
		VERSION_2_1 = 1,
		VERSION_3_0 = 1,
		VERSION_3_1 = 1,
		VERSION_3_2 = 1,
		VERTEX_ARRAY = 0x8074,
		VERTEX_ARRAY_ADDRESS_NV = 0x8F21,
		VERTEX_ARRAY_BINDING = 0x85B5,
		VERTEX_ARRAY_BINDING_APPLE = 0x85B5,
		VERTEX_ARRAY_BUFFER_BINDING = 0x8896,
		VERTEX_ARRAY_BUFFER_BINDING_ARB = 0x8896,
		VERTEX_ARRAY_COUNT_EXT = 0x807D,
		VERTEX_ARRAY_EXT = 0x8074,
		VERTEX_ARRAY_LENGTH_NV = 0x8F2B,
		VERTEX_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F5,
		VERTEX_ARRAY_POINTER = 0x808E,
		VERTEX_ARRAY_POINTER_EXT = 0x808E,
		VERTEX_ARRAY_RANGE_APPLE = 0x851D,
		VERTEX_ARRAY_RANGE_LENGTH_APPLE = 0x851E,
		VERTEX_ARRAY_RANGE_LENGTH_NV = 0x851E,
		VERTEX_ARRAY_RANGE_NV = 0x851D,
		VERTEX_ARRAY_RANGE_POINTER_APPLE = 0x8521,
		VERTEX_ARRAY_RANGE_POINTER_NV = 0x8521,
		VERTEX_ARRAY_RANGE_VALID_NV = 0x851F,
		VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV = 0x8533,
		VERTEX_ARRAY_SIZE = 0x807A,
		VERTEX_ARRAY_SIZE_EXT = 0x807A,
		VERTEX_ARRAY_STORAGE_HINT_APPLE = 0x851F,
		VERTEX_ARRAY_STRIDE = 0x807C,
		VERTEX_ARRAY_STRIDE_EXT = 0x807C,
		VERTEX_ARRAY_TYPE = 0x807B,
		VERTEX_ARRAY_TYPE_EXT = 0x807B,
		VERTEX_ATTRIB_ARRAY0_NV = 0x8650,
		VERTEX_ATTRIB_ARRAY10_NV = 0x865A,
		VERTEX_ATTRIB_ARRAY11_NV = 0x865B,
		VERTEX_ATTRIB_ARRAY12_NV = 0x865C,
		VERTEX_ATTRIB_ARRAY13_NV = 0x865D,
		VERTEX_ATTRIB_ARRAY14_NV = 0x865E,
		VERTEX_ATTRIB_ARRAY15_NV = 0x865F,
		VERTEX_ATTRIB_ARRAY1_NV = 0x8651,
		VERTEX_ATTRIB_ARRAY2_NV = 0x8652,
		VERTEX_ATTRIB_ARRAY3_NV = 0x8653,
		VERTEX_ATTRIB_ARRAY4_NV = 0x8654,
		VERTEX_ATTRIB_ARRAY5_NV = 0x8655,
		VERTEX_ATTRIB_ARRAY6_NV = 0x8656,
		VERTEX_ATTRIB_ARRAY7_NV = 0x8657,
		VERTEX_ATTRIB_ARRAY8_NV = 0x8658,
		VERTEX_ATTRIB_ARRAY9_NV = 0x8659,
		VERTEX_ATTRIB_ARRAY_ADDRESS_NV = 0x8F20,
		VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F,
		VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB = 0x889F,
		VERTEX_ATTRIB_ARRAY_DIVISOR_ARB = 0x88FE,
		VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622,
		VERTEX_ATTRIB_ARRAY_ENABLED_ARB = 0x8622,
		VERTEX_ATTRIB_ARRAY_INTEGER = 0x88FD,
		VERTEX_ATTRIB_ARRAY_INTEGER_NV = 0x88FD,
		VERTEX_ATTRIB_ARRAY_LENGTH_NV = 0x8F2A,
		VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A,
		VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB = 0x886A,
		VERTEX_ATTRIB_ARRAY_POINTER = 0x8645,
		VERTEX_ATTRIB_ARRAY_POINTER_ARB = 0x8645,
		VERTEX_ATTRIB_ARRAY_SIZE = 0x8623,
		VERTEX_ATTRIB_ARRAY_SIZE_ARB = 0x8623,
		VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624,
		VERTEX_ATTRIB_ARRAY_STRIDE_ARB = 0x8624,
		VERTEX_ATTRIB_ARRAY_TYPE = 0x8625,
		VERTEX_ATTRIB_ARRAY_TYPE_ARB = 0x8625,
		VERTEX_ATTRIB_ARRAY_UNIFIED_NV = 0x8F1E,
		VERTEX_ATTRIB_MAP1_APPLE = 0x8A00,
		VERTEX_ATTRIB_MAP1_COEFF_APPLE = 0x8A03,
		VERTEX_ATTRIB_MAP1_DOMAIN_APPLE = 0x8A05,
		VERTEX_ATTRIB_MAP1_ORDER_APPLE = 0x8A04,
		VERTEX_ATTRIB_MAP1_SIZE_APPLE = 0x8A02,
		VERTEX_ATTRIB_MAP2_APPLE = 0x8A01,
		VERTEX_ATTRIB_MAP2_COEFF_APPLE = 0x8A07,
		VERTEX_ATTRIB_MAP2_DOMAIN_APPLE = 0x8A09,
		VERTEX_ATTRIB_MAP2_ORDER_APPLE = 0x8A08,
		VERTEX_ATTRIB_MAP2_SIZE_APPLE = 0x8A06,
		VERTEX_BLEND_ARB = 0x86A7,
		VERTEX_ID_NV = 0x8C7B,
		VERTEX_PRECLIP_HINT_SGIX = 0x83EF,
		VERTEX_PRECLIP_SGIX = 0x83EE,
		VERTEX_PROGRAM_ARB = 0x8620,
		VERTEX_PROGRAM_BINDING_NV = 0x864A,
		VERTEX_PROGRAM_CALLBACK_DATA_MESA = 0x8BB7,
		VERTEX_PROGRAM_CALLBACK_FUNC_MESA = 0x8BB6,
		VERTEX_PROGRAM_CALLBACK_MESA = 0x8BB4,
		VERTEX_PROGRAM_NV = 0x8620,
		VERTEX_PROGRAM_PARAMETER_BUFFER_NV = 0x8DA2,
		VERTEX_PROGRAM_POINT_SIZE = 0x8642,
		VERTEX_PROGRAM_POINT_SIZE_ARB = 0x8642,
		VERTEX_PROGRAM_POINT_SIZE_NV = 0x8642,
		VERTEX_PROGRAM_POSITION_MESA = 0x8BB4,
		VERTEX_PROGRAM_TWO_SIDE = 0x8643,
		VERTEX_PROGRAM_TWO_SIDE_ARB = 0x8643,
		VERTEX_PROGRAM_TWO_SIDE_NV = 0x8643,
		VERTEX_SHADER = 0x8B31,
		VERTEX_SHADER_ARB = 0x8B31,
		VERTEX_SHADER_BINDING_EXT = 0x8781,
		VERTEX_SHADER_EXT = 0x8780,
		VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87CF,
		VERTEX_SHADER_INVARIANTS_EXT = 0x87D1,
		VERTEX_SHADER_LOCALS_EXT = 0x87D3,
		VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87D2,
		VERTEX_SHADER_OPTIMIZED_EXT = 0x87D4,
		VERTEX_SHADER_VARIANTS_EXT = 0x87D0,
		VERTEX_SOURCE_ATI = 0x8774,
		VERTEX_STATE_PROGRAM_NV = 0x8621,
		VERTEX_STREAM0_ATI = 0x876C,
		VERTEX_STREAM1_ATI = 0x876D,
		VERTEX_STREAM2_ATI = 0x876E,
		VERTEX_STREAM3_ATI = 0x876F,
		VERTEX_STREAM4_ATI = 0x8770,
		VERTEX_STREAM5_ATI = 0x8771,
		VERTEX_STREAM6_ATI = 0x8772,
		VERTEX_STREAM7_ATI = 0x8773,
		VERTEX_WEIGHTING_EXT = 0x8509,
		VERTEX_WEIGHT_ARRAY_EXT = 0x850C,
		VERTEX_WEIGHT_ARRAY_POINTER_EXT = 0x8510,
		VERTEX_WEIGHT_ARRAY_SIZE_EXT = 0x850D,
		VERTEX_WEIGHT_ARRAY_STRIDE_EXT = 0x850F,
		VERTEX_WEIGHT_ARRAY_TYPE_EXT = 0x850E,
		VIBRANCE_BIAS_NV = 0x8719,
		VIBRANCE_SCALE_NV = 0x8713,
		VIEWPORT = 0x0BA2,
		VIEWPORT_BIT = 0x00000800,
		VOLATILE_APPLE = 0x8A1A,
		WAIT_FAILED = 0x911D,
		WEIGHT_ARRAY_ARB = 0x86AD,
		WEIGHT_ARRAY_BUFFER_BINDING = 0x889E,
		WEIGHT_ARRAY_BUFFER_BINDING_ARB = 0x889E,
		WEIGHT_ARRAY_BUFFER_BINDING_OES = 0x889E,
		WEIGHT_ARRAY_OES = 0x86AD,
		WEIGHT_ARRAY_POINTER_ARB = 0x86AC,
		WEIGHT_ARRAY_POINTER_OES = 0x86AC,
		WEIGHT_ARRAY_SIZE_ARB = 0x86AB,
		WEIGHT_ARRAY_SIZE_OES = 0x86AB,
		WEIGHT_ARRAY_STRIDE_ARB = 0x86AA,
		WEIGHT_ARRAY_STRIDE_OES = 0x86AA,
		WEIGHT_ARRAY_TYPE_ARB = 0x86A9,
		WEIGHT_ARRAY_TYPE_OES = 0x86A9,
		WEIGHT_SUM_UNITY_ARB = 0x86A6,
		WRITEONLY_RENDERING_QCOM = 0x8823,
		WRITE_ONLY = 0x88B9,
		WRITE_ONLY_ARB = 0x88B9,
		WRITE_ONLY_OES = 0x88B9,
		WRITE_PIXEL_DATA_RANGE_LENGTH_NV = 0x887A,
		WRITE_PIXEL_DATA_RANGE_NV = 0x8878,
		WRITE_PIXEL_DATA_RANGE_POINTER_NV = 0x887C,
		W_EXT = 0x87D8,
		XOR = 0x1506,
		X_EXT = 0x87D5,
		YCBCR_422_APPLE = 0x85B9,
		YCBCR_MESA = 0x8757,
		YCRCBA_SGIX = 0x8319,
		YCRCB_422_SGIX = 0x81BB,
		YCRCB_444_SGIX = 0x81BC,
		YCRCB_SGIX = 0x8318,
		Y_EXT = 0x87D6,
		Z400_BINARY_AMD = 0x8740,
		ZERO = 0,
		ZERO_EXT = 0x87DD,
		ZOOM_X = 0x0D16,
		ZOOM_Y = 0x0D17,
		Z_EXT = 0x87D7,

	};

	template<typename FunctorT>
	void load(const FunctorT& Functor)
	{
		Functor("glAccum", Accum);
		Functor("glActiveProgramEXT", ActiveProgramEXT);
		Functor("glActiveStencilFaceEXT", ActiveStencilFaceEXT);
		Functor("glActiveTexture", ActiveTexture);
		Functor("glActiveTextureARB", ActiveTextureARB);
		Functor("glActiveVaryingNV", ActiveVaryingNV);
		Functor("glAlphaFragmentOp1ATI", AlphaFragmentOp1ATI);
		Functor("glAlphaFragmentOp2ATI", AlphaFragmentOp2ATI);
		Functor("glAlphaFragmentOp3ATI", AlphaFragmentOp3ATI);
		Functor("glAlphaFunc", AlphaFunc);
		Functor("glApplyTextureEXT", ApplyTextureEXT);
		Functor("glAreProgramsResidentNV", AreProgramsResidentNV);
		Functor("glAreTexturesResident", AreTexturesResident);
		Functor("glAreTexturesResidentEXT", AreTexturesResidentEXT);
		Functor("glArrayElement", ArrayElement);
		Functor("glArrayElementEXT", ArrayElementEXT);
		Functor("glArrayObjectATI", ArrayObjectATI);
		Functor("glAsyncMarkerSGIX", AsyncMarkerSGIX);
		Functor("glAttachObjectARB", AttachObjectARB);
		Functor("glAttachShader", AttachShader);
		Functor("glBegin", Begin);
		Functor("glBeginConditionalRender", BeginConditionalRender);
		Functor("glBeginConditionalRenderNV", BeginConditionalRenderNV);
		Functor("glBeginFragmentShaderATI", BeginFragmentShaderATI);
		Functor("glBeginOcclusionQueryNV", BeginOcclusionQueryNV);
		Functor("glBeginPerfMonitorAMD", BeginPerfMonitorAMD);
		Functor("glBeginQuery", BeginQuery);
		Functor("glBeginQueryARB", BeginQueryARB);
		Functor("glBeginQueryIndexed", BeginQueryIndexed);
		Functor("glBeginTransformFeedback", BeginTransformFeedback);
		Functor("glBeginTransformFeedbackEXT", BeginTransformFeedbackEXT);
		Functor("glBeginTransformFeedbackNV", BeginTransformFeedbackNV);
		Functor("glBeginVertexShaderEXT", BeginVertexShaderEXT);
		Functor("glBeginVideoCaptureNV", BeginVideoCaptureNV);
		Functor("glBindAttribLocation", BindAttribLocation);
		Functor("glBindAttribLocationARB", BindAttribLocationARB);
		Functor("glBindBuffer", BindBuffer);
		Functor("glBindBufferARB", BindBufferARB);
		Functor("glBindBufferBase", BindBufferBase);
		Functor("glBindBufferBaseEXT", BindBufferBaseEXT);
		Functor("glBindBufferBaseNV", BindBufferBaseNV);
		Functor("glBindBufferOffsetEXT", BindBufferOffsetEXT);
		Functor("glBindBufferOffsetNV", BindBufferOffsetNV);
		Functor("glBindBufferRange", BindBufferRange);
		Functor("glBindBufferRangeEXT", BindBufferRangeEXT);
		Functor("glBindBufferRangeNV", BindBufferRangeNV);
		Functor("glBindFragDataLocation", BindFragDataLocation);
		Functor("glBindFragDataLocationEXT", BindFragDataLocationEXT);
		Functor("glBindFragDataLocationIndexed", BindFragDataLocationIndexed);
		Functor("glBindFragmentShaderATI", BindFragmentShaderATI);
		Functor("glBindFramebuffer", BindFramebuffer);
		Functor("glBindFramebufferEXT", BindFramebufferEXT);
		Functor("glBindLightParameterEXT", BindLightParameterEXT);
		Functor("glBindMaterialParameterEXT", BindMaterialParameterEXT);
		Functor("glBindMultiTextureEXT", BindMultiTextureEXT);
		Functor("glBindParameterEXT", BindParameterEXT);
		Functor("glBindProgramARB", BindProgramARB);
		Functor("glBindProgramNV", BindProgramNV);
		Functor("glBindRenderbuffer", BindRenderbuffer);
		Functor("glBindRenderbufferEXT", BindRenderbufferEXT);
		Functor("glBindSampler", BindSampler);
		Functor("glBindTexGenParameterEXT", BindTexGenParameterEXT);
		Functor("glBindTexture", BindTexture);
		Functor("glBindTextureEXT", BindTextureEXT);
		Functor("glBindTextureUnitParameterEXT", BindTextureUnitParameterEXT);
		Functor("glBindTransformFeedback", BindTransformFeedback);
		Functor("glBindTransformFeedbackNV", BindTransformFeedbackNV);
		Functor("glBindVertexArray", BindVertexArray);
		Functor("glBindVertexArrayAPPLE", BindVertexArrayAPPLE);
		Functor("glBindVertexShaderEXT", BindVertexShaderEXT);
		Functor("glBindVideoCaptureStreamBufferNV", BindVideoCaptureStreamBufferNV);
		Functor("glBindVideoCaptureStreamTextureNV", BindVideoCaptureStreamTextureNV);
		Functor("glBinormal3bEXT", Binormal3bEXT);
		Functor("glBinormal3bvEXT", Binormal3bvEXT);
		Functor("glBinormal3dEXT", Binormal3dEXT);
		Functor("glBinormal3dvEXT", Binormal3dvEXT);
		Functor("glBinormal3fEXT", Binormal3fEXT);
		Functor("glBinormal3fvEXT", Binormal3fvEXT);
		Functor("glBinormal3iEXT", Binormal3iEXT);
		Functor("glBinormal3ivEXT", Binormal3ivEXT);
		Functor("glBinormal3sEXT", Binormal3sEXT);
		Functor("glBinormal3svEXT", Binormal3svEXT);
		Functor("glBinormalPointerEXT", BinormalPointerEXT);
		Functor("glBitmap", Bitmap);
		Functor("glBlendColor", BlendColor);
		Functor("glBlendColorEXT", BlendColorEXT);
		Functor("glBlendEquation", BlendEquation);
		Functor("glBlendEquationEXT", BlendEquationEXT);
		Functor("glBlendEquationIndexedAMD", BlendEquationIndexedAMD);
		Functor("glBlendEquationSeparate", BlendEquationSeparate);
		Functor("glBlendEquationSeparateEXT", BlendEquationSeparateEXT);
		Functor("glBlendEquationSeparateIndexedAMD", BlendEquationSeparateIndexedAMD);
		Functor("glBlendEquationSeparatei", BlendEquationSeparatei);
		Functor("glBlendEquationi", BlendEquationi);
		Functor("glBlendFunc", BlendFunc);
		Functor("glBlendFuncIndexedAMD", BlendFuncIndexedAMD);
		Functor("glBlendFuncSeparate", BlendFuncSeparate);
		Functor("glBlendFuncSeparateEXT", BlendFuncSeparateEXT);
		Functor("glBlendFuncSeparateINGR", BlendFuncSeparateINGR);
		Functor("glBlendFuncSeparateIndexedAMD", BlendFuncSeparateIndexedAMD);
		Functor("glBlendFuncSeparatei", BlendFuncSeparatei);
		Functor("glBlendFunci", BlendFunci);
		Functor("glBlitFramebuffer", BlitFramebuffer);
		Functor("glBlitFramebufferEXT", BlitFramebufferEXT);
		Functor("glBufferAddressRangeNV", BufferAddressRangeNV);
		Functor("glBufferData", BufferData);
		Functor("glBufferDataARB", BufferDataARB);
		Functor("glBufferParameteriAPPLE", BufferParameteriAPPLE);
		Functor("glBufferSubData", BufferSubData);
		Functor("glBufferSubDataARB", BufferSubDataARB);
		Functor("glCallList", CallList);
		Functor("glCallLists", CallLists);
		Functor("glCheckFramebufferStatus", CheckFramebufferStatus);
		Functor("glCheckFramebufferStatusEXT", CheckFramebufferStatusEXT);
		Functor("glCheckNamedFramebufferStatusEXT", CheckNamedFramebufferStatusEXT);
		Functor("glClampColor", ClampColor);
		Functor("glClampColorARB", ClampColorARB);
		Functor("glClear", Clear);
		Functor("glClearAccum", ClearAccum);
		Functor("glClearBufferfi", ClearBufferfi);
		Functor("glClearBufferfv", ClearBufferfv);
		Functor("glClearBufferiv", ClearBufferiv);
		Functor("glClearBufferuiv", ClearBufferuiv);
		Functor("glClearColor", ClearColor);
		Functor("glClearColorIiEXT", ClearColorIiEXT);
		Functor("glClearColorIuiEXT", ClearColorIuiEXT);
		Functor("glClearDepth", ClearDepth);
		Functor("glClearDepthdNV", ClearDepthdNV);
		Functor("glClearIndex", ClearIndex);
		Functor("glClearStencil", ClearStencil);
		Functor("glClientActiveTexture", ClientActiveTexture);
		Functor("glClientActiveTextureARB", ClientActiveTextureARB);
		Functor("glClientActiveVertexStreamATI", ClientActiveVertexStreamATI);
		Functor("glClientAttribDefaultEXT", ClientAttribDefaultEXT);
		Functor("glClientWaitSync", ClientWaitSync);
		Functor("glClipPlane", ClipPlane);
		Functor("glColor3b", Color3b);
		Functor("glColor3bv", Color3bv);
		Functor("glColor3d", Color3d);
		Functor("glColor3dv", Color3dv);
		Functor("glColor3f", Color3f);
		Functor("glColor3fVertex3fSUN", Color3fVertex3fSUN);
		Functor("glColor3fVertex3fvSUN", Color3fVertex3fvSUN);
		Functor("glColor3fv", Color3fv);
		Functor("glColor3hNV", Color3hNV);
		Functor("glColor3hvNV", Color3hvNV);
		Functor("glColor3i", Color3i);
		Functor("glColor3iv", Color3iv);
		Functor("glColor3s", Color3s);
		Functor("glColor3sv", Color3sv);
		Functor("glColor3ub", Color3ub);
		Functor("glColor3ubv", Color3ubv);
		Functor("glColor3ui", Color3ui);
		Functor("glColor3uiv", Color3uiv);
		Functor("glColor3us", Color3us);
		Functor("glColor3usv", Color3usv);
		Functor("glColor4b", Color4b);
		Functor("glColor4bv", Color4bv);
		Functor("glColor4d", Color4d);
		Functor("glColor4dv", Color4dv);
		Functor("glColor4f", Color4f);
		Functor("glColor4fNormal3fVertex3fSUN", Color4fNormal3fVertex3fSUN);
		Functor("glColor4fNormal3fVertex3fvSUN", Color4fNormal3fVertex3fvSUN);
		Functor("glColor4fv", Color4fv);
		Functor("glColor4hNV", Color4hNV);
		Functor("glColor4hvNV", Color4hvNV);
		Functor("glColor4i", Color4i);
		Functor("glColor4iv", Color4iv);
		Functor("glColor4s", Color4s);
		Functor("glColor4sv", Color4sv);
		Functor("glColor4ub", Color4ub);
		Functor("glColor4ubVertex2fSUN", Color4ubVertex2fSUN);
		Functor("glColor4ubVertex2fvSUN", Color4ubVertex2fvSUN);
		Functor("glColor4ubVertex3fSUN", Color4ubVertex3fSUN);
		Functor("glColor4ubVertex3fvSUN", Color4ubVertex3fvSUN);
		Functor("glColor4ubv", Color4ubv);
		Functor("glColor4ui", Color4ui);
		Functor("glColor4uiv", Color4uiv);
		Functor("glColor4us", Color4us);
		Functor("glColor4usv", Color4usv);
		Functor("glColorFormatNV", ColorFormatNV);
		Functor("glColorFragmentOp1ATI", ColorFragmentOp1ATI);
		Functor("glColorFragmentOp2ATI", ColorFragmentOp2ATI);
		Functor("glColorFragmentOp3ATI", ColorFragmentOp3ATI);
		Functor("glColorMask", ColorMask);
		Functor("glColorMaskIndexedEXT", ColorMaskIndexedEXT);
		Functor("glColorMaski", ColorMaski);
		Functor("glColorMaterial", ColorMaterial);
		Functor("glColorP3ui", ColorP3ui);
		Functor("glColorP3uiv", ColorP3uiv);
		Functor("glColorP4ui", ColorP4ui);
		Functor("glColorP4uiv", ColorP4uiv);
		Functor("glColorPointer", ColorPointer);
		Functor("glColorPointerEXT", ColorPointerEXT);
		Functor("glColorPointerListIBM", ColorPointerListIBM);
		Functor("glColorPointervINTEL", ColorPointervINTEL);
		Functor("glColorSubTable", ColorSubTable);
		Functor("glColorSubTableEXT", ColorSubTableEXT);
		Functor("glColorTable", ColorTable);
		Functor("glColorTableEXT", ColorTableEXT);
		Functor("glColorTableParameterfv", ColorTableParameterfv);
		Functor("glColorTableParameterfvSGI", ColorTableParameterfvSGI);
		Functor("glColorTableParameteriv", ColorTableParameteriv);
		Functor("glColorTableParameterivSGI", ColorTableParameterivSGI);
		Functor("glColorTableSGI", ColorTableSGI);
		Functor("glCombinerInputNV", CombinerInputNV);
		Functor("glCombinerOutputNV", CombinerOutputNV);
		Functor("glCombinerParameterfNV", CombinerParameterfNV);
		Functor("glCombinerParameterfvNV", CombinerParameterfvNV);
		Functor("glCombinerParameteriNV", CombinerParameteriNV);
		Functor("glCombinerParameterivNV", CombinerParameterivNV);
		Functor("glCombinerStageParameterfvNV", CombinerStageParameterfvNV);
		Functor("glCompileShader", CompileShader);
		Functor("glCompileShaderARB", CompileShaderARB);
		Functor("glCompileShaderIncludeARB", CompileShaderIncludeARB);
		Functor("glCompressedMultiTexImage1DEXT", CompressedMultiTexImage1DEXT);
		Functor("glCompressedMultiTexImage2DEXT", CompressedMultiTexImage2DEXT);
		Functor("glCompressedMultiTexImage3DEXT", CompressedMultiTexImage3DEXT);
		Functor("glCompressedMultiTexSubImage1DEXT", CompressedMultiTexSubImage1DEXT);
		Functor("glCompressedMultiTexSubImage2DEXT", CompressedMultiTexSubImage2DEXT);
		Functor("glCompressedMultiTexSubImage3DEXT", CompressedMultiTexSubImage3DEXT);
		Functor("glCompressedTexImage1D", CompressedTexImage1D);
		Functor("glCompressedTexImage1DARB", CompressedTexImage1DARB);
		Functor("glCompressedTexImage2D", CompressedTexImage2D);
		Functor("glCompressedTexImage2DARB", CompressedTexImage2DARB);
		Functor("glCompressedTexImage3D", CompressedTexImage3D);
		Functor("glCompressedTexImage3DARB", CompressedTexImage3DARB);
		Functor("glCompressedTexSubImage1D", CompressedTexSubImage1D);
		Functor("glCompressedTexSubImage1DARB", CompressedTexSubImage1DARB);
		Functor("glCompressedTexSubImage2D", CompressedTexSubImage2D);
		Functor("glCompressedTexSubImage2DARB", CompressedTexSubImage2DARB);
		Functor("glCompressedTexSubImage3D", CompressedTexSubImage3D);
		Functor("glCompressedTexSubImage3DARB", CompressedTexSubImage3DARB);
		Functor("glCompressedTextureImage1DEXT", CompressedTextureImage1DEXT);
		Functor("glCompressedTextureImage2DEXT", CompressedTextureImage2DEXT);
		Functor("glCompressedTextureImage3DEXT", CompressedTextureImage3DEXT);
		Functor("glCompressedTextureSubImage1DEXT", CompressedTextureSubImage1DEXT);
		Functor("glCompressedTextureSubImage2DEXT", CompressedTextureSubImage2DEXT);
		Functor("glCompressedTextureSubImage3DEXT", CompressedTextureSubImage3DEXT);
		Functor("glConvolutionFilter1D", ConvolutionFilter1D);
		Functor("glConvolutionFilter1DEXT", ConvolutionFilter1DEXT);
		Functor("glConvolutionFilter2D", ConvolutionFilter2D);
		Functor("glConvolutionFilter2DEXT", ConvolutionFilter2DEXT);
		Functor("glConvolutionParameterf", ConvolutionParameterf);
		Functor("glConvolutionParameterfEXT", ConvolutionParameterfEXT);
		Functor("glConvolutionParameterfv", ConvolutionParameterfv);
		Functor("glConvolutionParameterfvEXT", ConvolutionParameterfvEXT);
		Functor("glConvolutionParameteri", ConvolutionParameteri);
		Functor("glConvolutionParameteriEXT", ConvolutionParameteriEXT);
		Functor("glConvolutionParameteriv", ConvolutionParameteriv);
		Functor("glConvolutionParameterivEXT", ConvolutionParameterivEXT);
		Functor("glCopyBufferSubData", CopyBufferSubData);
		Functor("glCopyColorSubTable", CopyColorSubTable);
		Functor("glCopyColorSubTableEXT", CopyColorSubTableEXT);
		Functor("glCopyColorTable", CopyColorTable);
		Functor("glCopyColorTableSGI", CopyColorTableSGI);
		Functor("glCopyConvolutionFilter1D", CopyConvolutionFilter1D);
		Functor("glCopyConvolutionFilter1DEXT", CopyConvolutionFilter1DEXT);
		Functor("glCopyConvolutionFilter2D", CopyConvolutionFilter2D);
		Functor("glCopyConvolutionFilter2DEXT", CopyConvolutionFilter2DEXT);
		Functor("glCopyImageSubDataNV", CopyImageSubDataNV);
		Functor("glCopyMultiTexImage1DEXT", CopyMultiTexImage1DEXT);
		Functor("glCopyMultiTexImage2DEXT", CopyMultiTexImage2DEXT);
		Functor("glCopyMultiTexSubImage1DEXT", CopyMultiTexSubImage1DEXT);
		Functor("glCopyMultiTexSubImage2DEXT", CopyMultiTexSubImage2DEXT);
		Functor("glCopyMultiTexSubImage3DEXT", CopyMultiTexSubImage3DEXT);
		Functor("glCopyPixels", CopyPixels);
		Functor("glCopyTexImage1D", CopyTexImage1D);
		Functor("glCopyTexImage1DEXT", CopyTexImage1DEXT);
		Functor("glCopyTexImage2D", CopyTexImage2D);
		Functor("glCopyTexImage2DEXT", CopyTexImage2DEXT);
		Functor("glCopyTexSubImage1D", CopyTexSubImage1D);
		Functor("glCopyTexSubImage1DEXT", CopyTexSubImage1DEXT);
		Functor("glCopyTexSubImage2D", CopyTexSubImage2D);
		Functor("glCopyTexSubImage2DEXT", CopyTexSubImage2DEXT);
		Functor("glCopyTexSubImage3D", CopyTexSubImage3D);
		Functor("glCopyTexSubImage3DEXT", CopyTexSubImage3DEXT);
		Functor("glCopyTextureImage1DEXT", CopyTextureImage1DEXT);
		Functor("glCopyTextureImage2DEXT", CopyTextureImage2DEXT);
		Functor("glCopyTextureSubImage1DEXT", CopyTextureSubImage1DEXT);
		Functor("glCopyTextureSubImage2DEXT", CopyTextureSubImage2DEXT);
		Functor("glCopyTextureSubImage3DEXT", CopyTextureSubImage3DEXT);
		Functor("glCreateProgram", CreateProgram);
		Functor("glCreateProgramObjectARB", CreateProgramObjectARB);
		Functor("glCreateShader", CreateShader);
		Functor("glCreateShaderObjectARB", CreateShaderObjectARB);
		Functor("glCreateShaderProgramEXT", CreateShaderProgramEXT);
		Functor("glCullFace", CullFace);
		Functor("glCullParameterdvEXT", CullParameterdvEXT);
		Functor("glCullParameterfvEXT", CullParameterfvEXT);
		Functor("glCurrentPaletteMatrixARB", CurrentPaletteMatrixARB);
		Functor("glDeformSGIX", DeformSGIX);
		Functor("glDeformationMap3dSGIX", DeformationMap3dSGIX);
		Functor("glDeformationMap3fSGIX", DeformationMap3fSGIX);
		Functor("glDeleteAsyncMarkersSGIX", DeleteAsyncMarkersSGIX);
		Functor("glDeleteBuffers", DeleteBuffers);
		Functor("glDeleteBuffersARB", DeleteBuffersARB);
		Functor("glDeleteFencesAPPLE", DeleteFencesAPPLE);
		Functor("glDeleteFencesNV", DeleteFencesNV);
		Functor("glDeleteFragmentShaderATI", DeleteFragmentShaderATI);
		Functor("glDeleteFramebuffers", DeleteFramebuffers);
		Functor("glDeleteFramebuffersEXT", DeleteFramebuffersEXT);
		Functor("glDeleteLists", DeleteLists);
		Functor("glDeleteNamedStringARB", DeleteNamedStringARB);
		Functor("glDeleteObjectARB", DeleteObjectARB);
		Functor("glDeleteOcclusionQueriesNV", DeleteOcclusionQueriesNV);
		Functor("glDeletePerfMonitorsAMD", DeletePerfMonitorsAMD);
		Functor("glDeleteProgram", DeleteProgram);
		Functor("glDeleteProgramsARB", DeleteProgramsARB);
		Functor("glDeleteProgramsNV", DeleteProgramsNV);
		Functor("glDeleteQueries", DeleteQueries);
		Functor("glDeleteQueriesARB", DeleteQueriesARB);
		Functor("glDeleteRenderbuffers", DeleteRenderbuffers);
		Functor("glDeleteRenderbuffersEXT", DeleteRenderbuffersEXT);
		Functor("glDeleteSamplers", DeleteSamplers);
		Functor("glDeleteShader", DeleteShader);
		Functor("glDeleteSync", DeleteSync);
		Functor("glDeleteTextures", DeleteTextures);
		Functor("glDeleteTexturesEXT", DeleteTexturesEXT);
		Functor("glDeleteTransformFeedbacks", DeleteTransformFeedbacks);
		Functor("glDeleteTransformFeedbacksNV", DeleteTransformFeedbacksNV);
		Functor("glDeleteVertexArrays", DeleteVertexArrays);
		Functor("glDeleteVertexArraysAPPLE", DeleteVertexArraysAPPLE);
		Functor("glDeleteVertexShaderEXT", DeleteVertexShaderEXT);
		Functor("glDepthBoundsEXT", DepthBoundsEXT);
		Functor("glDepthBoundsdNV", DepthBoundsdNV);
		Functor("glDepthFunc", DepthFunc);
		Functor("glDepthMask", DepthMask);
		Functor("glDepthRange", DepthRange);
		Functor("glDepthRangedNV", DepthRangedNV);
		Functor("glDetachObjectARB", DetachObjectARB);
		Functor("glDetachShader", DetachShader);
		Functor("glDetailTexFuncSGIS", DetailTexFuncSGIS);
		Functor("glDisable", Disable);
		Functor("glDisableClientState", DisableClientState);
		Functor("glDisableClientStateIndexedEXT", DisableClientStateIndexedEXT);
		Functor("glDisableIndexedEXT", DisableIndexedEXT);
		Functor("glDisableVariantClientStateEXT", DisableVariantClientStateEXT);
		Functor("glDisableVertexAttribAPPLE", DisableVertexAttribAPPLE);
		Functor("glDisableVertexAttribArray", DisableVertexAttribArray);
		Functor("glDisableVertexAttribArrayARB", DisableVertexAttribArrayARB);
		Functor("glDisablei", Disablei);
		Functor("glDrawArrays", DrawArrays);
		Functor("glDrawArraysEXT", DrawArraysEXT);
		Functor("glDrawArraysIndirect", DrawArraysIndirect);
		Functor("glDrawArraysInstanced", DrawArraysInstanced);
		Functor("glDrawArraysInstancedARB", DrawArraysInstancedARB);
		Functor("glDrawArraysInstancedEXT", DrawArraysInstancedEXT);
		Functor("glDrawBuffer", DrawBuffer);
		Functor("glDrawBuffers", DrawBuffers);
		Functor("glDrawBuffersARB", DrawBuffersARB);
		Functor("glDrawBuffersATI", DrawBuffersATI);
		Functor("glDrawElementArrayAPPLE", DrawElementArrayAPPLE);
		Functor("glDrawElementArrayATI", DrawElementArrayATI);
		Functor("glDrawElements", DrawElements);
		Functor("glDrawElementsBaseVertex", DrawElementsBaseVertex);
		Functor("glDrawElementsIndirect", DrawElementsIndirect);
		Functor("glDrawElementsInstanced", DrawElementsInstanced);
		Functor("glDrawElementsInstancedARB", DrawElementsInstancedARB);
		Functor("glDrawElementsInstancedBaseVertex", DrawElementsInstancedBaseVertex);
		Functor("glDrawElementsInstancedEXT", DrawElementsInstancedEXT);
		Functor("glDrawMeshArraysSUN", DrawMeshArraysSUN);
		Functor("glDrawPixels", DrawPixels);
		Functor("glDrawRangeElementArrayAPPLE", DrawRangeElementArrayAPPLE);
		Functor("glDrawRangeElementArrayATI", DrawRangeElementArrayATI);
		Functor("glDrawRangeElements", DrawRangeElements);
		Functor("glDrawRangeElementsBaseVertex", DrawRangeElementsBaseVertex);
		Functor("glDrawRangeElementsEXT", DrawRangeElementsEXT);
		Functor("glDrawTransformFeedback", DrawTransformFeedback);
		Functor("glDrawTransformFeedbackNV", DrawTransformFeedbackNV);
		Functor("glDrawTransformFeedbackStream", DrawTransformFeedbackStream);
		Functor("glEdgeFlag", EdgeFlag);
		Functor("glEdgeFlagFormatNV", EdgeFlagFormatNV);
		Functor("glEdgeFlagPointer", EdgeFlagPointer);
		Functor("glEdgeFlagPointerEXT", EdgeFlagPointerEXT);
		Functor("glEdgeFlagPointerListIBM", EdgeFlagPointerListIBM);
		Functor("glEdgeFlagv", EdgeFlagv);
		Functor("glElementPointerAPPLE", ElementPointerAPPLE);
		Functor("glElementPointerATI", ElementPointerATI);
		Functor("glEnable", Enable);
		Functor("glEnableClientState", EnableClientState);
		Functor("glEnableClientStateIndexedEXT", EnableClientStateIndexedEXT);
		Functor("glEnableIndexedEXT", EnableIndexedEXT);
		Functor("glEnableVariantClientStateEXT", EnableVariantClientStateEXT);
		Functor("glEnableVertexAttribAPPLE", EnableVertexAttribAPPLE);
		Functor("glEnableVertexAttribArray", EnableVertexAttribArray);
		Functor("glEnableVertexAttribArrayARB", EnableVertexAttribArrayARB);
		Functor("glEnablei", Enablei);
		Functor("glEnd", End);
		Functor("glEndConditionalRender", EndConditionalRender);
		Functor("glEndConditionalRenderNV", EndConditionalRenderNV);
		Functor("glEndFragmentShaderATI", EndFragmentShaderATI);
		Functor("glEndList", EndList);
		Functor("glEndOcclusionQueryNV", EndOcclusionQueryNV);
		Functor("glEndPerfMonitorAMD", EndPerfMonitorAMD);
		Functor("glEndQuery", EndQuery);
		Functor("glEndQueryARB", EndQueryARB);
		Functor("glEndQueryIndexed", EndQueryIndexed);
		Functor("glEndTransformFeedback", EndTransformFeedback);
		Functor("glEndTransformFeedbackEXT", EndTransformFeedbackEXT);
		Functor("glEndTransformFeedbackNV", EndTransformFeedbackNV);
		Functor("glEndVertexShaderEXT", EndVertexShaderEXT);
		Functor("glEndVideoCaptureNV", EndVideoCaptureNV);
		Functor("glEvalCoord1d", EvalCoord1d);
		Functor("glEvalCoord1dv", EvalCoord1dv);
		Functor("glEvalCoord1f", EvalCoord1f);
		Functor("glEvalCoord1fv", EvalCoord1fv);
		Functor("glEvalCoord2d", EvalCoord2d);
		Functor("glEvalCoord2dv", EvalCoord2dv);
		Functor("glEvalCoord2f", EvalCoord2f);
		Functor("glEvalCoord2fv", EvalCoord2fv);
		Functor("glEvalMapsNV", EvalMapsNV);
		Functor("glEvalMesh1", EvalMesh1);
		Functor("glEvalMesh2", EvalMesh2);
		Functor("glEvalPoint1", EvalPoint1);
		Functor("glEvalPoint2", EvalPoint2);
		Functor("glExecuteProgramNV", ExecuteProgramNV);
		Functor("glExtractComponentEXT", ExtractComponentEXT);
		Functor("glFeedbackBuffer", FeedbackBuffer);
		Functor("glFenceSync", FenceSync);
		Functor("glFinalCombinerInputNV", FinalCombinerInputNV);
		Functor("glFinish", Finish);
		Functor("glFinishAsyncSGIX", FinishAsyncSGIX);
		Functor("glFinishFenceAPPLE", FinishFenceAPPLE);
		Functor("glFinishFenceNV", FinishFenceNV);
		Functor("glFinishObjectAPPLE", FinishObjectAPPLE);
		Functor("glFinishTextureSUNX", FinishTextureSUNX);
		Functor("glFlush", Flush);
		Functor("glFlushMappedBufferRange", FlushMappedBufferRange);
		Functor("glFlushMappedBufferRangeAPPLE", FlushMappedBufferRangeAPPLE);
		Functor("glFlushPixelDataRangeNV", FlushPixelDataRangeNV);
		Functor("glFlushRasterSGIX", FlushRasterSGIX);
		Functor("glFlushVertexArrayRangeAPPLE", FlushVertexArrayRangeAPPLE);
		Functor("glFlushVertexArrayRangeNV", FlushVertexArrayRangeNV);
		Functor("glFogCoordFormatNV", FogCoordFormatNV);
		Functor("glFogCoordPointer", FogCoordPointer);
		Functor("glFogCoordPointerEXT", FogCoordPointerEXT);
		Functor("glFogCoordPointerListIBM", FogCoordPointerListIBM);
		Functor("glFogCoordd", FogCoordd);
		Functor("glFogCoorddEXT", FogCoorddEXT);
		Functor("glFogCoorddv", FogCoorddv);
		Functor("glFogCoorddvEXT", FogCoorddvEXT);
		Functor("glFogCoordf", FogCoordf);
		Functor("glFogCoordfEXT", FogCoordfEXT);
		Functor("glFogCoordfv", FogCoordfv);
		Functor("glFogCoordfvEXT", FogCoordfvEXT);
		Functor("glFogCoordhNV", FogCoordhNV);
		Functor("glFogCoordhvNV", FogCoordhvNV);
		Functor("glFogFuncSGIS", FogFuncSGIS);
		Functor("glFogf", Fogf);
		Functor("glFogfv", Fogfv);
		Functor("glFogi", Fogi);
		Functor("glFogiv", Fogiv);
		Functor("glFragmentColorMaterialSGIX", FragmentColorMaterialSGIX);
		Functor("glFragmentLightModelfSGIX", FragmentLightModelfSGIX);
		Functor("glFragmentLightModelfvSGIX", FragmentLightModelfvSGIX);
		Functor("glFragmentLightModeliSGIX", FragmentLightModeliSGIX);
		Functor("glFragmentLightModelivSGIX", FragmentLightModelivSGIX);
		Functor("glFragmentLightfSGIX", FragmentLightfSGIX);
		Functor("glFragmentLightfvSGIX", FragmentLightfvSGIX);
		Functor("glFragmentLightiSGIX", FragmentLightiSGIX);
		Functor("glFragmentLightivSGIX", FragmentLightivSGIX);
		Functor("glFragmentMaterialfSGIX", FragmentMaterialfSGIX);
		Functor("glFragmentMaterialfvSGIX", FragmentMaterialfvSGIX);
		Functor("glFragmentMaterialiSGIX", FragmentMaterialiSGIX);
		Functor("glFragmentMaterialivSGIX", FragmentMaterialivSGIX);
		Functor("glFrameTerminatorGREMEDY", FrameTerminatorGREMEDY);
		Functor("glFrameZoomSGIX", FrameZoomSGIX);
		Functor("glFramebufferDrawBufferEXT", FramebufferDrawBufferEXT);
		Functor("glFramebufferDrawBuffersEXT", FramebufferDrawBuffersEXT);
		Functor("glFramebufferReadBufferEXT", FramebufferReadBufferEXT);
		Functor("glFramebufferRenderbuffer", FramebufferRenderbuffer);
		Functor("glFramebufferRenderbufferEXT", FramebufferRenderbufferEXT);
		Functor("glFramebufferTexture", FramebufferTexture);
		Functor("glFramebufferTexture1D", FramebufferTexture1D);
		Functor("glFramebufferTexture1DEXT", FramebufferTexture1DEXT);
		Functor("glFramebufferTexture2D", FramebufferTexture2D);
		Functor("glFramebufferTexture2DEXT", FramebufferTexture2DEXT);
		Functor("glFramebufferTexture3D", FramebufferTexture3D);
		Functor("glFramebufferTexture3DEXT", FramebufferTexture3DEXT);
		Functor("glFramebufferTextureARB", FramebufferTextureARB);
		Functor("glFramebufferTextureEXT", FramebufferTextureEXT);
		Functor("glFramebufferTextureFaceARB", FramebufferTextureFaceARB);
		Functor("glFramebufferTextureFaceEXT", FramebufferTextureFaceEXT);
		Functor("glFramebufferTextureLayer", FramebufferTextureLayer);
		Functor("glFramebufferTextureLayerARB", FramebufferTextureLayerARB);
		Functor("glFramebufferTextureLayerEXT", FramebufferTextureLayerEXT);
		Functor("glFreeObjectBufferATI", FreeObjectBufferATI);
		Functor("glFrontFace", FrontFace);
		Functor("glFrustum", Frustum);
		Functor("glGenAsyncMarkersSGIX", GenAsyncMarkersSGIX);
		Functor("glGenBuffers", GenBuffers);
		Functor("glGenBuffersARB", GenBuffersARB);
		Functor("glGenFencesAPPLE", GenFencesAPPLE);
		Functor("glGenFencesNV", GenFencesNV);
		Functor("glGenFragmentShadersATI", GenFragmentShadersATI);
		Functor("glGenFramebuffers", GenFramebuffers);
		Functor("glGenFramebuffersEXT", GenFramebuffersEXT);
		Functor("glGenLists", GenLists);
		Functor("glGenOcclusionQueriesNV", GenOcclusionQueriesNV);
		Functor("glGenPerfMonitorsAMD", GenPerfMonitorsAMD);
		Functor("glGenProgramsARB", GenProgramsARB);
		Functor("glGenProgramsNV", GenProgramsNV);
		Functor("glGenQueries", GenQueries);
		Functor("glGenQueriesARB", GenQueriesARB);
		Functor("glGenRenderbuffers", GenRenderbuffers);
		Functor("glGenRenderbuffersEXT", GenRenderbuffersEXT);
		Functor("glGenSamplers", GenSamplers);
		Functor("glGenSymbolsEXT", GenSymbolsEXT);
		Functor("glGenTextures", GenTextures);
		Functor("glGenTexturesEXT", GenTexturesEXT);
		Functor("glGenTransformFeedbacks", GenTransformFeedbacks);
		Functor("glGenTransformFeedbacksNV", GenTransformFeedbacksNV);
		Functor("glGenVertexArrays", GenVertexArrays);
		Functor("glGenVertexArraysAPPLE", GenVertexArraysAPPLE);
		Functor("glGenVertexShadersEXT", GenVertexShadersEXT);
		Functor("glGenerateMipmap", GenerateMipmap);
		Functor("glGenerateMipmapEXT", GenerateMipmapEXT);
		Functor("glGenerateMultiTexMipmapEXT", GenerateMultiTexMipmapEXT);
		Functor("glGenerateTextureMipmapEXT", GenerateTextureMipmapEXT);
		Functor("glGetActiveAttrib", GetActiveAttrib);
		Functor("glGetActiveAttribARB", GetActiveAttribARB);
		Functor("glGetActiveSubroutineName", GetActiveSubroutineName);
		Functor("glGetActiveSubroutineUniformName", GetActiveSubroutineUniformName);
		Functor("glGetActiveSubroutineUniformiv", GetActiveSubroutineUniformiv);
		Functor("glGetActiveUniform", GetActiveUniform);
		Functor("glGetActiveUniformARB", GetActiveUniformARB);
		Functor("glGetActiveUniformBlockName", GetActiveUniformBlockName);
		Functor("glGetActiveUniformBlockiv", GetActiveUniformBlockiv);
		Functor("glGetActiveUniformName", GetActiveUniformName);
		Functor("glGetActiveUniformsiv", GetActiveUniformsiv);
		Functor("glGetActiveVaryingNV", GetActiveVaryingNV);
		Functor("glGetArrayObjectfvATI", GetArrayObjectfvATI);
		Functor("glGetArrayObjectivATI", GetArrayObjectivATI);
		Functor("glGetAttachedObjectsARB", GetAttachedObjectsARB);
		Functor("glGetAttachedShaders", GetAttachedShaders);
		Functor("glGetAttribLocation", GetAttribLocation);
		Functor("glGetAttribLocationARB", GetAttribLocationARB);
		Functor("glGetBooleanIndexedvEXT", GetBooleanIndexedvEXT);
		Functor("glGetBooleani_v", GetBooleani_v);
		Functor("glGetBooleanv", GetBooleanv);
		Functor("glGetBufferParameteri64v", GetBufferParameteri64v);
		Functor("glGetBufferParameteriv", GetBufferParameteriv);
		Functor("glGetBufferParameterivARB", GetBufferParameterivARB);
		Functor("glGetBufferParameterui64vNV", GetBufferParameterui64vNV);
		Functor("glGetBufferPointerv", GetBufferPointerv);
		Functor("glGetBufferPointervARB", GetBufferPointervARB);
		Functor("glGetBufferSubData", GetBufferSubData);
		Functor("glGetBufferSubDataARB", GetBufferSubDataARB);
		Functor("glGetClipPlane", GetClipPlane);
		Functor("glGetColorTable", GetColorTable);
		Functor("glGetColorTableEXT", GetColorTableEXT);
		Functor("glGetColorTableParameterfv", GetColorTableParameterfv);
		Functor("glGetColorTableParameterfvEXT", GetColorTableParameterfvEXT);
		Functor("glGetColorTableParameterfvSGI", GetColorTableParameterfvSGI);
		Functor("glGetColorTableParameteriv", GetColorTableParameteriv);
		Functor("glGetColorTableParameterivEXT", GetColorTableParameterivEXT);
		Functor("glGetColorTableParameterivSGI", GetColorTableParameterivSGI);
		Functor("glGetColorTableSGI", GetColorTableSGI);
		Functor("glGetCombinerInputParameterfvNV", GetCombinerInputParameterfvNV);
		Functor("glGetCombinerInputParameterivNV", GetCombinerInputParameterivNV);
		Functor("glGetCombinerOutputParameterfvNV", GetCombinerOutputParameterfvNV);
		Functor("glGetCombinerOutputParameterivNV", GetCombinerOutputParameterivNV);
		Functor("glGetCombinerStageParameterfvNV", GetCombinerStageParameterfvNV);
		Functor("glGetCompressedMultiTexImageEXT", GetCompressedMultiTexImageEXT);
		Functor("glGetCompressedTexImage", GetCompressedTexImage);
		Functor("glGetCompressedTexImageARB", GetCompressedTexImageARB);
		Functor("glGetCompressedTextureImageEXT", GetCompressedTextureImageEXT);
		Functor("glGetConvolutionFilter", GetConvolutionFilter);
		Functor("glGetConvolutionFilterEXT", GetConvolutionFilterEXT);
		Functor("glGetConvolutionParameterfv", GetConvolutionParameterfv);
		Functor("glGetConvolutionParameterfvEXT", GetConvolutionParameterfvEXT);
		Functor("glGetConvolutionParameteriv", GetConvolutionParameteriv);
		Functor("glGetConvolutionParameterivEXT", GetConvolutionParameterivEXT);
		Functor("glGetDetailTexFuncSGIS", GetDetailTexFuncSGIS);
		Functor("glGetDoubleIndexedvEXT", GetDoubleIndexedvEXT);
		Functor("glGetDoublev", GetDoublev);
		Functor("glGetError", GetError);
		Functor("glGetFenceivNV", GetFenceivNV);
		Functor("glGetFinalCombinerInputParameterfvNV", GetFinalCombinerInputParameterfvNV);
		Functor("glGetFinalCombinerInputParameterivNV", GetFinalCombinerInputParameterivNV);
		Functor("glGetFloatIndexedvEXT", GetFloatIndexedvEXT);
		Functor("glGetFloatv", GetFloatv);
		Functor("glGetFogFuncSGIS", GetFogFuncSGIS);
		Functor("glGetFragDataIndex", GetFragDataIndex);
		Functor("glGetFragDataLocation", GetFragDataLocation);
		Functor("glGetFragDataLocationEXT", GetFragDataLocationEXT);
		Functor("glGetFragmentLightfvSGIX", GetFragmentLightfvSGIX);
		Functor("glGetFragmentLightivSGIX", GetFragmentLightivSGIX);
		Functor("glGetFragmentMaterialfvSGIX", GetFragmentMaterialfvSGIX);
		Functor("glGetFragmentMaterialivSGIX", GetFragmentMaterialivSGIX);
		Functor("glGetFramebufferAttachmentParameteriv", GetFramebufferAttachmentParameteriv);
		Functor("glGetFramebufferAttachmentParameterivEXT", GetFramebufferAttachmentParameterivEXT);
		Functor("glGetFramebufferParameterivEXT", GetFramebufferParameterivEXT);
		Functor("glGetHandleARB", GetHandleARB);
		Functor("glGetHistogram", GetHistogram);
		Functor("glGetHistogramEXT", GetHistogramEXT);
		Functor("glGetHistogramParameterfv", GetHistogramParameterfv);
		Functor("glGetHistogramParameterfvEXT", GetHistogramParameterfvEXT);
		Functor("glGetHistogramParameteriv", GetHistogramParameteriv);
		Functor("glGetHistogramParameterivEXT", GetHistogramParameterivEXT);
		Functor("glGetImageTransformParameterfvHP", GetImageTransformParameterfvHP);
		Functor("glGetImageTransformParameterivHP", GetImageTransformParameterivHP);
		Functor("glGetInfoLogARB", GetInfoLogARB);
		Functor("glGetInstrumentsSGIX", GetInstrumentsSGIX);
		Functor("glGetInteger64i_v", GetInteger64i_v);
		Functor("glGetInteger64v", GetInteger64v);
		Functor("glGetIntegerIndexedvEXT", GetIntegerIndexedvEXT);
		Functor("glGetIntegeri_v", GetIntegeri_v);
		Functor("glGetIntegerui64i_vNV", GetIntegerui64i_vNV);
		Functor("glGetIntegerui64vNV", GetIntegerui64vNV);
		Functor("glGetIntegerv", GetIntegerv);
		Functor("glGetInvariantBooleanvEXT", GetInvariantBooleanvEXT);
		Functor("glGetInvariantFloatvEXT", GetInvariantFloatvEXT);
		Functor("glGetInvariantIntegervEXT", GetInvariantIntegervEXT);
		Functor("glGetLightfv", GetLightfv);
		Functor("glGetLightiv", GetLightiv);
		Functor("glGetListParameterfvSGIX", GetListParameterfvSGIX);
		Functor("glGetListParameterivSGIX", GetListParameterivSGIX);
		Functor("glGetLocalConstantBooleanvEXT", GetLocalConstantBooleanvEXT);
		Functor("glGetLocalConstantFloatvEXT", GetLocalConstantFloatvEXT);
		Functor("glGetLocalConstantIntegervEXT", GetLocalConstantIntegervEXT);
		Functor("glGetMapAttribParameterfvNV", GetMapAttribParameterfvNV);
		Functor("glGetMapAttribParameterivNV", GetMapAttribParameterivNV);
		Functor("glGetMapControlPointsNV", GetMapControlPointsNV);
		Functor("glGetMapParameterfvNV", GetMapParameterfvNV);
		Functor("glGetMapParameterivNV", GetMapParameterivNV);
		Functor("glGetMapdv", GetMapdv);
		Functor("glGetMapfv", GetMapfv);
		Functor("glGetMapiv", GetMapiv);
		Functor("glGetMaterialfv", GetMaterialfv);
		Functor("glGetMaterialiv", GetMaterialiv);
		Functor("glGetMinmax", GetMinmax);
		Functor("glGetMinmaxEXT", GetMinmaxEXT);
		Functor("glGetMinmaxParameterfv", GetMinmaxParameterfv);
		Functor("glGetMinmaxParameterfvEXT", GetMinmaxParameterfvEXT);
		Functor("glGetMinmaxParameteriv", GetMinmaxParameteriv);
		Functor("glGetMinmaxParameterivEXT", GetMinmaxParameterivEXT);
		Functor("glGetMultiTexEnvfvEXT", GetMultiTexEnvfvEXT);
		Functor("glGetMultiTexEnvivEXT", GetMultiTexEnvivEXT);
		Functor("glGetMultiTexGendvEXT", GetMultiTexGendvEXT);
		Functor("glGetMultiTexGenfvEXT", GetMultiTexGenfvEXT);
		Functor("glGetMultiTexGenivEXT", GetMultiTexGenivEXT);
		Functor("glGetMultiTexImageEXT", GetMultiTexImageEXT);
		Functor("glGetMultiTexLevelParameterfvEXT", GetMultiTexLevelParameterfvEXT);
		Functor("glGetMultiTexLevelParameterivEXT", GetMultiTexLevelParameterivEXT);
		Functor("glGetMultiTexParameterIivEXT", GetMultiTexParameterIivEXT);
		Functor("glGetMultiTexParameterIuivEXT", GetMultiTexParameterIuivEXT);
		Functor("glGetMultiTexParameterfvEXT", GetMultiTexParameterfvEXT);
		Functor("glGetMultiTexParameterivEXT", GetMultiTexParameterivEXT);
		Functor("glGetMultisamplefv", GetMultisamplefv);
		Functor("glGetMultisamplefvNV", GetMultisamplefvNV);
		Functor("glGetNamedBufferParameterivEXT", GetNamedBufferParameterivEXT);
		Functor("glGetNamedBufferParameterui64vNV", GetNamedBufferParameterui64vNV);
		Functor("glGetNamedBufferPointervEXT", GetNamedBufferPointervEXT);
		Functor("glGetNamedBufferSubDataEXT", GetNamedBufferSubDataEXT);
		Functor("glGetNamedFramebufferAttachmentParameterivEXT", GetNamedFramebufferAttachmentParameterivEXT);
		Functor("glGetNamedProgramLocalParameterIivEXT", GetNamedProgramLocalParameterIivEXT);
		Functor("glGetNamedProgramLocalParameterIuivEXT", GetNamedProgramLocalParameterIuivEXT);
		Functor("glGetNamedProgramLocalParameterdvEXT", GetNamedProgramLocalParameterdvEXT);
		Functor("glGetNamedProgramLocalParameterfvEXT", GetNamedProgramLocalParameterfvEXT);
		Functor("glGetNamedProgramStringEXT", GetNamedProgramStringEXT);
		Functor("glGetNamedProgramivEXT", GetNamedProgramivEXT);
		Functor("glGetNamedRenderbufferParameterivEXT", GetNamedRenderbufferParameterivEXT);
		Functor("glGetNamedStringARB", GetNamedStringARB);
		Functor("glGetNamedStringivARB", GetNamedStringivARB);
		Functor("glGetObjectBufferfvATI", GetObjectBufferfvATI);
		Functor("glGetObjectBufferivATI", GetObjectBufferivATI);
		Functor("glGetObjectParameterfvARB", GetObjectParameterfvARB);
		Functor("glGetObjectParameterivAPPLE", GetObjectParameterivAPPLE);
		Functor("glGetObjectParameterivARB", GetObjectParameterivARB);
		Functor("glGetOcclusionQueryivNV", GetOcclusionQueryivNV);
		Functor("glGetOcclusionQueryuivNV", GetOcclusionQueryuivNV);
		Functor("glGetPerfMonitorCounterDataAMD", GetPerfMonitorCounterDataAMD);
		Functor("glGetPerfMonitorCounterInfoAMD", GetPerfMonitorCounterInfoAMD);
		Functor("glGetPerfMonitorCounterStringAMD", GetPerfMonitorCounterStringAMD);
		Functor("glGetPerfMonitorCountersAMD", GetPerfMonitorCountersAMD);
		Functor("glGetPerfMonitorGroupStringAMD", GetPerfMonitorGroupStringAMD);
		Functor("glGetPerfMonitorGroupsAMD", GetPerfMonitorGroupsAMD);
		Functor("glGetPixelMapfv", GetPixelMapfv);
		Functor("glGetPixelMapuiv", GetPixelMapuiv);
		Functor("glGetPixelMapusv", GetPixelMapusv);
		Functor("glGetPixelTexGenParameterfvSGIS", GetPixelTexGenParameterfvSGIS);
		Functor("glGetPixelTexGenParameterivSGIS", GetPixelTexGenParameterivSGIS);
		Functor("glGetPointerIndexedvEXT", GetPointerIndexedvEXT);
		Functor("glGetPointerv", GetPointerv);
		Functor("glGetPointervEXT", GetPointervEXT);
		Functor("glGetPolygonStipple", GetPolygonStipple);
		Functor("glGetProgramEnvParameterIivNV", GetProgramEnvParameterIivNV);
		Functor("glGetProgramEnvParameterIuivNV", GetProgramEnvParameterIuivNV);
		Functor("glGetProgramEnvParameterdvARB", GetProgramEnvParameterdvARB);
		Functor("glGetProgramEnvParameterfvARB", GetProgramEnvParameterfvARB);
		Functor("glGetProgramInfoLog", GetProgramInfoLog);
		Functor("glGetProgramLocalParameterIivNV", GetProgramLocalParameterIivNV);
		Functor("glGetProgramLocalParameterIuivNV", GetProgramLocalParameterIuivNV);
		Functor("glGetProgramLocalParameterdvARB", GetProgramLocalParameterdvARB);
		Functor("glGetProgramLocalParameterfvARB", GetProgramLocalParameterfvARB);
		Functor("glGetProgramNamedParameterdvNV", GetProgramNamedParameterdvNV);
		Functor("glGetProgramNamedParameterfvNV", GetProgramNamedParameterfvNV);
		Functor("glGetProgramParameterdvNV", GetProgramParameterdvNV);
		Functor("glGetProgramParameterfvNV", GetProgramParameterfvNV);
		Functor("glGetProgramStageiv", GetProgramStageiv);
		Functor("glGetProgramStringARB", GetProgramStringARB);
		Functor("glGetProgramStringNV", GetProgramStringNV);
		Functor("glGetProgramiv", GetProgramiv);
		Functor("glGetProgramivARB", GetProgramivARB);
		Functor("glGetProgramivNV", GetProgramivNV);
		Functor("glGetQueryIndexediv", GetQueryIndexediv);
		Functor("glGetQueryObjecti64v", GetQueryObjecti64v);
		Functor("glGetQueryObjecti64vEXT", GetQueryObjecti64vEXT);
		Functor("glGetQueryObjectiv", GetQueryObjectiv);
		Functor("glGetQueryObjectivARB", GetQueryObjectivARB);
		Functor("glGetQueryObjectui64v", GetQueryObjectui64v);
		Functor("glGetQueryObjectui64vEXT", GetQueryObjectui64vEXT);
		Functor("glGetQueryObjectuiv", GetQueryObjectuiv);
		Functor("glGetQueryObjectuivARB", GetQueryObjectuivARB);
		Functor("glGetQueryiv", GetQueryiv);
		Functor("glGetQueryivARB", GetQueryivARB);
		Functor("glGetRenderbufferParameteriv", GetRenderbufferParameteriv);
		Functor("glGetRenderbufferParameterivEXT", GetRenderbufferParameterivEXT);
		Functor("glGetSamplerParameterIfv", GetSamplerParameterIfv);
		Functor("glGetSamplerParameterIiv", GetSamplerParameterIiv);
		Functor("glGetSamplerParameterfv", GetSamplerParameterfv);
		Functor("glGetSamplerParameteriv", GetSamplerParameteriv);
		Functor("glGetSeparableFilter", GetSeparableFilter);
		Functor("glGetSeparableFilterEXT", GetSeparableFilterEXT);
		Functor("glGetShaderInfoLog", GetShaderInfoLog);
		Functor("glGetShaderSource", GetShaderSource);
		Functor("glGetShaderSourceARB", GetShaderSourceARB);
		Functor("glGetShaderiv", GetShaderiv);
		Functor("glGetSharpenTexFuncSGIS", GetSharpenTexFuncSGIS);
		Functor("glGetString", GetString);
		Functor("glGetStringi", GetStringi);
		Functor("glGetSubroutineIndex", GetSubroutineIndex);
		Functor("glGetSubroutineUniformLocation", GetSubroutineUniformLocation);
		Functor("glGetSynciv", GetSynciv);
		Functor("glGetTexBumpParameterfvATI", GetTexBumpParameterfvATI);
		Functor("glGetTexBumpParameterivATI", GetTexBumpParameterivATI);
		Functor("glGetTexEnvfv", GetTexEnvfv);
		Functor("glGetTexEnviv", GetTexEnviv);
		Functor("glGetTexFilterFuncSGIS", GetTexFilterFuncSGIS);
		Functor("glGetTexGendv", GetTexGendv);
		Functor("glGetTexGenfv", GetTexGenfv);
		Functor("glGetTexGeniv", GetTexGeniv);
		Functor("glGetTexImage", GetTexImage);
		Functor("glGetTexLevelParameterfv", GetTexLevelParameterfv);
		Functor("glGetTexLevelParameteriv", GetTexLevelParameteriv);
		Functor("glGetTexParameterIiv", GetTexParameterIiv);
		Functor("glGetTexParameterIivEXT", GetTexParameterIivEXT);
		Functor("glGetTexParameterIuiv", GetTexParameterIuiv);
		Functor("glGetTexParameterIuivEXT", GetTexParameterIuivEXT);
		Functor("glGetTexParameterPointervAPPLE", GetTexParameterPointervAPPLE);
		Functor("glGetTexParameterfv", GetTexParameterfv);
		Functor("glGetTexParameteriv", GetTexParameteriv);
		Functor("glGetTextureImageEXT", GetTextureImageEXT);
		Functor("glGetTextureLevelParameterfvEXT", GetTextureLevelParameterfvEXT);
		Functor("glGetTextureLevelParameterivEXT", GetTextureLevelParameterivEXT);
		Functor("glGetTextureParameterIivEXT", GetTextureParameterIivEXT);
		Functor("glGetTextureParameterIuivEXT", GetTextureParameterIuivEXT);
		Functor("glGetTextureParameterfvEXT", GetTextureParameterfvEXT);
		Functor("glGetTextureParameterivEXT", GetTextureParameterivEXT);
		Functor("glGetTrackMatrixivNV", GetTrackMatrixivNV);
		Functor("glGetTransformFeedbackVarying", GetTransformFeedbackVarying);
		Functor("glGetTransformFeedbackVaryingEXT", GetTransformFeedbackVaryingEXT);
		Functor("glGetTransformFeedbackVaryingNV", GetTransformFeedbackVaryingNV);
		Functor("glGetUniformBlockIndex", GetUniformBlockIndex);
		Functor("glGetUniformBufferSizeEXT", GetUniformBufferSizeEXT);
		Functor("glGetUniformIndices", GetUniformIndices);
		Functor("glGetUniformLocation", GetUniformLocation);
		Functor("glGetUniformLocationARB", GetUniformLocationARB);
		Functor("glGetUniformOffsetEXT", GetUniformOffsetEXT);
		Functor("glGetUniformSubroutineuiv", GetUniformSubroutineuiv);
		Functor("glGetUniformdv", GetUniformdv);
		Functor("glGetUniformfv", GetUniformfv);
		Functor("glGetUniformfvARB", GetUniformfvARB);
		Functor("glGetUniformiv", GetUniformiv);
		Functor("glGetUniformivARB", GetUniformivARB);
		Functor("glGetUniformui64vNV", GetUniformui64vNV);
		Functor("glGetUniformuiv", GetUniformuiv);
		Functor("glGetUniformuivEXT", GetUniformuivEXT);
		Functor("glGetVariantArrayObjectfvATI", GetVariantArrayObjectfvATI);
		Functor("glGetVariantArrayObjectivATI", GetVariantArrayObjectivATI);
		Functor("glGetVariantBooleanvEXT", GetVariantBooleanvEXT);
		Functor("glGetVariantFloatvEXT", GetVariantFloatvEXT);
		Functor("glGetVariantIntegervEXT", GetVariantIntegervEXT);
		Functor("glGetVariantPointervEXT", GetVariantPointervEXT);
		Functor("glGetVaryingLocationNV", GetVaryingLocationNV);
		Functor("glGetVertexAttribArrayObjectfvATI", GetVertexAttribArrayObjectfvATI);
		Functor("glGetVertexAttribArrayObjectivATI", GetVertexAttribArrayObjectivATI);
		Functor("glGetVertexAttribIiv", GetVertexAttribIiv);
		Functor("glGetVertexAttribIivEXT", GetVertexAttribIivEXT);
		Functor("glGetVertexAttribIuiv", GetVertexAttribIuiv);
		Functor("glGetVertexAttribIuivEXT", GetVertexAttribIuivEXT);
		Functor("glGetVertexAttribPointerv", GetVertexAttribPointerv);
		Functor("glGetVertexAttribPointervARB", GetVertexAttribPointervARB);
		Functor("glGetVertexAttribPointervNV", GetVertexAttribPointervNV);
		Functor("glGetVertexAttribdv", GetVertexAttribdv);
		Functor("glGetVertexAttribdvARB", GetVertexAttribdvARB);
		Functor("glGetVertexAttribdvNV", GetVertexAttribdvNV);
		Functor("glGetVertexAttribfv", GetVertexAttribfv);
		Functor("glGetVertexAttribfvARB", GetVertexAttribfvARB);
		Functor("glGetVertexAttribfvNV", GetVertexAttribfvNV);
		Functor("glGetVertexAttribiv", GetVertexAttribiv);
		Functor("glGetVertexAttribivARB", GetVertexAttribivARB);
		Functor("glGetVertexAttribivNV", GetVertexAttribivNV);
		Functor("glGetVideoCaptureStreamdvNV", GetVideoCaptureStreamdvNV);
		Functor("glGetVideoCaptureStreamfvNV", GetVideoCaptureStreamfvNV);
		Functor("glGetVideoCaptureStreamivNV", GetVideoCaptureStreamivNV);
		Functor("glGetVideoCaptureivNV", GetVideoCaptureivNV);
		Functor("glGetVideoi64vNV", GetVideoi64vNV);
		Functor("glGetVideoivNV", GetVideoivNV);
		Functor("glGetVideoui64vNV", GetVideoui64vNV);
		Functor("glGetVideouivNV", GetVideouivNV);
		Functor("glGlobalAlphaFactorbSUN", GlobalAlphaFactorbSUN);
		Functor("glGlobalAlphaFactordSUN", GlobalAlphaFactordSUN);
		Functor("glGlobalAlphaFactorfSUN", GlobalAlphaFactorfSUN);
		Functor("glGlobalAlphaFactoriSUN", GlobalAlphaFactoriSUN);
		Functor("glGlobalAlphaFactorsSUN", GlobalAlphaFactorsSUN);
		Functor("glGlobalAlphaFactorubSUN", GlobalAlphaFactorubSUN);
		Functor("glGlobalAlphaFactoruiSUN", GlobalAlphaFactoruiSUN);
		Functor("glGlobalAlphaFactorusSUN", GlobalAlphaFactorusSUN);
		Functor("glHint", Hint);
		Functor("glHintPGI", HintPGI);
		Functor("glHistogram", Histogram);
		Functor("glHistogramEXT", HistogramEXT);
		Functor("glIglooInterfaceSGIX", IglooInterfaceSGIX);
		Functor("glImageTransformParameterfHP", ImageTransformParameterfHP);
		Functor("glImageTransformParameterfvHP", ImageTransformParameterfvHP);
		Functor("glImageTransformParameteriHP", ImageTransformParameteriHP);
		Functor("glImageTransformParameterivHP", ImageTransformParameterivHP);
		Functor("glIndexFormatNV", IndexFormatNV);
		Functor("glIndexFuncEXT", IndexFuncEXT);
		Functor("glIndexMask", IndexMask);
		Functor("glIndexMaterialEXT", IndexMaterialEXT);
		Functor("glIndexPointer", IndexPointer);
		Functor("glIndexPointerEXT", IndexPointerEXT);
		Functor("glIndexPointerListIBM", IndexPointerListIBM);
		Functor("glIndexd", Indexd);
		Functor("glIndexdv", Indexdv);
		Functor("glIndexf", Indexf);
		Functor("glIndexfv", Indexfv);
		Functor("glIndexi", Indexi);
		Functor("glIndexiv", Indexiv);
		Functor("glIndexs", Indexs);
		Functor("glIndexsv", Indexsv);
		Functor("glIndexub", Indexub);
		Functor("glIndexubv", Indexubv);
		Functor("glInitNames", InitNames);
		Functor("glInsertComponentEXT", InsertComponentEXT);
		Functor("glInstrumentsBufferSGIX", InstrumentsBufferSGIX);
		Functor("glInterleavedArrays", InterleavedArrays);
		Functor("glIsAsyncMarkerSGIX", IsAsyncMarkerSGIX);
		Functor("glIsBuffer", IsBuffer);
		Functor("glIsBufferARB", IsBufferARB);
		Functor("glIsBufferResidentNV", IsBufferResidentNV);
		Functor("glIsEnabled", IsEnabled);
		Functor("glIsEnabledIndexedEXT", IsEnabledIndexedEXT);
		Functor("glIsEnabledi", IsEnabledi);
		Functor("glIsFenceAPPLE", IsFenceAPPLE);
		Functor("glIsFenceNV", IsFenceNV);
		Functor("glIsFramebuffer", IsFramebuffer);
		Functor("glIsFramebufferEXT", IsFramebufferEXT);
		Functor("glIsList", IsList);
		Functor("glIsNamedBufferResidentNV", IsNamedBufferResidentNV);
		Functor("glIsNamedStringARB", IsNamedStringARB);
		Functor("glIsObjectBufferATI", IsObjectBufferATI);
		Functor("glIsOcclusionQueryNV", IsOcclusionQueryNV);
		Functor("glIsProgram", IsProgram);
		Functor("glIsProgramARB", IsProgramARB);
		Functor("glIsProgramNV", IsProgramNV);
		Functor("glIsQuery", IsQuery);
		Functor("glIsQueryARB", IsQueryARB);
		Functor("glIsRenderbuffer", IsRenderbuffer);
		Functor("glIsRenderbufferEXT", IsRenderbufferEXT);
		Functor("glIsSampler", IsSampler);
		Functor("glIsShader", IsShader);
		Functor("glIsSync", IsSync);
		Functor("glIsTexture", IsTexture);
		Functor("glIsTextureEXT", IsTextureEXT);
		Functor("glIsTransformFeedback", IsTransformFeedback);
		Functor("glIsTransformFeedbackNV", IsTransformFeedbackNV);
		Functor("glIsVariantEnabledEXT", IsVariantEnabledEXT);
		Functor("glIsVertexArray", IsVertexArray);
		Functor("glIsVertexArrayAPPLE", IsVertexArrayAPPLE);
		Functor("glIsVertexAttribEnabledAPPLE", IsVertexAttribEnabledAPPLE);
		Functor("glLightEnviSGIX", LightEnviSGIX);
		Functor("glLightModelf", LightModelf);
		Functor("glLightModelfv", LightModelfv);
		Functor("glLightModeli", LightModeli);
		Functor("glLightModeliv", LightModeliv);
		Functor("glLightf", Lightf);
		Functor("glLightfv", Lightfv);
		Functor("glLighti", Lighti);
		Functor("glLightiv", Lightiv);
		Functor("glLineStipple", LineStipple);
		Functor("glLineWidth", LineWidth);
		Functor("glLinkProgram", LinkProgram);
		Functor("glLinkProgramARB", LinkProgramARB);
		Functor("glListBase", ListBase);
		Functor("glListParameterfSGIX", ListParameterfSGIX);
		Functor("glListParameterfvSGIX", ListParameterfvSGIX);
		Functor("glListParameteriSGIX", ListParameteriSGIX);
		Functor("glListParameterivSGIX", ListParameterivSGIX);
		Functor("glLoadIdentity", LoadIdentity);
		Functor("glLoadIdentityDeformationMapSGIX", LoadIdentityDeformationMapSGIX);
		Functor("glLoadMatrixd", LoadMatrixd);
		Functor("glLoadMatrixf", LoadMatrixf);
		Functor("glLoadName", LoadName);
		Functor("glLoadProgramNV", LoadProgramNV);
		Functor("glLoadTransposeMatrixd", LoadTransposeMatrixd);
		Functor("glLoadTransposeMatrixdARB", LoadTransposeMatrixdARB);
		Functor("glLoadTransposeMatrixf", LoadTransposeMatrixf);
		Functor("glLoadTransposeMatrixfARB", LoadTransposeMatrixfARB);
		Functor("glLockArraysEXT", LockArraysEXT);
		Functor("glLogicOp", LogicOp);
		Functor("glMakeBufferNonResidentNV", MakeBufferNonResidentNV);
		Functor("glMakeBufferResidentNV", MakeBufferResidentNV);
		Functor("glMakeNamedBufferNonResidentNV", MakeNamedBufferNonResidentNV);
		Functor("glMakeNamedBufferResidentNV", MakeNamedBufferResidentNV);
		Functor("glMap1d", Map1d);
		Functor("glMap1f", Map1f);
		Functor("glMap2d", Map2d);
		Functor("glMap2f", Map2f);
		Functor("glMapBuffer", MapBuffer);
		Functor("glMapBufferARB", MapBufferARB);
		Functor("glMapBufferRange", MapBufferRange);
		Functor("glMapControlPointsNV", MapControlPointsNV);
		Functor("glMapGrid1d", MapGrid1d);
		Functor("glMapGrid1f", MapGrid1f);
		Functor("glMapGrid2d", MapGrid2d);
		Functor("glMapGrid2f", MapGrid2f);
		Functor("glMapNamedBufferEXT", MapNamedBufferEXT);
		Functor("glMapObjectBufferATI", MapObjectBufferATI);
		Functor("glMapParameterfvNV", MapParameterfvNV);
		Functor("glMapParameterivNV", MapParameterivNV);
		Functor("glMapVertexAttrib1dAPPLE", MapVertexAttrib1dAPPLE);
		Functor("glMapVertexAttrib1fAPPLE", MapVertexAttrib1fAPPLE);
		Functor("glMapVertexAttrib2dAPPLE", MapVertexAttrib2dAPPLE);
		Functor("glMapVertexAttrib2fAPPLE", MapVertexAttrib2fAPPLE);
		Functor("glMaterialf", Materialf);
		Functor("glMaterialfv", Materialfv);
		Functor("glMateriali", Materiali);
		Functor("glMaterialiv", Materialiv);
		Functor("glMatrixFrustumEXT", MatrixFrustumEXT);
		Functor("glMatrixIndexPointerARB", MatrixIndexPointerARB);
		Functor("glMatrixIndexubvARB", MatrixIndexubvARB);
		Functor("glMatrixIndexuivARB", MatrixIndexuivARB);
		Functor("glMatrixIndexusvARB", MatrixIndexusvARB);
		Functor("glMatrixLoadIdentityEXT", MatrixLoadIdentityEXT);
		Functor("glMatrixLoadTransposedEXT", MatrixLoadTransposedEXT);
		Functor("glMatrixLoadTransposefEXT", MatrixLoadTransposefEXT);
		Functor("glMatrixLoaddEXT", MatrixLoaddEXT);
		Functor("glMatrixLoadfEXT", MatrixLoadfEXT);
		Functor("glMatrixMode", MatrixMode);
		Functor("glMatrixMultTransposedEXT", MatrixMultTransposedEXT);
		Functor("glMatrixMultTransposefEXT", MatrixMultTransposefEXT);
		Functor("glMatrixMultdEXT", MatrixMultdEXT);
		Functor("glMatrixMultfEXT", MatrixMultfEXT);
		Functor("glMatrixOrthoEXT", MatrixOrthoEXT);
		Functor("glMatrixPopEXT", MatrixPopEXT);
		Functor("glMatrixPushEXT", MatrixPushEXT);
		Functor("glMatrixRotatedEXT", MatrixRotatedEXT);
		Functor("glMatrixRotatefEXT", MatrixRotatefEXT);
		Functor("glMatrixScaledEXT", MatrixScaledEXT);
		Functor("glMatrixScalefEXT", MatrixScalefEXT);
		Functor("glMatrixTranslatedEXT", MatrixTranslatedEXT);
		Functor("glMatrixTranslatefEXT", MatrixTranslatefEXT);
		Functor("glMinSampleShading", MinSampleShading);
		Functor("glMinmax", Minmax);
		Functor("glMinmaxEXT", MinmaxEXT);
		Functor("glMultMatrixd", MultMatrixd);
		Functor("glMultMatrixf", MultMatrixf);
		Functor("glMultTransposeMatrixd", MultTransposeMatrixd);
		Functor("glMultTransposeMatrixdARB", MultTransposeMatrixdARB);
		Functor("glMultTransposeMatrixf", MultTransposeMatrixf);
		Functor("glMultTransposeMatrixfARB", MultTransposeMatrixfARB);
		Functor("glMultiDrawArrays", MultiDrawArrays);
		Functor("glMultiDrawArraysEXT", MultiDrawArraysEXT);
		Functor("glMultiDrawElementArrayAPPLE", MultiDrawElementArrayAPPLE);
		Functor("glMultiDrawElements", MultiDrawElements);
		Functor("glMultiDrawElementsBaseVertex", MultiDrawElementsBaseVertex);
		Functor("glMultiDrawElementsEXT", MultiDrawElementsEXT);
		Functor("glMultiDrawRangeElementArrayAPPLE", MultiDrawRangeElementArrayAPPLE);
		Functor("glMultiModeDrawArraysIBM", MultiModeDrawArraysIBM);
		Functor("glMultiModeDrawElementsIBM", MultiModeDrawElementsIBM);
		Functor("glMultiTexBufferEXT", MultiTexBufferEXT);
		Functor("glMultiTexCoord1d", MultiTexCoord1d);
		Functor("glMultiTexCoord1dARB", MultiTexCoord1dARB);
		Functor("glMultiTexCoord1dv", MultiTexCoord1dv);
		Functor("glMultiTexCoord1dvARB", MultiTexCoord1dvARB);
		Functor("glMultiTexCoord1f", MultiTexCoord1f);
		Functor("glMultiTexCoord1fARB", MultiTexCoord1fARB);
		Functor("glMultiTexCoord1fv", MultiTexCoord1fv);
		Functor("glMultiTexCoord1fvARB", MultiTexCoord1fvARB);
		Functor("glMultiTexCoord1hNV", MultiTexCoord1hNV);
		Functor("glMultiTexCoord1hvNV", MultiTexCoord1hvNV);
		Functor("glMultiTexCoord1i", MultiTexCoord1i);
		Functor("glMultiTexCoord1iARB", MultiTexCoord1iARB);
		Functor("glMultiTexCoord1iv", MultiTexCoord1iv);
		Functor("glMultiTexCoord1ivARB", MultiTexCoord1ivARB);
		Functor("glMultiTexCoord1s", MultiTexCoord1s);
		Functor("glMultiTexCoord1sARB", MultiTexCoord1sARB);
		Functor("glMultiTexCoord1sv", MultiTexCoord1sv);
		Functor("glMultiTexCoord1svARB", MultiTexCoord1svARB);
		Functor("glMultiTexCoord2d", MultiTexCoord2d);
		Functor("glMultiTexCoord2dARB", MultiTexCoord2dARB);
		Functor("glMultiTexCoord2dv", MultiTexCoord2dv);
		Functor("glMultiTexCoord2dvARB", MultiTexCoord2dvARB);
		Functor("glMultiTexCoord2f", MultiTexCoord2f);
		Functor("glMultiTexCoord2fARB", MultiTexCoord2fARB);
		Functor("glMultiTexCoord2fv", MultiTexCoord2fv);
		Functor("glMultiTexCoord2fvARB", MultiTexCoord2fvARB);
		Functor("glMultiTexCoord2hNV", MultiTexCoord2hNV);
		Functor("glMultiTexCoord2hvNV", MultiTexCoord2hvNV);
		Functor("glMultiTexCoord2i", MultiTexCoord2i);
		Functor("glMultiTexCoord2iARB", MultiTexCoord2iARB);
		Functor("glMultiTexCoord2iv", MultiTexCoord2iv);
		Functor("glMultiTexCoord2ivARB", MultiTexCoord2ivARB);
		Functor("glMultiTexCoord2s", MultiTexCoord2s);
		Functor("glMultiTexCoord2sARB", MultiTexCoord2sARB);
		Functor("glMultiTexCoord2sv", MultiTexCoord2sv);
		Functor("glMultiTexCoord2svARB", MultiTexCoord2svARB);
		Functor("glMultiTexCoord3d", MultiTexCoord3d);
		Functor("glMultiTexCoord3dARB", MultiTexCoord3dARB);
		Functor("glMultiTexCoord3dv", MultiTexCoord3dv);
		Functor("glMultiTexCoord3dvARB", MultiTexCoord3dvARB);
		Functor("glMultiTexCoord3f", MultiTexCoord3f);
		Functor("glMultiTexCoord3fARB", MultiTexCoord3fARB);
		Functor("glMultiTexCoord3fv", MultiTexCoord3fv);
		Functor("glMultiTexCoord3fvARB", MultiTexCoord3fvARB);
		Functor("glMultiTexCoord3hNV", MultiTexCoord3hNV);
		Functor("glMultiTexCoord3hvNV", MultiTexCoord3hvNV);
		Functor("glMultiTexCoord3i", MultiTexCoord3i);
		Functor("glMultiTexCoord3iARB", MultiTexCoord3iARB);
		Functor("glMultiTexCoord3iv", MultiTexCoord3iv);
		Functor("glMultiTexCoord3ivARB", MultiTexCoord3ivARB);
		Functor("glMultiTexCoord3s", MultiTexCoord3s);
		Functor("glMultiTexCoord3sARB", MultiTexCoord3sARB);
		Functor("glMultiTexCoord3sv", MultiTexCoord3sv);
		Functor("glMultiTexCoord3svARB", MultiTexCoord3svARB);
		Functor("glMultiTexCoord4d", MultiTexCoord4d);
		Functor("glMultiTexCoord4dARB", MultiTexCoord4dARB);
		Functor("glMultiTexCoord4dv", MultiTexCoord4dv);
		Functor("glMultiTexCoord4dvARB", MultiTexCoord4dvARB);
		Functor("glMultiTexCoord4f", MultiTexCoord4f);
		Functor("glMultiTexCoord4fARB", MultiTexCoord4fARB);
		Functor("glMultiTexCoord4fv", MultiTexCoord4fv);
		Functor("glMultiTexCoord4fvARB", MultiTexCoord4fvARB);
		Functor("glMultiTexCoord4hNV", MultiTexCoord4hNV);
		Functor("glMultiTexCoord4hvNV", MultiTexCoord4hvNV);
		Functor("glMultiTexCoord4i", MultiTexCoord4i);
		Functor("glMultiTexCoord4iARB", MultiTexCoord4iARB);
		Functor("glMultiTexCoord4iv", MultiTexCoord4iv);
		Functor("glMultiTexCoord4ivARB", MultiTexCoord4ivARB);
		Functor("glMultiTexCoord4s", MultiTexCoord4s);
		Functor("glMultiTexCoord4sARB", MultiTexCoord4sARB);
		Functor("glMultiTexCoord4sv", MultiTexCoord4sv);
		Functor("glMultiTexCoord4svARB", MultiTexCoord4svARB);
		Functor("glMultiTexCoordP1ui", MultiTexCoordP1ui);
		Functor("glMultiTexCoordP1uiv", MultiTexCoordP1uiv);
		Functor("glMultiTexCoordP2ui", MultiTexCoordP2ui);
		Functor("glMultiTexCoordP2uiv", MultiTexCoordP2uiv);
		Functor("glMultiTexCoordP3ui", MultiTexCoordP3ui);
		Functor("glMultiTexCoordP3uiv", MultiTexCoordP3uiv);
		Functor("glMultiTexCoordP4ui", MultiTexCoordP4ui);
		Functor("glMultiTexCoordP4uiv", MultiTexCoordP4uiv);
		Functor("glMultiTexCoordPointerEXT", MultiTexCoordPointerEXT);
		Functor("glMultiTexEnvfEXT", MultiTexEnvfEXT);
		Functor("glMultiTexEnvfvEXT", MultiTexEnvfvEXT);
		Functor("glMultiTexEnviEXT", MultiTexEnviEXT);
		Functor("glMultiTexEnvivEXT", MultiTexEnvivEXT);
		Functor("glMultiTexGendEXT", MultiTexGendEXT);
		Functor("glMultiTexGendvEXT", MultiTexGendvEXT);
		Functor("glMultiTexGenfEXT", MultiTexGenfEXT);
		Functor("glMultiTexGenfvEXT", MultiTexGenfvEXT);
		Functor("glMultiTexGeniEXT", MultiTexGeniEXT);
		Functor("glMultiTexGenivEXT", MultiTexGenivEXT);
		Functor("glMultiTexImage1DEXT", MultiTexImage1DEXT);
		Functor("glMultiTexImage2DEXT", MultiTexImage2DEXT);
		Functor("glMultiTexImage3DEXT", MultiTexImage3DEXT);
		Functor("glMultiTexParameterIivEXT", MultiTexParameterIivEXT);
		Functor("glMultiTexParameterIuivEXT", MultiTexParameterIuivEXT);
		Functor("glMultiTexParameterfEXT", MultiTexParameterfEXT);
		Functor("glMultiTexParameterfvEXT", MultiTexParameterfvEXT);
		Functor("glMultiTexParameteriEXT", MultiTexParameteriEXT);
		Functor("glMultiTexParameterivEXT", MultiTexParameterivEXT);
		Functor("glMultiTexRenderbufferEXT", MultiTexRenderbufferEXT);
		Functor("glMultiTexSubImage1DEXT", MultiTexSubImage1DEXT);
		Functor("glMultiTexSubImage2DEXT", MultiTexSubImage2DEXT);
		Functor("glMultiTexSubImage3DEXT", MultiTexSubImage3DEXT);
		Functor("glNamedBufferDataEXT", NamedBufferDataEXT);
		Functor("glNamedBufferSubDataEXT", NamedBufferSubDataEXT);
		Functor("glNamedFramebufferRenderbufferEXT", NamedFramebufferRenderbufferEXT);
		Functor("glNamedFramebufferTexture1DEXT", NamedFramebufferTexture1DEXT);
		Functor("glNamedFramebufferTexture2DEXT", NamedFramebufferTexture2DEXT);
		Functor("glNamedFramebufferTexture3DEXT", NamedFramebufferTexture3DEXT);
		Functor("glNamedFramebufferTextureEXT", NamedFramebufferTextureEXT);
		Functor("glNamedFramebufferTextureFaceEXT", NamedFramebufferTextureFaceEXT);
		Functor("glNamedFramebufferTextureLayerEXT", NamedFramebufferTextureLayerEXT);
		Functor("glNamedProgramLocalParameter4dEXT", NamedProgramLocalParameter4dEXT);
		Functor("glNamedProgramLocalParameter4dvEXT", NamedProgramLocalParameter4dvEXT);
		Functor("glNamedProgramLocalParameter4fEXT", NamedProgramLocalParameter4fEXT);
		Functor("glNamedProgramLocalParameter4fvEXT", NamedProgramLocalParameter4fvEXT);
		Functor("glNamedProgramLocalParameterI4iEXT", NamedProgramLocalParameterI4iEXT);
		Functor("glNamedProgramLocalParameterI4ivEXT", NamedProgramLocalParameterI4ivEXT);
		Functor("glNamedProgramLocalParameterI4uiEXT", NamedProgramLocalParameterI4uiEXT);
		Functor("glNamedProgramLocalParameterI4uivEXT", NamedProgramLocalParameterI4uivEXT);
		Functor("glNamedProgramLocalParameters4fvEXT", NamedProgramLocalParameters4fvEXT);
		Functor("glNamedProgramLocalParametersI4ivEXT", NamedProgramLocalParametersI4ivEXT);
		Functor("glNamedProgramLocalParametersI4uivEXT", NamedProgramLocalParametersI4uivEXT);
		Functor("glNamedProgramStringEXT", NamedProgramStringEXT);
		Functor("glNamedRenderbufferStorageEXT", NamedRenderbufferStorageEXT);
		Functor("glNamedRenderbufferStorageMultisampleCoverageEXT", NamedRenderbufferStorageMultisampleCoverageEXT);
		Functor("glNamedRenderbufferStorageMultisampleEXT", NamedRenderbufferStorageMultisampleEXT);
		Functor("glNamedStringARB", NamedStringARB);
		Functor("glNewList", NewList);
		Functor("glNewObjectBufferATI", NewObjectBufferATI);
		Functor("glNormal3b", Normal3b);
		Functor("glNormal3bv", Normal3bv);
		Functor("glNormal3d", Normal3d);
		Functor("glNormal3dv", Normal3dv);
		Functor("glNormal3f", Normal3f);
		Functor("glNormal3fVertex3fSUN", Normal3fVertex3fSUN);
		Functor("glNormal3fVertex3fvSUN", Normal3fVertex3fvSUN);
		Functor("glNormal3fv", Normal3fv);
		Functor("glNormal3hNV", Normal3hNV);
		Functor("glNormal3hvNV", Normal3hvNV);
		Functor("glNormal3i", Normal3i);
		Functor("glNormal3iv", Normal3iv);
		Functor("glNormal3s", Normal3s);
		Functor("glNormal3sv", Normal3sv);
		Functor("glNormalFormatNV", NormalFormatNV);
		Functor("glNormalP3ui", NormalP3ui);
		Functor("glNormalP3uiv", NormalP3uiv);
		Functor("glNormalPointer", NormalPointer);
		Functor("glNormalPointerEXT", NormalPointerEXT);
		Functor("glNormalPointerListIBM", NormalPointerListIBM);
		Functor("glNormalPointervINTEL", NormalPointervINTEL);
		Functor("glNormalStream3bATI", NormalStream3bATI);
		Functor("glNormalStream3bvATI", NormalStream3bvATI);
		Functor("glNormalStream3dATI", NormalStream3dATI);
		Functor("glNormalStream3dvATI", NormalStream3dvATI);
		Functor("glNormalStream3fATI", NormalStream3fATI);
		Functor("glNormalStream3fvATI", NormalStream3fvATI);
		Functor("glNormalStream3iATI", NormalStream3iATI);
		Functor("glNormalStream3ivATI", NormalStream3ivATI);
		Functor("glNormalStream3sATI", NormalStream3sATI);
		Functor("glNormalStream3svATI", NormalStream3svATI);
		Functor("glObjectPurgeableAPPLE", ObjectPurgeableAPPLE);
		Functor("glObjectUnpurgeableAPPLE", ObjectUnpurgeableAPPLE);
		Functor("glOrtho", Ortho);
		Functor("glPNTrianglesfATI", PNTrianglesfATI);
		Functor("glPNTrianglesiATI", PNTrianglesiATI);
		Functor("glPassTexCoordATI", PassTexCoordATI);
		Functor("glPassThrough", PassThrough);
		Functor("glPatchParameterfv", PatchParameterfv);
		Functor("glPatchParameteri", PatchParameteri);
		Functor("glPauseTransformFeedback", PauseTransformFeedback);
		Functor("glPauseTransformFeedbackNV", PauseTransformFeedbackNV);
		Functor("glPixelDataRangeNV", PixelDataRangeNV);
		Functor("glPixelMapfv", PixelMapfv);
		Functor("glPixelMapuiv", PixelMapuiv);
		Functor("glPixelMapusv", PixelMapusv);
		Functor("glPixelStoref", PixelStoref);
		Functor("glPixelStorei", PixelStorei);
		Functor("glPixelTexGenParameterfSGIS", PixelTexGenParameterfSGIS);
		Functor("glPixelTexGenParameterfvSGIS", PixelTexGenParameterfvSGIS);
		Functor("glPixelTexGenParameteriSGIS", PixelTexGenParameteriSGIS);
		Functor("glPixelTexGenParameterivSGIS", PixelTexGenParameterivSGIS);
		Functor("glPixelTexGenSGIX", PixelTexGenSGIX);
		Functor("glPixelTransferf", PixelTransferf);
		Functor("glPixelTransferi", PixelTransferi);
		Functor("glPixelTransformParameterfEXT", PixelTransformParameterfEXT);
		Functor("glPixelTransformParameterfvEXT", PixelTransformParameterfvEXT);
		Functor("glPixelTransformParameteriEXT", PixelTransformParameteriEXT);
		Functor("glPixelTransformParameterivEXT", PixelTransformParameterivEXT);
		Functor("glPixelZoom", PixelZoom);
		Functor("glPointParameterf", PointParameterf);
		Functor("glPointParameterfARB", PointParameterfARB);
		Functor("glPointParameterfEXT", PointParameterfEXT);
		Functor("glPointParameterfSGIS", PointParameterfSGIS);
		Functor("glPointParameterfv", PointParameterfv);
		Functor("glPointParameterfvARB", PointParameterfvARB);
		Functor("glPointParameterfvEXT", PointParameterfvEXT);
		Functor("glPointParameterfvSGIS", PointParameterfvSGIS);
		Functor("glPointParameteri", PointParameteri);
		Functor("glPointParameteriNV", PointParameteriNV);
		Functor("glPointParameteriv", PointParameteriv);
		Functor("glPointParameterivNV", PointParameterivNV);
		Functor("glPointSize", PointSize);
		Functor("glPollAsyncSGIX", PollAsyncSGIX);
		Functor("glPollInstrumentsSGIX", PollInstrumentsSGIX);
		Functor("glPolygonMode", PolygonMode);
		Functor("glPolygonOffset", PolygonOffset);
		Functor("glPolygonOffsetEXT", PolygonOffsetEXT);
		Functor("glPolygonStipple", PolygonStipple);
		Functor("glPopAttrib", PopAttrib);
		Functor("glPopClientAttrib", PopClientAttrib);
		Functor("glPopMatrix", PopMatrix);
		Functor("glPopName", PopName);
		Functor("glPresentFrameDualFillNV", PresentFrameDualFillNV);
		Functor("glPresentFrameKeyedNV", PresentFrameKeyedNV);
		Functor("glPrimitiveRestartIndex", PrimitiveRestartIndex);
		Functor("glPrimitiveRestartIndexNV", PrimitiveRestartIndexNV);
		Functor("glPrimitiveRestartNV", PrimitiveRestartNV);
		Functor("glPrioritizeTextures", PrioritizeTextures);
		Functor("glPrioritizeTexturesEXT", PrioritizeTexturesEXT);
		Functor("glProgramBufferParametersIivNV", ProgramBufferParametersIivNV);
		Functor("glProgramBufferParametersIuivNV", ProgramBufferParametersIuivNV);
		Functor("glProgramBufferParametersfvNV", ProgramBufferParametersfvNV);
		Functor("glProgramEnvParameter4dARB", ProgramEnvParameter4dARB);
		Functor("glProgramEnvParameter4dvARB", ProgramEnvParameter4dvARB);
		Functor("glProgramEnvParameter4fARB", ProgramEnvParameter4fARB);
		Functor("glProgramEnvParameter4fvARB", ProgramEnvParameter4fvARB);
		Functor("glProgramEnvParameterI4iNV", ProgramEnvParameterI4iNV);
		Functor("glProgramEnvParameterI4ivNV", ProgramEnvParameterI4ivNV);
		Functor("glProgramEnvParameterI4uiNV", ProgramEnvParameterI4uiNV);
		Functor("glProgramEnvParameterI4uivNV", ProgramEnvParameterI4uivNV);
		Functor("glProgramEnvParameters4fvEXT", ProgramEnvParameters4fvEXT);
		Functor("glProgramEnvParametersI4ivNV", ProgramEnvParametersI4ivNV);
		Functor("glProgramEnvParametersI4uivNV", ProgramEnvParametersI4uivNV);
		Functor("glProgramLocalParameter4dARB", ProgramLocalParameter4dARB);
		Functor("glProgramLocalParameter4dvARB", ProgramLocalParameter4dvARB);
		Functor("glProgramLocalParameter4fARB", ProgramLocalParameter4fARB);
		Functor("glProgramLocalParameter4fvARB", ProgramLocalParameter4fvARB);
		Functor("glProgramLocalParameterI4iNV", ProgramLocalParameterI4iNV);
		Functor("glProgramLocalParameterI4ivNV", ProgramLocalParameterI4ivNV);
		Functor("glProgramLocalParameterI4uiNV", ProgramLocalParameterI4uiNV);
		Functor("glProgramLocalParameterI4uivNV", ProgramLocalParameterI4uivNV);
		Functor("glProgramLocalParameters4fvEXT", ProgramLocalParameters4fvEXT);
		Functor("glProgramLocalParametersI4ivNV", ProgramLocalParametersI4ivNV);
		Functor("glProgramLocalParametersI4uivNV", ProgramLocalParametersI4uivNV);
		Functor("glProgramNamedParameter4dNV", ProgramNamedParameter4dNV);
		Functor("glProgramNamedParameter4dvNV", ProgramNamedParameter4dvNV);
		Functor("glProgramNamedParameter4fNV", ProgramNamedParameter4fNV);
		Functor("glProgramNamedParameter4fvNV", ProgramNamedParameter4fvNV);
		Functor("glProgramParameter4dNV", ProgramParameter4dNV);
		Functor("glProgramParameter4dvNV", ProgramParameter4dvNV);
		Functor("glProgramParameter4fNV", ProgramParameter4fNV);
		Functor("glProgramParameter4fvNV", ProgramParameter4fvNV);
		Functor("glProgramParameteri", ProgramParameteri);
		Functor("glProgramParameteriARB", ProgramParameteriARB);
		Functor("glProgramParameteriEXT", ProgramParameteriEXT);
		Functor("glProgramParameters4dvNV", ProgramParameters4dvNV);
		Functor("glProgramParameters4fvNV", ProgramParameters4fvNV);
		Functor("glProgramStringARB", ProgramStringARB);
		Functor("glProgramUniform1dEXT", ProgramUniform1dEXT);
		Functor("glProgramUniform1dvEXT", ProgramUniform1dvEXT);
		Functor("glProgramUniform1fEXT", ProgramUniform1fEXT);
		Functor("glProgramUniform1fvEXT", ProgramUniform1fvEXT);
		Functor("glProgramUniform1iEXT", ProgramUniform1iEXT);
		Functor("glProgramUniform1ivEXT", ProgramUniform1ivEXT);
		Functor("glProgramUniform1uiEXT", ProgramUniform1uiEXT);
		Functor("glProgramUniform1uivEXT", ProgramUniform1uivEXT);
		Functor("glProgramUniform2dEXT", ProgramUniform2dEXT);
		Functor("glProgramUniform2dvEXT", ProgramUniform2dvEXT);
		Functor("glProgramUniform2fEXT", ProgramUniform2fEXT);
		Functor("glProgramUniform2fvEXT", ProgramUniform2fvEXT);
		Functor("glProgramUniform2iEXT", ProgramUniform2iEXT);
		Functor("glProgramUniform2ivEXT", ProgramUniform2ivEXT);
		Functor("glProgramUniform2uiEXT", ProgramUniform2uiEXT);
		Functor("glProgramUniform2uivEXT", ProgramUniform2uivEXT);
		Functor("glProgramUniform3dEXT", ProgramUniform3dEXT);
		Functor("glProgramUniform3dvEXT", ProgramUniform3dvEXT);
		Functor("glProgramUniform3fEXT", ProgramUniform3fEXT);
		Functor("glProgramUniform3fvEXT", ProgramUniform3fvEXT);
		Functor("glProgramUniform3iEXT", ProgramUniform3iEXT);
		Functor("glProgramUniform3ivEXT", ProgramUniform3ivEXT);
		Functor("glProgramUniform3uiEXT", ProgramUniform3uiEXT);
		Functor("glProgramUniform3uivEXT", ProgramUniform3uivEXT);
		Functor("glProgramUniform4dEXT", ProgramUniform4dEXT);
		Functor("glProgramUniform4dvEXT", ProgramUniform4dvEXT);
		Functor("glProgramUniform4fEXT", ProgramUniform4fEXT);
		Functor("glProgramUniform4fvEXT", ProgramUniform4fvEXT);
		Functor("glProgramUniform4iEXT", ProgramUniform4iEXT);
		Functor("glProgramUniform4ivEXT", ProgramUniform4ivEXT);
		Functor("glProgramUniform4uiEXT", ProgramUniform4uiEXT);
		Functor("glProgramUniform4uivEXT", ProgramUniform4uivEXT);
		Functor("glProgramUniformMatrix2dvEXT", ProgramUniformMatrix2dvEXT);
		Functor("glProgramUniformMatrix2fvEXT", ProgramUniformMatrix2fvEXT);
		Functor("glProgramUniformMatrix2x3dvEXT", ProgramUniformMatrix2x3dvEXT);
		Functor("glProgramUniformMatrix2x3fvEXT", ProgramUniformMatrix2x3fvEXT);
		Functor("glProgramUniformMatrix2x4dvEXT", ProgramUniformMatrix2x4dvEXT);
		Functor("glProgramUniformMatrix2x4fvEXT", ProgramUniformMatrix2x4fvEXT);
		Functor("glProgramUniformMatrix3dvEXT", ProgramUniformMatrix3dvEXT);
		Functor("glProgramUniformMatrix3fvEXT", ProgramUniformMatrix3fvEXT);
		Functor("glProgramUniformMatrix3x2dvEXT", ProgramUniformMatrix3x2dvEXT);
		Functor("glProgramUniformMatrix3x2fvEXT", ProgramUniformMatrix3x2fvEXT);
		Functor("glProgramUniformMatrix3x4dvEXT", ProgramUniformMatrix3x4dvEXT);
		Functor("glProgramUniformMatrix3x4fvEXT", ProgramUniformMatrix3x4fvEXT);
		Functor("glProgramUniformMatrix4dvEXT", ProgramUniformMatrix4dvEXT);
		Functor("glProgramUniformMatrix4fvEXT", ProgramUniformMatrix4fvEXT);
		Functor("glProgramUniformMatrix4x2dvEXT", ProgramUniformMatrix4x2dvEXT);
		Functor("glProgramUniformMatrix4x2fvEXT", ProgramUniformMatrix4x2fvEXT);
		Functor("glProgramUniformMatrix4x3dvEXT", ProgramUniformMatrix4x3dvEXT);
		Functor("glProgramUniformMatrix4x3fvEXT", ProgramUniformMatrix4x3fvEXT);
		Functor("glProgramUniformui64NV", ProgramUniformui64NV);
		Functor("glProgramUniformui64vNV", ProgramUniformui64vNV);
		Functor("glProgramVertexLimitNV", ProgramVertexLimitNV);
		Functor("glProvokingVertex", ProvokingVertex);
		Functor("glProvokingVertexEXT", ProvokingVertexEXT);
		Functor("glPushAttrib", PushAttrib);
		Functor("glPushClientAttrib", PushClientAttrib);
		Functor("glPushClientAttribDefaultEXT", PushClientAttribDefaultEXT);
		Functor("glPushMatrix", PushMatrix);
		Functor("glPushName", PushName);
		Functor("glQueryCounter", QueryCounter);
		Functor("glRasterPos2d", RasterPos2d);
		Functor("glRasterPos2dv", RasterPos2dv);
		Functor("glRasterPos2f", RasterPos2f);
		Functor("glRasterPos2fv", RasterPos2fv);
		Functor("glRasterPos2i", RasterPos2i);
		Functor("glRasterPos2iv", RasterPos2iv);
		Functor("glRasterPos2s", RasterPos2s);
		Functor("glRasterPos2sv", RasterPos2sv);
		Functor("glRasterPos3d", RasterPos3d);
		Functor("glRasterPos3dv", RasterPos3dv);
		Functor("glRasterPos3f", RasterPos3f);
		Functor("glRasterPos3fv", RasterPos3fv);
		Functor("glRasterPos3i", RasterPos3i);
		Functor("glRasterPos3iv", RasterPos3iv);
		Functor("glRasterPos3s", RasterPos3s);
		Functor("glRasterPos3sv", RasterPos3sv);
		Functor("glRasterPos4d", RasterPos4d);
		Functor("glRasterPos4dv", RasterPos4dv);
		Functor("glRasterPos4f", RasterPos4f);
		Functor("glRasterPos4fv", RasterPos4fv);
		Functor("glRasterPos4i", RasterPos4i);
		Functor("glRasterPos4iv", RasterPos4iv);
		Functor("glRasterPos4s", RasterPos4s);
		Functor("glRasterPos4sv", RasterPos4sv);
		Functor("glReadBuffer", ReadBuffer);
		Functor("glReadInstrumentsSGIX", ReadInstrumentsSGIX);
		Functor("glReadPixels", ReadPixels);
		Functor("glRectd", Rectd);
		Functor("glRectdv", Rectdv);
		Functor("glRectf", Rectf);
		Functor("glRectfv", Rectfv);
		Functor("glRecti", Recti);
		Functor("glRectiv", Rectiv);
		Functor("glRects", Rects);
		Functor("glRectsv", Rectsv);
		Functor("glReferencePlaneSGIX", ReferencePlaneSGIX);
		Functor("glRenderMode", RenderMode);
		Functor("glRenderbufferStorage", RenderbufferStorage);
		Functor("glRenderbufferStorageEXT", RenderbufferStorageEXT);
		Functor("glRenderbufferStorageMultisample", RenderbufferStorageMultisample);
		Functor("glRenderbufferStorageMultisampleCoverageNV", RenderbufferStorageMultisampleCoverageNV);
		Functor("glRenderbufferStorageMultisampleEXT", RenderbufferStorageMultisampleEXT);
		Functor("glReplacementCodePointerSUN", ReplacementCodePointerSUN);
		Functor("glReplacementCodeubSUN", ReplacementCodeubSUN);
		Functor("glReplacementCodeubvSUN", ReplacementCodeubvSUN);
		Functor("glReplacementCodeuiColor3fVertex3fSUN", ReplacementCodeuiColor3fVertex3fSUN);
		Functor("glReplacementCodeuiColor3fVertex3fvSUN", ReplacementCodeuiColor3fVertex3fvSUN);
		Functor("glReplacementCodeuiColor4fNormal3fVertex3fSUN", ReplacementCodeuiColor4fNormal3fVertex3fSUN);
		Functor("glReplacementCodeuiColor4fNormal3fVertex3fvSUN", ReplacementCodeuiColor4fNormal3fVertex3fvSUN);
		Functor("glReplacementCodeuiColor4ubVertex3fSUN", ReplacementCodeuiColor4ubVertex3fSUN);
		Functor("glReplacementCodeuiColor4ubVertex3fvSUN", ReplacementCodeuiColor4ubVertex3fvSUN);
		Functor("glReplacementCodeuiNormal3fVertex3fSUN", ReplacementCodeuiNormal3fVertex3fSUN);
		Functor("glReplacementCodeuiNormal3fVertex3fvSUN", ReplacementCodeuiNormal3fVertex3fvSUN);
		Functor("glReplacementCodeuiSUN", ReplacementCodeuiSUN);
		Functor("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN", ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN);
		Functor("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN", ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN);
		Functor("glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN", ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN);
		Functor("glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN", ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN);
		Functor("glReplacementCodeuiTexCoord2fVertex3fSUN", ReplacementCodeuiTexCoord2fVertex3fSUN);
		Functor("glReplacementCodeuiTexCoord2fVertex3fvSUN", ReplacementCodeuiTexCoord2fVertex3fvSUN);
		Functor("glReplacementCodeuiVertex3fSUN", ReplacementCodeuiVertex3fSUN);
		Functor("glReplacementCodeuiVertex3fvSUN", ReplacementCodeuiVertex3fvSUN);
		Functor("glReplacementCodeuivSUN", ReplacementCodeuivSUN);
		Functor("glReplacementCodeusSUN", ReplacementCodeusSUN);
		Functor("glReplacementCodeusvSUN", ReplacementCodeusvSUN);
		Functor("glRequestResidentProgramsNV", RequestResidentProgramsNV);
		Functor("glResetHistogram", ResetHistogram);
		Functor("glResetHistogramEXT", ResetHistogramEXT);
		Functor("glResetMinmax", ResetMinmax);
		Functor("glResetMinmaxEXT", ResetMinmaxEXT);
		Functor("glResizeBuffersMESA", ResizeBuffersMESA);
		Functor("glResumeTransformFeedback", ResumeTransformFeedback);
		Functor("glResumeTransformFeedbackNV", ResumeTransformFeedbackNV);
		Functor("glRotated", Rotated);
		Functor("glRotatef", Rotatef);
		Functor("glSampleCoverage", SampleCoverage);
		Functor("glSampleCoverageARB", SampleCoverageARB);
		Functor("glSampleMapATI", SampleMapATI);
		Functor("glSampleMaskEXT", SampleMaskEXT);
		Functor("glSampleMaskIndexedNV", SampleMaskIndexedNV);
		Functor("glSampleMaskSGIS", SampleMaskSGIS);
		Functor("glSampleMaski", SampleMaski);
		Functor("glSamplePatternEXT", SamplePatternEXT);
		Functor("glSamplePatternSGIS", SamplePatternSGIS);
		Functor("glSamplerParameterIiv", SamplerParameterIiv);
		Functor("glSamplerParameterIuiv", SamplerParameterIuiv);
		Functor("glSamplerParameterf", SamplerParameterf);
		Functor("glSamplerParameterfv", SamplerParameterfv);
		Functor("glSamplerParameteri", SamplerParameteri);
		Functor("glSamplerParameteriv", SamplerParameteriv);
		Functor("glScaled", Scaled);
		Functor("glScalef", Scalef);
		Functor("glScissor", Scissor);
		Functor("glSecondaryColor3b", SecondaryColor3b);
		Functor("glSecondaryColor3bEXT", SecondaryColor3bEXT);
		Functor("glSecondaryColor3bv", SecondaryColor3bv);
		Functor("glSecondaryColor3bvEXT", SecondaryColor3bvEXT);
		Functor("glSecondaryColor3d", SecondaryColor3d);
		Functor("glSecondaryColor3dEXT", SecondaryColor3dEXT);
		Functor("glSecondaryColor3dv", SecondaryColor3dv);
		Functor("glSecondaryColor3dvEXT", SecondaryColor3dvEXT);
		Functor("glSecondaryColor3f", SecondaryColor3f);
		Functor("glSecondaryColor3fEXT", SecondaryColor3fEXT);
		Functor("glSecondaryColor3fv", SecondaryColor3fv);
		Functor("glSecondaryColor3fvEXT", SecondaryColor3fvEXT);
		Functor("glSecondaryColor3hNV", SecondaryColor3hNV);
		Functor("glSecondaryColor3hvNV", SecondaryColor3hvNV);
		Functor("glSecondaryColor3i", SecondaryColor3i);
		Functor("glSecondaryColor3iEXT", SecondaryColor3iEXT);
		Functor("glSecondaryColor3iv", SecondaryColor3iv);
		Functor("glSecondaryColor3ivEXT", SecondaryColor3ivEXT);
		Functor("glSecondaryColor3s", SecondaryColor3s);
		Functor("glSecondaryColor3sEXT", SecondaryColor3sEXT);
		Functor("glSecondaryColor3sv", SecondaryColor3sv);
		Functor("glSecondaryColor3svEXT", SecondaryColor3svEXT);
		Functor("glSecondaryColor3ub", SecondaryColor3ub);
		Functor("glSecondaryColor3ubEXT", SecondaryColor3ubEXT);
		Functor("glSecondaryColor3ubv", SecondaryColor3ubv);
		Functor("glSecondaryColor3ubvEXT", SecondaryColor3ubvEXT);
		Functor("glSecondaryColor3ui", SecondaryColor3ui);
		Functor("glSecondaryColor3uiEXT", SecondaryColor3uiEXT);
		Functor("glSecondaryColor3uiv", SecondaryColor3uiv);
		Functor("glSecondaryColor3uivEXT", SecondaryColor3uivEXT);
		Functor("glSecondaryColor3us", SecondaryColor3us);
		Functor("glSecondaryColor3usEXT", SecondaryColor3usEXT);
		Functor("glSecondaryColor3usv", SecondaryColor3usv);
		Functor("glSecondaryColor3usvEXT", SecondaryColor3usvEXT);
		Functor("glSecondaryColorFormatNV", SecondaryColorFormatNV);
		Functor("glSecondaryColorP3ui", SecondaryColorP3ui);
		Functor("glSecondaryColorP3uiv", SecondaryColorP3uiv);
		Functor("glSecondaryColorPointer", SecondaryColorPointer);
		Functor("glSecondaryColorPointerEXT", SecondaryColorPointerEXT);
		Functor("glSecondaryColorPointerListIBM", SecondaryColorPointerListIBM);
		Functor("glSelectBuffer", SelectBuffer);
		Functor("glSelectPerfMonitorCountersAMD", SelectPerfMonitorCountersAMD);
		Functor("glSeparableFilter2D", SeparableFilter2D);
		Functor("glSeparableFilter2DEXT", SeparableFilter2DEXT);
		Functor("glSetFenceAPPLE", SetFenceAPPLE);
		Functor("glSetFenceNV", SetFenceNV);
		Functor("glSetFragmentShaderConstantATI", SetFragmentShaderConstantATI);
		Functor("glSetInvariantEXT", SetInvariantEXT);
		Functor("glSetLocalConstantEXT", SetLocalConstantEXT);
		Functor("glShadeModel", ShadeModel);
		Functor("glShaderOp1EXT", ShaderOp1EXT);
		Functor("glShaderOp2EXT", ShaderOp2EXT);
		Functor("glShaderOp3EXT", ShaderOp3EXT);
		Functor("glShaderSource", ShaderSource);
		Functor("glShaderSourceARB", ShaderSourceARB);
		Functor("glSharpenTexFuncSGIS", SharpenTexFuncSGIS);
		Functor("glSpriteParameterfSGIX", SpriteParameterfSGIX);
		Functor("glSpriteParameterfvSGIX", SpriteParameterfvSGIX);
		Functor("glSpriteParameteriSGIX", SpriteParameteriSGIX);
		Functor("glSpriteParameterivSGIX", SpriteParameterivSGIX);
		Functor("glStartInstrumentsSGIX", StartInstrumentsSGIX);
		Functor("glStencilClearTagEXT", StencilClearTagEXT);
		Functor("glStencilFunc", StencilFunc);
		Functor("glStencilFuncSeparate", StencilFuncSeparate);
		Functor("glStencilFuncSeparateATI", StencilFuncSeparateATI);
		Functor("glStencilMask", StencilMask);
		Functor("glStencilMaskSeparate", StencilMaskSeparate);
		Functor("glStencilOp", StencilOp);
		Functor("glStencilOpSeparate", StencilOpSeparate);
		Functor("glStencilOpSeparateATI", StencilOpSeparateATI);
		Functor("glStopInstrumentsSGIX", StopInstrumentsSGIX);
		Functor("glStringMarkerGREMEDY", StringMarkerGREMEDY);
		Functor("glSwizzleEXT", SwizzleEXT);
		Functor("glTagSampleBufferSGIX", TagSampleBufferSGIX);
		Functor("glTangent3bEXT", Tangent3bEXT);
		Functor("glTangent3bvEXT", Tangent3bvEXT);
		Functor("glTangent3dEXT", Tangent3dEXT);
		Functor("glTangent3dvEXT", Tangent3dvEXT);
		Functor("glTangent3fEXT", Tangent3fEXT);
		Functor("glTangent3fvEXT", Tangent3fvEXT);
		Functor("glTangent3iEXT", Tangent3iEXT);
		Functor("glTangent3ivEXT", Tangent3ivEXT);
		Functor("glTangent3sEXT", Tangent3sEXT);
		Functor("glTangent3svEXT", Tangent3svEXT);
		Functor("glTangentPointerEXT", TangentPointerEXT);
		Functor("glTbufferMask3DFX", TbufferMask3DFX);
		Functor("glTessellationFactorAMD", TessellationFactorAMD);
		Functor("glTessellationModeAMD", TessellationModeAMD);
		Functor("glTestFenceAPPLE", TestFenceAPPLE);
		Functor("glTestFenceNV", TestFenceNV);
		Functor("glTestObjectAPPLE", TestObjectAPPLE);
		Functor("glTexBuffer", TexBuffer);
		Functor("glTexBufferARB", TexBufferARB);
		Functor("glTexBufferEXT", TexBufferEXT);
		Functor("glTexBumpParameterfvATI", TexBumpParameterfvATI);
		Functor("glTexBumpParameterivATI", TexBumpParameterivATI);
		Functor("glTexCoord1d", TexCoord1d);
		Functor("glTexCoord1dv", TexCoord1dv);
		Functor("glTexCoord1f", TexCoord1f);
		Functor("glTexCoord1fv", TexCoord1fv);
		Functor("glTexCoord1hNV", TexCoord1hNV);
		Functor("glTexCoord1hvNV", TexCoord1hvNV);
		Functor("glTexCoord1i", TexCoord1i);
		Functor("glTexCoord1iv", TexCoord1iv);
		Functor("glTexCoord1s", TexCoord1s);
		Functor("glTexCoord1sv", TexCoord1sv);
		Functor("glTexCoord2d", TexCoord2d);
		Functor("glTexCoord2dv", TexCoord2dv);
		Functor("glTexCoord2f", TexCoord2f);
		Functor("glTexCoord2fColor3fVertex3fSUN", TexCoord2fColor3fVertex3fSUN);
		Functor("glTexCoord2fColor3fVertex3fvSUN", TexCoord2fColor3fVertex3fvSUN);
		Functor("glTexCoord2fColor4fNormal3fVertex3fSUN", TexCoord2fColor4fNormal3fVertex3fSUN);
		Functor("glTexCoord2fColor4fNormal3fVertex3fvSUN", TexCoord2fColor4fNormal3fVertex3fvSUN);
		Functor("glTexCoord2fColor4ubVertex3fSUN", TexCoord2fColor4ubVertex3fSUN);
		Functor("glTexCoord2fColor4ubVertex3fvSUN", TexCoord2fColor4ubVertex3fvSUN);
		Functor("glTexCoord2fNormal3fVertex3fSUN", TexCoord2fNormal3fVertex3fSUN);
		Functor("glTexCoord2fNormal3fVertex3fvSUN", TexCoord2fNormal3fVertex3fvSUN);
		Functor("glTexCoord2fVertex3fSUN", TexCoord2fVertex3fSUN);
		Functor("glTexCoord2fVertex3fvSUN", TexCoord2fVertex3fvSUN);
		Functor("glTexCoord2fv", TexCoord2fv);
		Functor("glTexCoord2hNV", TexCoord2hNV);
		Functor("glTexCoord2hvNV", TexCoord2hvNV);
		Functor("glTexCoord2i", TexCoord2i);
		Functor("glTexCoord2iv", TexCoord2iv);
		Functor("glTexCoord2s", TexCoord2s);
		Functor("glTexCoord2sv", TexCoord2sv);
		Functor("glTexCoord3d", TexCoord3d);
		Functor("glTexCoord3dv", TexCoord3dv);
		Functor("glTexCoord3f", TexCoord3f);
		Functor("glTexCoord3fv", TexCoord3fv);
		Functor("glTexCoord3hNV", TexCoord3hNV);
		Functor("glTexCoord3hvNV", TexCoord3hvNV);
		Functor("glTexCoord3i", TexCoord3i);
		Functor("glTexCoord3iv", TexCoord3iv);
		Functor("glTexCoord3s", TexCoord3s);
		Functor("glTexCoord3sv", TexCoord3sv);
		Functor("glTexCoord4d", TexCoord4d);
		Functor("glTexCoord4dv", TexCoord4dv);
		Functor("glTexCoord4f", TexCoord4f);
		Functor("glTexCoord4fColor4fNormal3fVertex4fSUN", TexCoord4fColor4fNormal3fVertex4fSUN);
		Functor("glTexCoord4fColor4fNormal3fVertex4fvSUN", TexCoord4fColor4fNormal3fVertex4fvSUN);
		Functor("glTexCoord4fVertex4fSUN", TexCoord4fVertex4fSUN);
		Functor("glTexCoord4fVertex4fvSUN", TexCoord4fVertex4fvSUN);
		Functor("glTexCoord4fv", TexCoord4fv);
		Functor("glTexCoord4hNV", TexCoord4hNV);
		Functor("glTexCoord4hvNV", TexCoord4hvNV);
		Functor("glTexCoord4i", TexCoord4i);
		Functor("glTexCoord4iv", TexCoord4iv);
		Functor("glTexCoord4s", TexCoord4s);
		Functor("glTexCoord4sv", TexCoord4sv);
		Functor("glTexCoordFormatNV", TexCoordFormatNV);
		Functor("glTexCoordP1ui", TexCoordP1ui);
		Functor("glTexCoordP1uiv", TexCoordP1uiv);
		Functor("glTexCoordP2ui", TexCoordP2ui);
		Functor("glTexCoordP2uiv", TexCoordP2uiv);
		Functor("glTexCoordP3ui", TexCoordP3ui);
		Functor("glTexCoordP3uiv", TexCoordP3uiv);
		Functor("glTexCoordP4ui", TexCoordP4ui);
		Functor("glTexCoordP4uiv", TexCoordP4uiv);
		Functor("glTexCoordPointer", TexCoordPointer);
		Functor("glTexCoordPointerEXT", TexCoordPointerEXT);
		Functor("glTexCoordPointerListIBM", TexCoordPointerListIBM);
		Functor("glTexCoordPointervINTEL", TexCoordPointervINTEL);
		Functor("glTexEnvf", TexEnvf);
		Functor("glTexEnvfv", TexEnvfv);
		Functor("glTexEnvi", TexEnvi);
		Functor("glTexEnviv", TexEnviv);
		Functor("glTexFilterFuncSGIS", TexFilterFuncSGIS);
		Functor("glTexGend", TexGend);
		Functor("glTexGendv", TexGendv);
		Functor("glTexGenf", TexGenf);
		Functor("glTexGenfv", TexGenfv);
		Functor("glTexGeni", TexGeni);
		Functor("glTexGeniv", TexGeniv);
		Functor("glTexImage1D", TexImage1D);
		Functor("glTexImage2D", TexImage2D);
		Functor("glTexImage2DMultisample", TexImage2DMultisample);
		Functor("glTexImage3D", TexImage3D);
		Functor("glTexImage3DEXT", TexImage3DEXT);
		Functor("glTexImage3DMultisample", TexImage3DMultisample);
		Functor("glTexImage4DSGIS", TexImage4DSGIS);
		Functor("glTexParameterIiv", TexParameterIiv);
		Functor("glTexParameterIivEXT", TexParameterIivEXT);
		Functor("glTexParameterIuiv", TexParameterIuiv);
		Functor("glTexParameterIuivEXT", TexParameterIuivEXT);
		Functor("glTexParameterf", TexParameterf);
		Functor("glTexParameterfv", TexParameterfv);
		Functor("glTexParameteri", TexParameteri);
		Functor("glTexParameteriv", TexParameteriv);
		Functor("glTexRenderbufferNV", TexRenderbufferNV);
		Functor("glTexSubImage1D", TexSubImage1D);
		Functor("glTexSubImage1DEXT", TexSubImage1DEXT);
		Functor("glTexSubImage2D", TexSubImage2D);
		Functor("glTexSubImage2DEXT", TexSubImage2DEXT);
		Functor("glTexSubImage3D", TexSubImage3D);
		Functor("glTexSubImage3DEXT", TexSubImage3DEXT);
		Functor("glTexSubImage4DSGIS", TexSubImage4DSGIS);
		Functor("glTextureBarrierNV", TextureBarrierNV);
		Functor("glTextureBufferEXT", TextureBufferEXT);
		Functor("glTextureColorMaskSGIS", TextureColorMaskSGIS);
		Functor("glTextureImage1DEXT", TextureImage1DEXT);
		Functor("glTextureImage2DEXT", TextureImage2DEXT);
		Functor("glTextureImage3DEXT", TextureImage3DEXT);
		Functor("glTextureLightEXT", TextureLightEXT);
		Functor("glTextureMaterialEXT", TextureMaterialEXT);
		Functor("glTextureNormalEXT", TextureNormalEXT);
		Functor("glTextureParameterIivEXT", TextureParameterIivEXT);
		Functor("glTextureParameterIuivEXT", TextureParameterIuivEXT);
		Functor("glTextureParameterfEXT", TextureParameterfEXT);
		Functor("glTextureParameterfvEXT", TextureParameterfvEXT);
		Functor("glTextureParameteriEXT", TextureParameteriEXT);
		Functor("glTextureParameterivEXT", TextureParameterivEXT);
		Functor("glTextureRangeAPPLE", TextureRangeAPPLE);
		Functor("glTextureRenderbufferEXT", TextureRenderbufferEXT);
		Functor("glTextureSubImage1DEXT", TextureSubImage1DEXT);
		Functor("glTextureSubImage2DEXT", TextureSubImage2DEXT);
		Functor("glTextureSubImage3DEXT", TextureSubImage3DEXT);
		Functor("glTrackMatrixNV", TrackMatrixNV);
		Functor("glTransformFeedbackAttribsNV", TransformFeedbackAttribsNV);
		Functor("glTransformFeedbackVaryings", TransformFeedbackVaryings);
		Functor("glTransformFeedbackVaryingsEXT", TransformFeedbackVaryingsEXT);
		Functor("glTransformFeedbackVaryingsNV", TransformFeedbackVaryingsNV);
		Functor("glTranslated", Translated);
		Functor("glTranslatef", Translatef);
		Functor("glUniform1d", Uniform1d);
		Functor("glUniform1dv", Uniform1dv);
		Functor("glUniform1f", Uniform1f);
		Functor("glUniform1fARB", Uniform1fARB);
		Functor("glUniform1fv", Uniform1fv);
		Functor("glUniform1fvARB", Uniform1fvARB);
		Functor("glUniform1i", Uniform1i);
		Functor("glUniform1iARB", Uniform1iARB);
		Functor("glUniform1iv", Uniform1iv);
		Functor("glUniform1ivARB", Uniform1ivARB);
		Functor("glUniform1ui", Uniform1ui);
		Functor("glUniform1uiEXT", Uniform1uiEXT);
		Functor("glUniform1uiv", Uniform1uiv);
		Functor("glUniform1uivEXT", Uniform1uivEXT);
		Functor("glUniform2d", Uniform2d);
		Functor("glUniform2dv", Uniform2dv);
		Functor("glUniform2f", Uniform2f);
		Functor("glUniform2fARB", Uniform2fARB);
		Functor("glUniform2fv", Uniform2fv);
		Functor("glUniform2fvARB", Uniform2fvARB);
		Functor("glUniform2i", Uniform2i);
		Functor("glUniform2iARB", Uniform2iARB);
		Functor("glUniform2iv", Uniform2iv);
		Functor("glUniform2ivARB", Uniform2ivARB);
		Functor("glUniform2ui", Uniform2ui);
		Functor("glUniform2uiEXT", Uniform2uiEXT);
		Functor("glUniform2uiv", Uniform2uiv);
		Functor("glUniform2uivEXT", Uniform2uivEXT);
		Functor("glUniform3d", Uniform3d);
		Functor("glUniform3dv", Uniform3dv);
		Functor("glUniform3f", Uniform3f);
		Functor("glUniform3fARB", Uniform3fARB);
		Functor("glUniform3fv", Uniform3fv);
		Functor("glUniform3fvARB", Uniform3fvARB);
		Functor("glUniform3i", Uniform3i);
		Functor("glUniform3iARB", Uniform3iARB);
		Functor("glUniform3iv", Uniform3iv);
		Functor("glUniform3ivARB", Uniform3ivARB);
		Functor("glUniform3ui", Uniform3ui);
		Functor("glUniform3uiEXT", Uniform3uiEXT);
		Functor("glUniform3uiv", Uniform3uiv);
		Functor("glUniform3uivEXT", Uniform3uivEXT);
		Functor("glUniform4d", Uniform4d);
		Functor("glUniform4dv", Uniform4dv);
		Functor("glUniform4f", Uniform4f);
		Functor("glUniform4fARB", Uniform4fARB);
		Functor("glUniform4fv", Uniform4fv);
		Functor("glUniform4fvARB", Uniform4fvARB);
		Functor("glUniform4i", Uniform4i);
		Functor("glUniform4iARB", Uniform4iARB);
		Functor("glUniform4iv", Uniform4iv);
		Functor("glUniform4ivARB", Uniform4ivARB);
		Functor("glUniform4ui", Uniform4ui);
		Functor("glUniform4uiEXT", Uniform4uiEXT);
		Functor("glUniform4uiv", Uniform4uiv);
		Functor("glUniform4uivEXT", Uniform4uivEXT);
		Functor("glUniformBlockBinding", UniformBlockBinding);
		Functor("glUniformBufferEXT", UniformBufferEXT);
		Functor("glUniformMatrix2dv", UniformMatrix2dv);
		Functor("glUniformMatrix2fv", UniformMatrix2fv);
		Functor("glUniformMatrix2fvARB", UniformMatrix2fvARB);
		Functor("glUniformMatrix2x3dv", UniformMatrix2x3dv);
		Functor("glUniformMatrix2x3fv", UniformMatrix2x3fv);
		Functor("glUniformMatrix2x4dv", UniformMatrix2x4dv);
		Functor("glUniformMatrix2x4fv", UniformMatrix2x4fv);
		Functor("glUniformMatrix3dv", UniformMatrix3dv);
		Functor("glUniformMatrix3fv", UniformMatrix3fv);
		Functor("glUniformMatrix3fvARB", UniformMatrix3fvARB);
		Functor("glUniformMatrix3x2dv", UniformMatrix3x2dv);
		Functor("glUniformMatrix3x2fv", UniformMatrix3x2fv);
		Functor("glUniformMatrix3x4dv", UniformMatrix3x4dv);
		Functor("glUniformMatrix3x4fv", UniformMatrix3x4fv);
		Functor("glUniformMatrix4dv", UniformMatrix4dv);
		Functor("glUniformMatrix4fv", UniformMatrix4fv);
		Functor("glUniformMatrix4fvARB", UniformMatrix4fvARB);
		Functor("glUniformMatrix4x2dv", UniformMatrix4x2dv);
		Functor("glUniformMatrix4x2fv", UniformMatrix4x2fv);
		Functor("glUniformMatrix4x3dv", UniformMatrix4x3dv);
		Functor("glUniformMatrix4x3fv", UniformMatrix4x3fv);
		Functor("glUniformSubroutinesuiv", UniformSubroutinesuiv);
		Functor("glUniformui64NV", Uniformui64NV);
		Functor("glUniformui64vNV", Uniformui64vNV);
		Functor("glUnlockArraysEXT", UnlockArraysEXT);
		Functor("glUnmapBuffer", UnmapBuffer);
		Functor("glUnmapBufferARB", UnmapBufferARB);
		Functor("glUnmapNamedBufferEXT", UnmapNamedBufferEXT);
		Functor("glUnmapObjectBufferATI", UnmapObjectBufferATI);
		Functor("glUpdateObjectBufferATI", UpdateObjectBufferATI);
		Functor("glUseProgram", UseProgram);
		Functor("glUseProgramObjectARB", UseProgramObjectARB);
		Functor("glUseShaderProgramEXT", UseShaderProgramEXT);
		Functor("glValidateProgram", ValidateProgram);
		Functor("glValidateProgramARB", ValidateProgramARB);
		Functor("glVariantArrayObjectATI", VariantArrayObjectATI);
		Functor("glVariantPointerEXT", VariantPointerEXT);
		Functor("glVariantbvEXT", VariantbvEXT);
		Functor("glVariantdvEXT", VariantdvEXT);
		Functor("glVariantfvEXT", VariantfvEXT);
		Functor("glVariantivEXT", VariantivEXT);
		Functor("glVariantsvEXT", VariantsvEXT);
		Functor("glVariantubvEXT", VariantubvEXT);
		Functor("glVariantuivEXT", VariantuivEXT);
		Functor("glVariantusvEXT", VariantusvEXT);
		Functor("glVertex2d", Vertex2d);
		Functor("glVertex2dv", Vertex2dv);
		Functor("glVertex2f", Vertex2f);
		Functor("glVertex2fv", Vertex2fv);
		Functor("glVertex2hNV", Vertex2hNV);
		Functor("glVertex2hvNV", Vertex2hvNV);
		Functor("glVertex2i", Vertex2i);
		Functor("glVertex2iv", Vertex2iv);
		Functor("glVertex2s", Vertex2s);
		Functor("glVertex2sv", Vertex2sv);
		Functor("glVertex3d", Vertex3d);
		Functor("glVertex3dv", Vertex3dv);
		Functor("glVertex3f", Vertex3f);
		Functor("glVertex3fv", Vertex3fv);
		Functor("glVertex3hNV", Vertex3hNV);
		Functor("glVertex3hvNV", Vertex3hvNV);
		Functor("glVertex3i", Vertex3i);
		Functor("glVertex3iv", Vertex3iv);
		Functor("glVertex3s", Vertex3s);
		Functor("glVertex3sv", Vertex3sv);
		Functor("glVertex4d", Vertex4d);
		Functor("glVertex4dv", Vertex4dv);
		Functor("glVertex4f", Vertex4f);
		Functor("glVertex4fv", Vertex4fv);
		Functor("glVertex4hNV", Vertex4hNV);
		Functor("glVertex4hvNV", Vertex4hvNV);
		Functor("glVertex4i", Vertex4i);
		Functor("glVertex4iv", Vertex4iv);
		Functor("glVertex4s", Vertex4s);
		Functor("glVertex4sv", Vertex4sv);
		Functor("glVertexArrayParameteriAPPLE", VertexArrayParameteriAPPLE);
		Functor("glVertexArrayRangeAPPLE", VertexArrayRangeAPPLE);
		Functor("glVertexArrayRangeNV", VertexArrayRangeNV);
		Functor("glVertexAttrib1d", VertexAttrib1d);
		Functor("glVertexAttrib1dARB", VertexAttrib1dARB);
		Functor("glVertexAttrib1dNV", VertexAttrib1dNV);
		Functor("glVertexAttrib1dv", VertexAttrib1dv);
		Functor("glVertexAttrib1dvARB", VertexAttrib1dvARB);
		Functor("glVertexAttrib1dvNV", VertexAttrib1dvNV);
		Functor("glVertexAttrib1f", VertexAttrib1f);
		Functor("glVertexAttrib1fARB", VertexAttrib1fARB);
		Functor("glVertexAttrib1fNV", VertexAttrib1fNV);
		Functor("glVertexAttrib1fv", VertexAttrib1fv);
		Functor("glVertexAttrib1fvARB", VertexAttrib1fvARB);
		Functor("glVertexAttrib1fvNV", VertexAttrib1fvNV);
		Functor("glVertexAttrib1hNV", VertexAttrib1hNV);
		Functor("glVertexAttrib1hvNV", VertexAttrib1hvNV);
		Functor("glVertexAttrib1s", VertexAttrib1s);
		Functor("glVertexAttrib1sARB", VertexAttrib1sARB);
		Functor("glVertexAttrib1sNV", VertexAttrib1sNV);
		Functor("glVertexAttrib1sv", VertexAttrib1sv);
		Functor("glVertexAttrib1svARB", VertexAttrib1svARB);
		Functor("glVertexAttrib1svNV", VertexAttrib1svNV);
		Functor("glVertexAttrib2d", VertexAttrib2d);
		Functor("glVertexAttrib2dARB", VertexAttrib2dARB);
		Functor("glVertexAttrib2dNV", VertexAttrib2dNV);
		Functor("glVertexAttrib2dv", VertexAttrib2dv);
		Functor("glVertexAttrib2dvARB", VertexAttrib2dvARB);
		Functor("glVertexAttrib2dvNV", VertexAttrib2dvNV);
		Functor("glVertexAttrib2f", VertexAttrib2f);
		Functor("glVertexAttrib2fARB", VertexAttrib2fARB);
		Functor("glVertexAttrib2fNV", VertexAttrib2fNV);
		Functor("glVertexAttrib2fv", VertexAttrib2fv);
		Functor("glVertexAttrib2fvARB", VertexAttrib2fvARB);
		Functor("glVertexAttrib2fvNV", VertexAttrib2fvNV);
		Functor("glVertexAttrib2hNV", VertexAttrib2hNV);
		Functor("glVertexAttrib2hvNV", VertexAttrib2hvNV);
		Functor("glVertexAttrib2s", VertexAttrib2s);
		Functor("glVertexAttrib2sARB", VertexAttrib2sARB);
		Functor("glVertexAttrib2sNV", VertexAttrib2sNV);
		Functor("glVertexAttrib2sv", VertexAttrib2sv);
		Functor("glVertexAttrib2svARB", VertexAttrib2svARB);
		Functor("glVertexAttrib2svNV", VertexAttrib2svNV);
		Functor("glVertexAttrib3d", VertexAttrib3d);
		Functor("glVertexAttrib3dARB", VertexAttrib3dARB);
		Functor("glVertexAttrib3dNV", VertexAttrib3dNV);
		Functor("glVertexAttrib3dv", VertexAttrib3dv);
		Functor("glVertexAttrib3dvARB", VertexAttrib3dvARB);
		Functor("glVertexAttrib3dvNV", VertexAttrib3dvNV);
		Functor("glVertexAttrib3f", VertexAttrib3f);
		Functor("glVertexAttrib3fARB", VertexAttrib3fARB);
		Functor("glVertexAttrib3fNV", VertexAttrib3fNV);
		Functor("glVertexAttrib3fv", VertexAttrib3fv);
		Functor("glVertexAttrib3fvARB", VertexAttrib3fvARB);
		Functor("glVertexAttrib3fvNV", VertexAttrib3fvNV);
		Functor("glVertexAttrib3hNV", VertexAttrib3hNV);
		Functor("glVertexAttrib3hvNV", VertexAttrib3hvNV);
		Functor("glVertexAttrib3s", VertexAttrib3s);
		Functor("glVertexAttrib3sARB", VertexAttrib3sARB);
		Functor("glVertexAttrib3sNV", VertexAttrib3sNV);
		Functor("glVertexAttrib3sv", VertexAttrib3sv);
		Functor("glVertexAttrib3svARB", VertexAttrib3svARB);
		Functor("glVertexAttrib3svNV", VertexAttrib3svNV);
		Functor("glVertexAttrib4Nbv", VertexAttrib4Nbv);
		Functor("glVertexAttrib4NbvARB", VertexAttrib4NbvARB);
		Functor("glVertexAttrib4Niv", VertexAttrib4Niv);
		Functor("glVertexAttrib4NivARB", VertexAttrib4NivARB);
		Functor("glVertexAttrib4Nsv", VertexAttrib4Nsv);
		Functor("glVertexAttrib4NsvARB", VertexAttrib4NsvARB);
		Functor("glVertexAttrib4Nub", VertexAttrib4Nub);
		Functor("glVertexAttrib4NubARB", VertexAttrib4NubARB);
		Functor("glVertexAttrib4Nubv", VertexAttrib4Nubv);
		Functor("glVertexAttrib4NubvARB", VertexAttrib4NubvARB);
		Functor("glVertexAttrib4Nuiv", VertexAttrib4Nuiv);
		Functor("glVertexAttrib4NuivARB", VertexAttrib4NuivARB);
		Functor("glVertexAttrib4Nusv", VertexAttrib4Nusv);
		Functor("glVertexAttrib4NusvARB", VertexAttrib4NusvARB);
		Functor("glVertexAttrib4bv", VertexAttrib4bv);
		Functor("glVertexAttrib4bvARB", VertexAttrib4bvARB);
		Functor("glVertexAttrib4d", VertexAttrib4d);
		Functor("glVertexAttrib4dARB", VertexAttrib4dARB);
		Functor("glVertexAttrib4dNV", VertexAttrib4dNV);
		Functor("glVertexAttrib4dv", VertexAttrib4dv);
		Functor("glVertexAttrib4dvARB", VertexAttrib4dvARB);
		Functor("glVertexAttrib4dvNV", VertexAttrib4dvNV);
		Functor("glVertexAttrib4f", VertexAttrib4f);
		Functor("glVertexAttrib4fARB", VertexAttrib4fARB);
		Functor("glVertexAttrib4fNV", VertexAttrib4fNV);
		Functor("glVertexAttrib4fv", VertexAttrib4fv);
		Functor("glVertexAttrib4fvARB", VertexAttrib4fvARB);
		Functor("glVertexAttrib4fvNV", VertexAttrib4fvNV);
		Functor("glVertexAttrib4hNV", VertexAttrib4hNV);
		Functor("glVertexAttrib4hvNV", VertexAttrib4hvNV);
		Functor("glVertexAttrib4iv", VertexAttrib4iv);
		Functor("glVertexAttrib4ivARB", VertexAttrib4ivARB);
		Functor("glVertexAttrib4s", VertexAttrib4s);
		Functor("glVertexAttrib4sARB", VertexAttrib4sARB);
		Functor("glVertexAttrib4sNV", VertexAttrib4sNV);
		Functor("glVertexAttrib4sv", VertexAttrib4sv);
		Functor("glVertexAttrib4svARB", VertexAttrib4svARB);
		Functor("glVertexAttrib4svNV", VertexAttrib4svNV);
		Functor("glVertexAttrib4ubNV", VertexAttrib4ubNV);
		Functor("glVertexAttrib4ubv", VertexAttrib4ubv);
		Functor("glVertexAttrib4ubvARB", VertexAttrib4ubvARB);
		Functor("glVertexAttrib4ubvNV", VertexAttrib4ubvNV);
		Functor("glVertexAttrib4uiv", VertexAttrib4uiv);
		Functor("glVertexAttrib4uivARB", VertexAttrib4uivARB);
		Functor("glVertexAttrib4usv", VertexAttrib4usv);
		Functor("glVertexAttrib4usvARB", VertexAttrib4usvARB);
		Functor("glVertexAttribArrayObjectATI", VertexAttribArrayObjectATI);
		Functor("glVertexAttribDivisorARB", VertexAttribDivisorARB);
		Functor("glVertexAttribFormatNV", VertexAttribFormatNV);
		Functor("glVertexAttribI1i", VertexAttribI1i);
		Functor("glVertexAttribI1iEXT", VertexAttribI1iEXT);
		Functor("glVertexAttribI1iv", VertexAttribI1iv);
		Functor("glVertexAttribI1ivEXT", VertexAttribI1ivEXT);
		Functor("glVertexAttribI1ui", VertexAttribI1ui);
		Functor("glVertexAttribI1uiEXT", VertexAttribI1uiEXT);
		Functor("glVertexAttribI1uiv", VertexAttribI1uiv);
		Functor("glVertexAttribI1uivEXT", VertexAttribI1uivEXT);
		Functor("glVertexAttribI2i", VertexAttribI2i);
		Functor("glVertexAttribI2iEXT", VertexAttribI2iEXT);
		Functor("glVertexAttribI2iv", VertexAttribI2iv);
		Functor("glVertexAttribI2ivEXT", VertexAttribI2ivEXT);
		Functor("glVertexAttribI2ui", VertexAttribI2ui);
		Functor("glVertexAttribI2uiEXT", VertexAttribI2uiEXT);
		Functor("glVertexAttribI2uiv", VertexAttribI2uiv);
		Functor("glVertexAttribI2uivEXT", VertexAttribI2uivEXT);
		Functor("glVertexAttribI3i", VertexAttribI3i);
		Functor("glVertexAttribI3iEXT", VertexAttribI3iEXT);
		Functor("glVertexAttribI3iv", VertexAttribI3iv);
		Functor("glVertexAttribI3ivEXT", VertexAttribI3ivEXT);
		Functor("glVertexAttribI3ui", VertexAttribI3ui);
		Functor("glVertexAttribI3uiEXT", VertexAttribI3uiEXT);
		Functor("glVertexAttribI3uiv", VertexAttribI3uiv);
		Functor("glVertexAttribI3uivEXT", VertexAttribI3uivEXT);
		Functor("glVertexAttribI4bv", VertexAttribI4bv);
		Functor("glVertexAttribI4bvEXT", VertexAttribI4bvEXT);
		Functor("glVertexAttribI4i", VertexAttribI4i);
		Functor("glVertexAttribI4iEXT", VertexAttribI4iEXT);
		Functor("glVertexAttribI4iv", VertexAttribI4iv);
		Functor("glVertexAttribI4ivEXT", VertexAttribI4ivEXT);
		Functor("glVertexAttribI4sv", VertexAttribI4sv);
		Functor("glVertexAttribI4svEXT", VertexAttribI4svEXT);
		Functor("glVertexAttribI4ubv", VertexAttribI4ubv);
		Functor("glVertexAttribI4ubvEXT", VertexAttribI4ubvEXT);
		Functor("glVertexAttribI4ui", VertexAttribI4ui);
		Functor("glVertexAttribI4uiEXT", VertexAttribI4uiEXT);
		Functor("glVertexAttribI4uiv", VertexAttribI4uiv);
		Functor("glVertexAttribI4uivEXT", VertexAttribI4uivEXT);
		Functor("glVertexAttribI4usv", VertexAttribI4usv);
		Functor("glVertexAttribI4usvEXT", VertexAttribI4usvEXT);
		Functor("glVertexAttribIFormatNV", VertexAttribIFormatNV);
		Functor("glVertexAttribIPointer", VertexAttribIPointer);
		Functor("glVertexAttribIPointerEXT", VertexAttribIPointerEXT);
		Functor("glVertexAttribP1ui", VertexAttribP1ui);
		Functor("glVertexAttribP1uiv", VertexAttribP1uiv);
		Functor("glVertexAttribP2ui", VertexAttribP2ui);
		Functor("glVertexAttribP2uiv", VertexAttribP2uiv);
		Functor("glVertexAttribP3ui", VertexAttribP3ui);
		Functor("glVertexAttribP3uiv", VertexAttribP3uiv);
		Functor("glVertexAttribP4ui", VertexAttribP4ui);
		Functor("glVertexAttribP4uiv", VertexAttribP4uiv);
		Functor("glVertexAttribPointer", VertexAttribPointer);
		Functor("glVertexAttribPointerARB", VertexAttribPointerARB);
		Functor("glVertexAttribPointerNV", VertexAttribPointerNV);
		Functor("glVertexAttribs1dvNV", VertexAttribs1dvNV);
		Functor("glVertexAttribs1fvNV", VertexAttribs1fvNV);
		Functor("glVertexAttribs1hvNV", VertexAttribs1hvNV);
		Functor("glVertexAttribs1svNV", VertexAttribs1svNV);
		Functor("glVertexAttribs2dvNV", VertexAttribs2dvNV);
		Functor("glVertexAttribs2fvNV", VertexAttribs2fvNV);
		Functor("glVertexAttribs2hvNV", VertexAttribs2hvNV);
		Functor("glVertexAttribs2svNV", VertexAttribs2svNV);
		Functor("glVertexAttribs3dvNV", VertexAttribs3dvNV);
		Functor("glVertexAttribs3fvNV", VertexAttribs3fvNV);
		Functor("glVertexAttribs3hvNV", VertexAttribs3hvNV);
		Functor("glVertexAttribs3svNV", VertexAttribs3svNV);
		Functor("glVertexAttribs4dvNV", VertexAttribs4dvNV);
		Functor("glVertexAttribs4fvNV", VertexAttribs4fvNV);
		Functor("glVertexAttribs4hvNV", VertexAttribs4hvNV);
		Functor("glVertexAttribs4svNV", VertexAttribs4svNV);
		Functor("glVertexAttribs4ubvNV", VertexAttribs4ubvNV);
		Functor("glVertexBlendARB", VertexBlendARB);
		Functor("glVertexBlendEnvfATI", VertexBlendEnvfATI);
		Functor("glVertexBlendEnviATI", VertexBlendEnviATI);
		Functor("glVertexFormatNV", VertexFormatNV);
		Functor("glVertexP2ui", VertexP2ui);
		Functor("glVertexP2uiv", VertexP2uiv);
		Functor("glVertexP3ui", VertexP3ui);
		Functor("glVertexP3uiv", VertexP3uiv);
		Functor("glVertexP4ui", VertexP4ui);
		Functor("glVertexP4uiv", VertexP4uiv);
		Functor("glVertexPointer", VertexPointer);
		Functor("glVertexPointerEXT", VertexPointerEXT);
		Functor("glVertexPointerListIBM", VertexPointerListIBM);
		Functor("glVertexPointervINTEL", VertexPointervINTEL);
		Functor("glVertexStream1dATI", VertexStream1dATI);
		Functor("glVertexStream1dvATI", VertexStream1dvATI);
		Functor("glVertexStream1fATI", VertexStream1fATI);
		Functor("glVertexStream1fvATI", VertexStream1fvATI);
		Functor("glVertexStream1iATI", VertexStream1iATI);
		Functor("glVertexStream1ivATI", VertexStream1ivATI);
		Functor("glVertexStream1sATI", VertexStream1sATI);
		Functor("glVertexStream1svATI", VertexStream1svATI);
		Functor("glVertexStream2dATI", VertexStream2dATI);
		Functor("glVertexStream2dvATI", VertexStream2dvATI);
		Functor("glVertexStream2fATI", VertexStream2fATI);
		Functor("glVertexStream2fvATI", VertexStream2fvATI);
		Functor("glVertexStream2iATI", VertexStream2iATI);
		Functor("glVertexStream2ivATI", VertexStream2ivATI);
		Functor("glVertexStream2sATI", VertexStream2sATI);
		Functor("glVertexStream2svATI", VertexStream2svATI);
		Functor("glVertexStream3dATI", VertexStream3dATI);
		Functor("glVertexStream3dvATI", VertexStream3dvATI);
		Functor("glVertexStream3fATI", VertexStream3fATI);
		Functor("glVertexStream3fvATI", VertexStream3fvATI);
		Functor("glVertexStream3iATI", VertexStream3iATI);
		Functor("glVertexStream3ivATI", VertexStream3ivATI);
		Functor("glVertexStream3sATI", VertexStream3sATI);
		Functor("glVertexStream3svATI", VertexStream3svATI);
		Functor("glVertexStream4dATI", VertexStream4dATI);
		Functor("glVertexStream4dvATI", VertexStream4dvATI);
		Functor("glVertexStream4fATI", VertexStream4fATI);
		Functor("glVertexStream4fvATI", VertexStream4fvATI);
		Functor("glVertexStream4iATI", VertexStream4iATI);
		Functor("glVertexStream4ivATI", VertexStream4ivATI);
		Functor("glVertexStream4sATI", VertexStream4sATI);
		Functor("glVertexStream4svATI", VertexStream4svATI);
		Functor("glVertexWeightPointerEXT", VertexWeightPointerEXT);
		Functor("glVertexWeightfEXT", VertexWeightfEXT);
		Functor("glVertexWeightfvEXT", VertexWeightfvEXT);
		Functor("glVertexWeighthNV", VertexWeighthNV);
		Functor("glVertexWeighthvNV", VertexWeighthvNV);
		Functor("glVideoCaptureNV", VideoCaptureNV);
		Functor("glVideoCaptureStreamParameterdvNV", VideoCaptureStreamParameterdvNV);
		Functor("glVideoCaptureStreamParameterfvNV", VideoCaptureStreamParameterfvNV);
		Functor("glVideoCaptureStreamParameterivNV", VideoCaptureStreamParameterivNV);
		Functor("glViewport", Viewport);
		Functor("glWaitSync", WaitSync);
		Functor("glWeightPointerARB", WeightPointerARB);
		Functor("glWeightbvARB", WeightbvARB);
		Functor("glWeightdvARB", WeightdvARB);
		Functor("glWeightfvARB", WeightfvARB);
		Functor("glWeightivARB", WeightivARB);
		Functor("glWeightsvARB", WeightsvARB);
		Functor("glWeightubvARB", WeightubvARB);
		Functor("glWeightuivARB", WeightuivARB);
		Functor("glWeightusvARB", WeightusvARB);
		Functor("glWindowPos2d", WindowPos2d);
		Functor("glWindowPos2dARB", WindowPos2dARB);
		Functor("glWindowPos2dMESA", WindowPos2dMESA);
		Functor("glWindowPos2dv", WindowPos2dv);
		Functor("glWindowPos2dvARB", WindowPos2dvARB);
		Functor("glWindowPos2dvMESA", WindowPos2dvMESA);
		Functor("glWindowPos2f", WindowPos2f);
		Functor("glWindowPos2fARB", WindowPos2fARB);
		Functor("glWindowPos2fMESA", WindowPos2fMESA);
		Functor("glWindowPos2fv", WindowPos2fv);
		Functor("glWindowPos2fvARB", WindowPos2fvARB);
		Functor("glWindowPos2fvMESA", WindowPos2fvMESA);
		Functor("glWindowPos2i", WindowPos2i);
		Functor("glWindowPos2iARB", WindowPos2iARB);
		Functor("glWindowPos2iMESA", WindowPos2iMESA);
		Functor("glWindowPos2iv", WindowPos2iv);
		Functor("glWindowPos2ivARB", WindowPos2ivARB);
		Functor("glWindowPos2ivMESA", WindowPos2ivMESA);
		Functor("glWindowPos2s", WindowPos2s);
		Functor("glWindowPos2sARB", WindowPos2sARB);
		Functor("glWindowPos2sMESA", WindowPos2sMESA);
		Functor("glWindowPos2sv", WindowPos2sv);
		Functor("glWindowPos2svARB", WindowPos2svARB);
		Functor("glWindowPos2svMESA", WindowPos2svMESA);
		Functor("glWindowPos3d", WindowPos3d);
		Functor("glWindowPos3dARB", WindowPos3dARB);
		Functor("glWindowPos3dMESA", WindowPos3dMESA);
		Functor("glWindowPos3dv", WindowPos3dv);
		Functor("glWindowPos3dvARB", WindowPos3dvARB);
		Functor("glWindowPos3dvMESA", WindowPos3dvMESA);
		Functor("glWindowPos3f", WindowPos3f);
		Functor("glWindowPos3fARB", WindowPos3fARB);
		Functor("glWindowPos3fMESA", WindowPos3fMESA);
		Functor("glWindowPos3fv", WindowPos3fv);
		Functor("glWindowPos3fvARB", WindowPos3fvARB);
		Functor("glWindowPos3fvMESA", WindowPos3fvMESA);
		Functor("glWindowPos3i", WindowPos3i);
		Functor("glWindowPos3iARB", WindowPos3iARB);
		Functor("glWindowPos3iMESA", WindowPos3iMESA);
		Functor("glWindowPos3iv", WindowPos3iv);
		Functor("glWindowPos3ivARB", WindowPos3ivARB);
		Functor("glWindowPos3ivMESA", WindowPos3ivMESA);
		Functor("glWindowPos3s", WindowPos3s);
		Functor("glWindowPos3sARB", WindowPos3sARB);
		Functor("glWindowPos3sMESA", WindowPos3sMESA);
		Functor("glWindowPos3sv", WindowPos3sv);
		Functor("glWindowPos3svARB", WindowPos3svARB);
		Functor("glWindowPos3svMESA", WindowPos3svMESA);
		Functor("glWindowPos4dMESA", WindowPos4dMESA);
		Functor("glWindowPos4dvMESA", WindowPos4dvMESA);
		Functor("glWindowPos4fMESA", WindowPos4fMESA);
		Functor("glWindowPos4fvMESA", WindowPos4fvMESA);
		Functor("glWindowPos4iMESA", WindowPos4iMESA);
		Functor("glWindowPos4ivMESA", WindowPos4ivMESA);
		Functor("glWindowPos4sMESA", WindowPos4sMESA);
		Functor("glWindowPos4svMESA", WindowPos4svMESA);
		Functor("glWriteMaskEXT", WriteMaskEXT);
	}

	void (*Accum)(GLenum op, GLfloat value);
	void (*ActiveProgramEXT)(GLuint program);
	void (*ActiveStencilFaceEXT)(GLenum face);
	void (*ActiveTexture)(GLenum texture);
	void (*ActiveTextureARB)(GLenum texture);
	void (*ActiveVaryingNV)(GLuint program, const GLchar* name);
	void (*AlphaFragmentOp1ATI)(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
	void (*AlphaFragmentOp2ATI)(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
	void (*AlphaFragmentOp3ATI)(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
	void (*AlphaFunc)(GLenum func, GLclampf ref);
	void (*ApplyTextureEXT)(GLenum mode);
	GLboolean (*AreProgramsResidentNV)(GLsizei n, const GLuint* programs, GLboolean* residences);
	GLboolean (*AreTexturesResident)(GLsizei n, const GLuint* textures, GLboolean* residences);
	GLboolean (*AreTexturesResidentEXT)(GLsizei n, const GLuint* textures, GLboolean* residences);
	void (*ArrayElement)(GLint i);
	void (*ArrayElementEXT)(GLint i);
	void (*ArrayObjectATI)(GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
	void (*AsyncMarkerSGIX)(GLuint marker);
	void (*AttachObjectARB)(GLhandleARB containerObj, GLhandleARB obj);
	void (*AttachShader)(GLuint program, GLuint shader);
	void (*Begin)(GLenum mode);
	void (*BeginConditionalRender)(GLuint id, GLenum mode);
	void (*BeginConditionalRenderNV)(GLuint id, GLenum mode);
	void (*BeginFragmentShaderATI)();
	void (*BeginOcclusionQueryNV)(GLuint id);
	void (*BeginPerfMonitorAMD)(GLuint monitor);
	void (*BeginQuery)(GLenum target, GLuint id);
	void (*BeginQueryARB)(GLenum target, GLuint id);
	void (*BeginQueryIndexed)(GLenum target, GLuint index, GLuint id);
	void (*BeginTransformFeedback)(GLenum primitiveMode);
	void (*BeginTransformFeedbackEXT)(GLenum primitiveMode);
	void (*BeginTransformFeedbackNV)(GLenum primitiveMode);
	void (*BeginVertexShaderEXT)();
	void (*BeginVideoCaptureNV)(GLuint video_capture_slot);
	void (*BindAttribLocation)(GLuint program, GLuint index, const GLchar* name);
	void (*BindAttribLocationARB)(GLhandleARB programObj, GLuint index, const GLcharARB* name);
	void (*BindBuffer)(GLenum target, GLuint buffer);
	void (*BindBufferARB)(GLenum target, GLuint buffer);
	void (*BindBufferBase)(GLenum target, GLuint index, GLuint buffer);
	void (*BindBufferBaseEXT)(GLenum target, GLuint index, GLuint buffer);
	void (*BindBufferBaseNV)(GLenum target, GLuint index, GLuint buffer);
	void (*BindBufferOffsetEXT)(GLenum target, GLuint index, GLuint buffer, GLintptr offset);
	void (*BindBufferOffsetNV)(GLenum target, GLuint index, GLuint buffer, GLintptr offset);
	void (*BindBufferRange)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
	void (*BindBufferRangeEXT)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
	void (*BindBufferRangeNV)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
	void (*BindFragDataLocation)(GLuint program, GLuint color, const GLchar* name);
	void (*BindFragDataLocationEXT)(GLuint program, GLuint color, const GLchar* name);
	void (*BindFragDataLocationIndexed)(GLuint program, GLuint colorNumber, GLuint index, const GLchar* name);
	void (*BindFragmentShaderATI)(GLuint id);
	void (*BindFramebuffer)(GLenum target, GLuint framebuffer);
	void (*BindFramebufferEXT)(GLenum target, GLuint framebuffer);
	GLuint (*BindLightParameterEXT)(GLenum light, GLenum value);
	GLuint (*BindMaterialParameterEXT)(GLenum face, GLenum value);
	void (*BindMultiTextureEXT)(GLenum texunit, GLenum target, GLuint texture);
	GLuint (*BindParameterEXT)(GLenum value);
	void (*BindProgramARB)(GLenum target, GLuint program);
	void (*BindProgramNV)(GLenum target, GLuint id);
	void (*BindRenderbuffer)(GLenum target, GLuint renderbuffer);
	void (*BindRenderbufferEXT)(GLenum target, GLuint renderbuffer);
	void (*BindSampler)(GLenum unit, GLuint sampler);
	GLuint (*BindTexGenParameterEXT)(GLenum unit, GLenum coord, GLenum value);
	void (*BindTexture)(GLenum target, GLuint texture);
	void (*BindTextureEXT)(GLenum target, GLuint texture);
	GLuint (*BindTextureUnitParameterEXT)(GLenum unit, GLenum value);
	void (*BindTransformFeedback)(GLenum target, GLuint id);
	void (*BindTransformFeedbackNV)(GLenum target, GLuint id);
	void (*BindVertexArray)(GLuint array);
	void (*BindVertexArrayAPPLE)(GLuint array);
	void (*BindVertexShaderEXT)(GLuint id);
	void (*BindVideoCaptureStreamBufferNV)(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset);
	void (*BindVideoCaptureStreamTextureNV)(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture);
	void (*Binormal3bEXT)(GLbyte bx, GLbyte by, GLbyte bz);
	void (*Binormal3bvEXT)(const GLbyte* v);
	void (*Binormal3dEXT)(GLdouble bx, GLdouble by, GLdouble bz);
	void (*Binormal3dvEXT)(const GLdouble* v);
	void (*Binormal3fEXT)(GLfloat bx, GLfloat by, GLfloat bz);
	void (*Binormal3fvEXT)(const GLfloat* v);
	void (*Binormal3iEXT)(GLint bx, GLint by, GLint bz);
	void (*Binormal3ivEXT)(const GLint* v);
	void (*Binormal3sEXT)(GLshort bx, GLshort by, GLshort bz);
	void (*Binormal3svEXT)(const GLshort* v);
	void (*BinormalPointerEXT)(GLenum type, GLsizei stride, const GLvoid* pointer);
	void (*Bitmap)(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte* bitmap);
	void (*BlendColor)(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
	void (*BlendColorEXT)(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
	void (*BlendEquation)(GLenum mode);
	void (*BlendEquationEXT)(GLenum mode);
	void (*BlendEquationIndexedAMD)(GLuint buf, GLenum mode);
	void (*BlendEquationSeparate)(GLenum modeRGB, GLenum modeAlpha);
	void (*BlendEquationSeparateEXT)(GLenum modeRGB, GLenum modeAlpha);
	void (*BlendEquationSeparateIndexedAMD)(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
	void (*BlendEquationSeparatei)(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
	void (*BlendEquationi)(GLuint buf, GLenum mode);
	void (*BlendFunc)(GLenum sfactor, GLenum dfactor);
	void (*BlendFuncIndexedAMD)(GLuint buf, GLenum src, GLenum dst);
	void (*BlendFuncSeparate)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
	void (*BlendFuncSeparateEXT)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
	void (*BlendFuncSeparateINGR)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
	void (*BlendFuncSeparateIndexedAMD)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
	void (*BlendFuncSeparatei)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
	void (*BlendFunci)(GLuint buf, GLenum src, GLenum dst);
	void (*BlitFramebuffer)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
	void (*BlitFramebufferEXT)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
	void (*BufferAddressRangeNV)(GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length);
	void (*BufferData)(GLenum target, GLsizeiptr size, const GLvoid* data, GLenum usage);
	void (*BufferDataARB)(GLenum target, GLsizeiptrARB size, const GLvoid* data, GLenum usage);
	void (*BufferParameteriAPPLE)(GLenum target, GLenum pname, GLint param);
	void (*BufferSubData)(GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid* data);
	void (*BufferSubDataARB)(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const GLvoid* data);
	void (*CallList)(GLuint list);
	void (*CallLists)(GLsizei n, GLenum type, const GLvoid* lists);
	GLenum (*CheckFramebufferStatus)(GLenum target);
	GLenum (*CheckFramebufferStatusEXT)(GLenum target);
	GLenum (*CheckNamedFramebufferStatusEXT)(GLuint framebuffer, GLenum target);
	void (*ClampColor)(GLenum target, GLenum clamp);
	void (*ClampColorARB)(GLenum target, GLenum clamp);
	void (*Clear)(GLbitfield mask);
	void (*ClearAccum)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
	void (*ClearBufferfi)(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
	void (*ClearBufferfv)(GLenum buffer, GLint drawbuffer, const GLfloat* value);
	void (*ClearBufferiv)(GLenum buffer, GLint drawbuffer, const GLint* value);
	void (*ClearBufferuiv)(GLenum buffer, GLint drawbuffer, const GLuint* value);
	void (*ClearColor)(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
	void (*ClearColorIiEXT)(GLint red, GLint green, GLint blue, GLint alpha);
	void (*ClearColorIuiEXT)(GLuint red, GLuint green, GLuint blue, GLuint alpha);
	void (*ClearDepth)(GLclampd depth);
	void (*ClearDepthdNV)(GLdouble depth);
	void (*ClearIndex)(GLfloat c);
	void (*ClearStencil)(GLint s);
	void (*ClientActiveTexture)(GLenum texture);
	void (*ClientActiveTextureARB)(GLenum texture);
	void (*ClientActiveVertexStreamATI)(GLenum stream);
	void (*ClientAttribDefaultEXT)(GLbitfield mask);
	GLenum (*ClientWaitSync)(GLsync sync, GLbitfield flags, GLuint64 timeout);
	void (*ClipPlane)(GLenum plane, const GLdouble* equation);
	void (*Color3b)(GLbyte red, GLbyte green, GLbyte blue);
	void (*Color3bv)(const GLbyte* v);
	void (*Color3d)(GLdouble red, GLdouble green, GLdouble blue);
	void (*Color3dv)(const GLdouble* v);
	void (*Color3f)(GLfloat red, GLfloat green, GLfloat blue);
	void (*Color3fVertex3fSUN)(GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
	void (*Color3fVertex3fvSUN)(const GLfloat* c, const GLfloat* v);
	void (*Color3fv)(const GLfloat* v);
	void (*Color3hNV)(GLhalfNV red, GLhalfNV green, GLhalfNV blue);
	void (*Color3hvNV)(const GLhalfNV* v);
	void (*Color3i)(GLint red, GLint green, GLint blue);
	void (*Color3iv)(const GLint* v);
	void (*Color3s)(GLshort red, GLshort green, GLshort blue);
	void (*Color3sv)(const GLshort* v);
	void (*Color3ub)(GLubyte red, GLubyte green, GLubyte blue);
	void (*Color3ubv)(const GLubyte* v);
	void (*Color3ui)(GLuint red, GLuint green, GLuint blue);
	void (*Color3uiv)(const GLuint* v);
	void (*Color3us)(GLushort red, GLushort green, GLushort blue);
	void (*Color3usv)(const GLushort* v);
	void (*Color4b)(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);
	void (*Color4bv)(const GLbyte* v);
	void (*Color4d)(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
	void (*Color4dv)(const GLdouble* v);
	void (*Color4f)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
	void (*Color4fNormal3fVertex3fSUN)(GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
	void (*Color4fNormal3fVertex3fvSUN)(const GLfloat* c, const GLfloat* n, const GLfloat* v);
	void (*Color4fv)(const GLfloat* v);
	void (*Color4hNV)(GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha);
	void (*Color4hvNV)(const GLhalfNV* v);
	void (*Color4i)(GLint red, GLint green, GLint blue, GLint alpha);
	void (*Color4iv)(const GLint* v);
	void (*Color4s)(GLshort red, GLshort green, GLshort blue, GLshort alpha);
	void (*Color4sv)(const GLshort* v);
	void (*Color4ub)(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
	void (*Color4ubVertex2fSUN)(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y);
	void (*Color4ubVertex2fvSUN)(const GLubyte* c, const GLfloat* v);
	void (*Color4ubVertex3fSUN)(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
	void (*Color4ubVertex3fvSUN)(const GLubyte* c, const GLfloat* v);
	void (*Color4ubv)(const GLubyte* v);
	void (*Color4ui)(GLuint red, GLuint green, GLuint blue, GLuint alpha);
	void (*Color4uiv)(const GLuint* v);
	void (*Color4us)(GLushort red, GLushort green, GLushort blue, GLushort alpha);
	void (*Color4usv)(const GLushort* v);
	void (*ColorFormatNV)(GLint size, GLenum type, GLsizei stride);
	void (*ColorFragmentOp1ATI)(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
	void (*ColorFragmentOp2ATI)(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
	void (*ColorFragmentOp3ATI)(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
	void (*ColorMask)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
	void (*ColorMaskIndexedEXT)(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
	void (*ColorMaski)(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
	void (*ColorMaterial)(GLenum face, GLenum mode);
	void (*ColorP3ui)(GLenum type, GLuint color);
	void (*ColorP3uiv)(GLenum type, const GLuint* color);
	void (*ColorP4ui)(GLenum type, GLuint color);
	void (*ColorP4uiv)(GLenum type, const GLuint* color);
	void (*ColorPointer)(GLint size, GLenum type, GLsizei stride, const GLvoid* pointer);
	void (*ColorPointerEXT)(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid* pointer);
	void (*ColorPointerListIBM)(GLint size, GLenum type, GLint stride, const GLvoid** pointer, GLint ptrstride);
	void (*ColorPointervINTEL)(GLint size, GLenum type, const GLvoid** pointer);
	void (*ColorSubTable)(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid* data);
	void (*ColorSubTableEXT)(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid* data);
	void (*ColorTable)(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid* table);
	void (*ColorTableEXT)(GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const GLvoid* table);
	void (*ColorTableParameterfv)(GLenum target, GLenum pname, const GLfloat* params);
	void (*ColorTableParameterfvSGI)(GLenum target, GLenum pname, const GLfloat* params);
	void (*ColorTableParameteriv)(GLenum target, GLenum pname, const GLint* params);
	void (*ColorTableParameterivSGI)(GLenum target, GLenum pname, const GLint* params);
	void (*ColorTableSGI)(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid* table);
	void (*CombinerInputNV)(GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
	void (*CombinerOutputNV)(GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum);
	void (*CombinerParameterfNV)(GLenum pname, GLfloat param);
	void (*CombinerParameterfvNV)(GLenum pname, const GLfloat* params);
	void (*CombinerParameteriNV)(GLenum pname, GLint param);
	void (*CombinerParameterivNV)(GLenum pname, const GLint* params);
	void (*CombinerStageParameterfvNV)(GLenum stage, GLenum pname, const GLfloat* params);
	void (*CompileShader)(GLuint shader);
	void (*CompileShaderARB)(GLhandleARB shaderObj);
	void (*CompileShaderIncludeARB)(GLuint shader, GLsizei count, const GLchar** path, const GLint* length);
	void (*CompressedMultiTexImage1DEXT)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid* bits);
	void (*CompressedMultiTexImage2DEXT)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid* bits);
	void (*CompressedMultiTexImage3DEXT)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid* bits);
	void (*CompressedMultiTexSubImage1DEXT)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid* bits);
	void (*CompressedMultiTexSubImage2DEXT)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid* bits);
	void (*CompressedMultiTexSubImage3DEXT)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid* bits);
	void (*CompressedTexImage1D)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid* data);
	void (*CompressedTexImage1DARB)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid* data);
	void (*CompressedTexImage2D)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid* data);
	void (*CompressedTexImage2DARB)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid* data);
	void (*CompressedTexImage3D)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid* data);
	void (*CompressedTexImage3DARB)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid* data);
	void (*CompressedTexSubImage1D)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid* data);
	void (*CompressedTexSubImage1DARB)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid* data);
	void (*CompressedTexSubImage2D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid* data);
	void (*CompressedTexSubImage2DARB)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid* data);
	void (*CompressedTexSubImage3D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid* data);
	void (*CompressedTexSubImage3DARB)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid* data);
	void (*CompressedTextureImage1DEXT)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid* bits);
	void (*CompressedTextureImage2DEXT)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid* bits);
	void (*CompressedTextureImage3DEXT)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid* bits);
	void (*CompressedTextureSubImage1DEXT)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid* bits);
	void (*CompressedTextureSubImage2DEXT)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid* bits);
	void (*CompressedTextureSubImage3DEXT)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid* bits);
	void (*ConvolutionFilter1D)(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid* image);
	void (*ConvolutionFilter1DEXT)(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid* image);
	void (*ConvolutionFilter2D)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* image);
	void (*ConvolutionFilter2DEXT)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* image);
	void (*ConvolutionParameterf)(GLenum target, GLenum pname, GLfloat params);
	void (*ConvolutionParameterfEXT)(GLenum target, GLenum pname, GLfloat params);
	void (*ConvolutionParameterfv)(GLenum target, GLenum pname, const GLfloat* params);
	void (*ConvolutionParameterfvEXT)(GLenum target, GLenum pname, const GLfloat* params);
	void (*ConvolutionParameteri)(GLenum target, GLenum pname, GLint params);
	void (*ConvolutionParameteriEXT)(GLenum target, GLenum pname, GLint params);
	void (*ConvolutionParameteriv)(GLenum target, GLenum pname, const GLint* params);
	void (*ConvolutionParameterivEXT)(GLenum target, GLenum pname, const GLint* params);
	void (*CopyBufferSubData)(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
	void (*CopyColorSubTable)(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
	void (*CopyColorSubTableEXT)(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
	void (*CopyColorTable)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
	void (*CopyColorTableSGI)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
	void (*CopyConvolutionFilter1D)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
	void (*CopyConvolutionFilter1DEXT)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
	void (*CopyConvolutionFilter2D)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
	void (*CopyConvolutionFilter2DEXT)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
	void (*CopyImageSubDataNV)(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth);
	void (*CopyMultiTexImage1DEXT)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
	void (*CopyMultiTexImage2DEXT)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
	void (*CopyMultiTexSubImage1DEXT)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
	void (*CopyMultiTexSubImage2DEXT)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
	void (*CopyMultiTexSubImage3DEXT)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
	void (*CopyPixels)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);
	void (*CopyTexImage1D)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
	void (*CopyTexImage1DEXT)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
	void (*CopyTexImage2D)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
	void (*CopyTexImage2DEXT)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
	void (*CopyTexSubImage1D)(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
	void (*CopyTexSubImage1DEXT)(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
	void (*CopyTexSubImage2D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
	void (*CopyTexSubImage2DEXT)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
	void (*CopyTexSubImage3D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
	void (*CopyTexSubImage3DEXT)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
	void (*CopyTextureImage1DEXT)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
	void (*CopyTextureImage2DEXT)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
	void (*CopyTextureSubImage1DEXT)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
	void (*CopyTextureSubImage2DEXT)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
	void (*CopyTextureSubImage3DEXT)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
	GLuint (*CreateProgram)();
	GLhandleARB (*CreateProgramObjectARB)();
	GLuint (*CreateShader)(GLenum type);
	GLhandleARB (*CreateShaderObjectARB)(GLenum shaderType);
	GLuint (*CreateShaderProgramEXT)(GLenum type, const GLchar* string);
	void (*CullFace)(GLenum mode);
	void (*CullParameterdvEXT)(GLenum pname, GLdouble* params);
	void (*CullParameterfvEXT)(GLenum pname, GLfloat* params);
	void (*CurrentPaletteMatrixARB)(GLint index);
	void (*DeformSGIX)(GLbitfield mask);
	void (*DeformationMap3dSGIX)(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble* points);
	void (*DeformationMap3fSGIX)(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat* points);
	void (*DeleteAsyncMarkersSGIX)(GLuint marker, GLsizei range);
	void (*DeleteBuffers)(GLsizei n, const GLuint* buffers);
	void (*DeleteBuffersARB)(GLsizei n, const GLuint* buffers);
	void (*DeleteFencesAPPLE)(GLsizei n, const GLuint* fences);
	void (*DeleteFencesNV)(GLsizei n, const GLuint* fences);
	void (*DeleteFragmentShaderATI)(GLuint id);
	void (*DeleteFramebuffers)(GLsizei n, const GLuint* framebuffers);
	void (*DeleteFramebuffersEXT)(GLsizei n, const GLuint* framebuffers);
	void (*DeleteLists)(GLuint list, GLsizei range);
	void (*DeleteNamedStringARB)(GLint namelen, const GLchar* name);
	void (*DeleteObjectARB)(GLhandleARB obj);
	void (*DeleteOcclusionQueriesNV)(GLsizei n, const GLuint* ids);
	void (*DeletePerfMonitorsAMD)(GLsizei n, GLuint* monitors);
	void (*DeleteProgram)(GLuint program);
	void (*DeleteProgramsARB)(GLsizei n, const GLuint* programs);
	void (*DeleteProgramsNV)(GLsizei n, const GLuint* programs);
	void (*DeleteQueries)(GLsizei n, const GLuint* ids);
	void (*DeleteQueriesARB)(GLsizei n, const GLuint* ids);
	void (*DeleteRenderbuffers)(GLsizei n, const GLuint* renderbuffers);
	void (*DeleteRenderbuffersEXT)(GLsizei n, const GLuint* renderbuffers);
	void (*DeleteSamplers)(GLsizei count, const GLuint* samplers);
	void (*DeleteShader)(GLuint shader);
	void (*DeleteSync)(GLsync sync);
	void (*DeleteTextures)(GLsizei n, const GLuint* textures);
	void (*DeleteTexturesEXT)(GLsizei n, const GLuint* textures);
	void (*DeleteTransformFeedbacks)(GLsizei n, const GLuint* ids);
	void (*DeleteTransformFeedbacksNV)(GLsizei n, const GLuint* ids);
	void (*DeleteVertexArrays)(GLsizei n, const GLuint* arrays);
	void (*DeleteVertexArraysAPPLE)(GLsizei n, const GLuint* arrays);
	void (*DeleteVertexShaderEXT)(GLuint id);
	void (*DepthBoundsEXT)(GLclampd zmin, GLclampd zmax);
	void (*DepthBoundsdNV)(GLdouble zmin, GLdouble zmax);
	void (*DepthFunc)(GLenum func);
	void (*DepthMask)(GLboolean flag);
	void (*DepthRange)(GLclampd near, GLclampd far);
	void (*DepthRangedNV)(GLdouble zNear, GLdouble zFar);
	void (*DetachObjectARB)(GLhandleARB containerObj, GLhandleARB attachedObj);
	void (*DetachShader)(GLuint program, GLuint shader);
	void (*DetailTexFuncSGIS)(GLenum target, GLsizei n, const GLfloat* points);
	void (*Disable)(GLenum cap);
	void (*DisableClientState)(GLenum array);
	void (*DisableClientStateIndexedEXT)(GLenum array, GLuint index);
	void (*DisableIndexedEXT)(GLenum target, GLuint index);
	void (*DisableVariantClientStateEXT)(GLuint id);
	void (*DisableVertexAttribAPPLE)(GLuint index, GLenum pname);
	void (*DisableVertexAttribArray)(GLuint index);
	void (*DisableVertexAttribArrayARB)(GLuint index);
	void (*Disablei)(GLenum target, GLuint index);
	void (*DrawArrays)(GLenum mode, GLint first, GLsizei count);
	void (*DrawArraysEXT)(GLenum mode, GLint first, GLsizei count);
	void (*DrawArraysIndirect)(GLenum mode, const GLvoid* indirect);
	void (*DrawArraysInstanced)(GLenum mode, GLint first, GLsizei count, GLsizei primcount);
	void (*DrawArraysInstancedARB)(GLenum mode, GLint first, GLsizei count, GLsizei primcount);
	void (*DrawArraysInstancedEXT)(GLenum mode, GLint start, GLsizei count, GLsizei primcount);
	void (*DrawBuffer)(GLenum mode);
	void (*DrawBuffers)(GLsizei n, const GLenum* bufs);
	void (*DrawBuffersARB)(GLsizei n, const GLenum* bufs);
	void (*DrawBuffersATI)(GLsizei n, const GLenum* bufs);
	void (*DrawElementArrayAPPLE)(GLenum mode, GLint first, GLsizei count);
	void (*DrawElementArrayATI)(GLenum mode, GLsizei count);
	void (*DrawElements)(GLenum mode, GLsizei count, GLenum type, const GLvoid* indices);
	void (*DrawElementsBaseVertex)(GLenum mode, GLsizei count, GLenum type, const GLvoid* indices, GLint basevertex);
	void (*DrawElementsIndirect)(GLenum mode, GLenum type, const GLvoid* indirect);
	void (*DrawElementsInstanced)(GLenum mode, GLsizei count, GLenum type, const GLvoid* indices, GLsizei primcount);
	void (*DrawElementsInstancedARB)(GLenum mode, GLsizei count, GLenum type, const GLvoid* indices, GLsizei primcount);
	void (*DrawElementsInstancedBaseVertex)(GLenum mode, GLsizei count, GLenum type, const GLvoid* indices, GLsizei primcount, GLint basevertex);
	void (*DrawElementsInstancedEXT)(GLenum mode, GLsizei count, GLenum type, const GLvoid* indices, GLsizei primcount);
	void (*DrawMeshArraysSUN)(GLenum mode, GLint first, GLsizei count, GLsizei width);
	void (*DrawPixels)(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* pixels);
	void (*DrawRangeElementArrayAPPLE)(GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count);
	void (*DrawRangeElementArrayATI)(GLenum mode, GLuint start, GLuint end, GLsizei count);
	void (*DrawRangeElements)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid* indices);
	void (*DrawRangeElementsBaseVertex)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid* indices, GLint basevertex);
	void (*DrawRangeElementsEXT)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid* indices);
	void (*DrawTransformFeedback)(GLenum mode, GLuint id);
	void (*DrawTransformFeedbackNV)(GLenum mode, GLuint id);
	void (*DrawTransformFeedbackStream)(GLenum mode, GLuint id, GLuint stream);
	void (*EdgeFlag)(GLboolean flag);
	void (*EdgeFlagFormatNV)(GLsizei stride);
	void (*EdgeFlagPointer)(GLsizei stride, const GLvoid* pointer);
	void (*EdgeFlagPointerEXT)(GLsizei stride, GLsizei count, const GLboolean* pointer);
	void (*EdgeFlagPointerListIBM)(GLint stride, const GLboolean** pointer, GLint ptrstride);
	void (*EdgeFlagv)(const GLboolean* flag);
	void (*ElementPointerAPPLE)(GLenum type, const GLvoid* pointer);
	void (*ElementPointerATI)(GLenum type, const GLvoid* pointer);
	void (*Enable)(GLenum cap);
	void (*EnableClientState)(GLenum array);
	void (*EnableClientStateIndexedEXT)(GLenum array, GLuint index);
	void (*EnableIndexedEXT)(GLenum target, GLuint index);
	void (*EnableVariantClientStateEXT)(GLuint id);
	void (*EnableVertexAttribAPPLE)(GLuint index, GLenum pname);
	void (*EnableVertexAttribArray)(GLuint index);
	void (*EnableVertexAttribArrayARB)(GLuint index);
	void (*Enablei)(GLenum target, GLuint index);
	void (*End)();
	void (*EndConditionalRender)();
	void (*EndConditionalRenderNV)();
	void (*EndFragmentShaderATI)();
	void (*EndList)();
	void (*EndOcclusionQueryNV)();
	void (*EndPerfMonitorAMD)(GLuint monitor);
	void (*EndQuery)(GLenum target);
	void (*EndQueryARB)(GLenum target);
	void (*EndQueryIndexed)(GLenum target, GLuint index);
	void (*EndTransformFeedback)();
	void (*EndTransformFeedbackEXT)();
	void (*EndTransformFeedbackNV)();
	void (*EndVertexShaderEXT)();
	void (*EndVideoCaptureNV)(GLuint video_capture_slot);
	void (*EvalCoord1d)(GLdouble u);
	void (*EvalCoord1dv)(const GLdouble* u);
	void (*EvalCoord1f)(GLfloat u);
	void (*EvalCoord1fv)(const GLfloat* u);
	void (*EvalCoord2d)(GLdouble u, GLdouble v);
	void (*EvalCoord2dv)(const GLdouble* u);
	void (*EvalCoord2f)(GLfloat u, GLfloat v);
	void (*EvalCoord2fv)(const GLfloat* u);
	void (*EvalMapsNV)(GLenum target, GLenum mode);
	void (*EvalMesh1)(GLenum mode, GLint i1, GLint i2);
	void (*EvalMesh2)(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);
	void (*EvalPoint1)(GLint i);
	void (*EvalPoint2)(GLint i, GLint j);
	void (*ExecuteProgramNV)(GLenum target, GLuint id, const GLfloat* params);
	void (*ExtractComponentEXT)(GLuint res, GLuint src, GLuint num);
	void (*FeedbackBuffer)(GLsizei size, GLenum type, GLfloat* buffer);
	GLsync (*FenceSync)(GLenum condition, GLbitfield flags);
	void (*FinalCombinerInputNV)(GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
	void (*Finish)();
	GLint (*FinishAsyncSGIX)(GLuint* markerp);
	void (*FinishFenceAPPLE)(GLuint fence);
	void (*FinishFenceNV)(GLuint fence);
	void (*FinishObjectAPPLE)(GLenum object, GLint name);
	void (*FinishTextureSUNX)();
	void (*Flush)();
	void (*FlushMappedBufferRange)(GLenum target, GLintptr offset, GLsizeiptr length);
	void (*FlushMappedBufferRangeAPPLE)(GLenum target, GLintptr offset, GLsizeiptr size);
	void (*FlushPixelDataRangeNV)(GLenum target);
	void (*FlushRasterSGIX)();
	void (*FlushVertexArrayRangeAPPLE)(GLsizei length, GLvoid* pointer);
	void (*FlushVertexArrayRangeNV)();
	void (*FogCoordFormatNV)(GLenum type, GLsizei stride);
	void (*FogCoordPointer)(GLenum type, GLsizei stride, const GLvoid* pointer);
	void (*FogCoordPointerEXT)(GLenum type, GLsizei stride, const GLvoid* pointer);
	void (*FogCoordPointerListIBM)(GLenum type, GLint stride, const GLvoid** pointer, GLint ptrstride);
	void (*FogCoordd)(GLdouble coord);
	void (*FogCoorddEXT)(GLdouble coord);
	void (*FogCoorddv)(const GLdouble* coord);
	void (*FogCoorddvEXT)(const GLdouble* coord);
	void (*FogCoordf)(GLfloat coord);
	void (*FogCoordfEXT)(GLfloat coord);
	void (*FogCoordfv)(const GLfloat* coord);
	void (*FogCoordfvEXT)(const GLfloat* coord);
	void (*FogCoordhNV)(GLhalfNV fog);
	void (*FogCoordhvNV)(const GLhalfNV* fog);
	void (*FogFuncSGIS)(GLsizei n, const GLfloat* points);
	void (*Fogf)(GLenum pname, GLfloat param);
	void (*Fogfv)(GLenum pname, const GLfloat* params);
	void (*Fogi)(GLenum pname, GLint param);
	void (*Fogiv)(GLenum pname, const GLint* params);
	void (*FragmentColorMaterialSGIX)(GLenum face, GLenum mode);
	void (*FragmentLightModelfSGIX)(GLenum pname, GLfloat param);
	void (*FragmentLightModelfvSGIX)(GLenum pname, const GLfloat* params);
	void (*FragmentLightModeliSGIX)(GLenum pname, GLint param);
	void (*FragmentLightModelivSGIX)(GLenum pname, const GLint* params);
	void (*FragmentLightfSGIX)(GLenum light, GLenum pname, GLfloat param);
	void (*FragmentLightfvSGIX)(GLenum light, GLenum pname, const GLfloat* params);
	void (*FragmentLightiSGIX)(GLenum light, GLenum pname, GLint param);
	void (*FragmentLightivSGIX)(GLenum light, GLenum pname, const GLint* params);
	void (*FragmentMaterialfSGIX)(GLenum face, GLenum pname, GLfloat param);
	void (*FragmentMaterialfvSGIX)(GLenum face, GLenum pname, const GLfloat* params);
	void (*FragmentMaterialiSGIX)(GLenum face, GLenum pname, GLint param);
	void (*FragmentMaterialivSGIX)(GLenum face, GLenum pname, const GLint* params);
	void (*FrameTerminatorGREMEDY)();
	void (*FrameZoomSGIX)(GLint factor);
	void (*FramebufferDrawBufferEXT)(GLuint framebuffer, GLenum mode);
	void (*FramebufferDrawBuffersEXT)(GLuint framebuffer, GLsizei n, const GLenum* bufs);
	void (*FramebufferReadBufferEXT)(GLuint framebuffer, GLenum mode);
	void (*FramebufferRenderbuffer)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
	void (*FramebufferRenderbufferEXT)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
	void (*FramebufferTexture)(GLenum target, GLenum attachment, GLuint texture, GLint level);
	void (*FramebufferTexture1D)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
	void (*FramebufferTexture1DEXT)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
	void (*FramebufferTexture2D)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
	void (*FramebufferTexture2DEXT)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
	void (*FramebufferTexture3D)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
	void (*FramebufferTexture3DEXT)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
	void (*FramebufferTextureARB)(GLenum target, GLenum attachment, GLuint texture, GLint level);
	void (*FramebufferTextureEXT)(GLenum target, GLenum attachment, GLuint texture, GLint level);
	void (*FramebufferTextureFaceARB)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
	void (*FramebufferTextureFaceEXT)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
	void (*FramebufferTextureLayer)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
	void (*FramebufferTextureLayerARB)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
	void (*FramebufferTextureLayerEXT)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
	void (*FreeObjectBufferATI)(GLuint buffer);
	void (*FrontFace)(GLenum mode);
	void (*Frustum)(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
	GLuint (*GenAsyncMarkersSGIX)(GLsizei range);
	void (*GenBuffers)(GLsizei n, GLuint* buffers);
	void (*GenBuffersARB)(GLsizei n, GLuint* buffers);
	void (*GenFencesAPPLE)(GLsizei n, GLuint* fences);
	void (*GenFencesNV)(GLsizei n, GLuint* fences);
	GLuint (*GenFragmentShadersATI)(GLuint range);
	void (*GenFramebuffers)(GLsizei n, GLuint* framebuffers);
	void (*GenFramebuffersEXT)(GLsizei n, GLuint* framebuffers);
	GLuint (*GenLists)(GLsizei range);
	void (*GenOcclusionQueriesNV)(GLsizei n, GLuint* ids);
	void (*GenPerfMonitorsAMD)(GLsizei n, GLuint* monitors);
	void (*GenProgramsARB)(GLsizei n, GLuint* programs);
	void (*GenProgramsNV)(GLsizei n, GLuint* programs);
	void (*GenQueries)(GLsizei n, GLuint* ids);
	void (*GenQueriesARB)(GLsizei n, GLuint* ids);
	void (*GenRenderbuffers)(GLsizei n, GLuint* renderbuffers);
	void (*GenRenderbuffersEXT)(GLsizei n, GLuint* renderbuffers);
	void (*GenSamplers)(GLsizei count, GLuint* samplers);
	GLuint (*GenSymbolsEXT)(GLenum datatype, GLenum storagetype, GLenum range, GLuint components);
	void (*GenTextures)(GLsizei n, GLuint* textures);
	void (*GenTexturesEXT)(GLsizei n, GLuint* textures);
	void (*GenTransformFeedbacks)(GLsizei n, GLuint* ids);
	void (*GenTransformFeedbacksNV)(GLsizei n, GLuint* ids);
	void (*GenVertexArrays)(GLsizei n, GLuint* arrays);
	void (*GenVertexArraysAPPLE)(GLsizei n, GLuint* arrays);
	GLuint (*GenVertexShadersEXT)(GLuint range);
	void (*GenerateMipmap)(GLenum target);
	void (*GenerateMipmapEXT)(GLenum target);
	void (*GenerateMultiTexMipmapEXT)(GLenum texunit, GLenum target);
	void (*GenerateTextureMipmapEXT)(GLuint texture, GLenum target);
	void (*GetActiveAttrib)(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLint* size, GLenum* type, GLchar* name);
	void (*GetActiveAttribARB)(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei* length, GLint* size, GLenum* type, GLcharARB* name);
	void (*GetActiveSubroutineName)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei* length, GLchar* name);
	void (*GetActiveSubroutineUniformName)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei* length, GLchar* name);
	void (*GetActiveSubroutineUniformiv)(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint* values);
	void (*GetActiveUniform)(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLint* size, GLenum* type, GLchar* name);
	void (*GetActiveUniformARB)(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei* length, GLint* size, GLenum* type, GLcharARB* name);
	void (*GetActiveUniformBlockName)(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei* length, GLchar* uniformBlockName);
	void (*GetActiveUniformBlockiv)(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint* params);
	void (*GetActiveUniformName)(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei* length, GLchar* uniformName);
	void (*GetActiveUniformsiv)(GLuint program, GLsizei uniformCount, const GLuint* uniformIndices, GLenum pname, GLint* params);
	void (*GetActiveVaryingNV)(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLsizei* size, GLenum* type, GLchar* name);
	void (*GetArrayObjectfvATI)(GLenum array, GLenum pname, GLfloat* params);
	void (*GetArrayObjectivATI)(GLenum array, GLenum pname, GLint* params);
	void (*GetAttachedObjectsARB)(GLhandleARB containerObj, GLsizei maxCount, GLsizei* count, GLhandleARB* obj);
	void (*GetAttachedShaders)(GLuint program, GLsizei maxCount, GLsizei* count, GLuint* obj);
	GLint (*GetAttribLocation)(GLuint program, const GLchar* name);
	GLint (*GetAttribLocationARB)(GLhandleARB programObj, const GLcharARB* name);
	void (*GetBooleanIndexedvEXT)(GLenum target, GLuint index, GLboolean* data);
	void (*GetBooleani_v)(GLenum target, GLuint index, GLboolean* data);
	void (*GetBooleanv)(GLenum pname, GLboolean* params);
	void (*GetBufferParameteri64v)(GLenum target, GLenum pname, GLint64* params);
	void (*GetBufferParameteriv)(GLenum target, GLenum pname, GLint* params);
	void (*GetBufferParameterivARB)(GLenum target, GLenum pname, GLint* params);
	void (*GetBufferParameterui64vNV)(GLenum target, GLenum pname, GLuint64EXT* params);
	void (*GetBufferPointerv)(GLenum target, GLenum pname, GLvoid** params);
	void (*GetBufferPointervARB)(GLenum target, GLenum pname, GLvoid** params);
	void (*GetBufferSubData)(GLenum target, GLintptr offset, GLsizeiptr size, GLvoid* data);
	void (*GetBufferSubDataARB)(GLenum target, GLintptrARB offset, GLsizeiptrARB size, GLvoid* data);
	void (*GetClipPlane)(GLenum plane, GLdouble* equation);
	void (*GetColorTable)(GLenum target, GLenum format, GLenum type, GLvoid* table);
	void (*GetColorTableEXT)(GLenum target, GLenum format, GLenum type, GLvoid* data);
	void (*GetColorTableParameterfv)(GLenum target, GLenum pname, GLfloat* params);
	void (*GetColorTableParameterfvEXT)(GLenum target, GLenum pname, GLfloat* params);
	void (*GetColorTableParameterfvSGI)(GLenum target, GLenum pname, GLfloat* params);
	void (*GetColorTableParameteriv)(GLenum target, GLenum pname, GLint* params);
	void (*GetColorTableParameterivEXT)(GLenum target, GLenum pname, GLint* params);
	void (*GetColorTableParameterivSGI)(GLenum target, GLenum pname, GLint* params);
	void (*GetColorTableSGI)(GLenum target, GLenum format, GLenum type, GLvoid* table);
	void (*GetCombinerInputParameterfvNV)(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat* params);
	void (*GetCombinerInputParameterivNV)(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint* params);
	void (*GetCombinerOutputParameterfvNV)(GLenum stage, GLenum portion, GLenum pname, GLfloat* params);
	void (*GetCombinerOutputParameterivNV)(GLenum stage, GLenum portion, GLenum pname, GLint* params);
	void (*GetCombinerStageParameterfvNV)(GLenum stage, GLenum pname, GLfloat* params);
	void (*GetCompressedMultiTexImageEXT)(GLenum texunit, GLenum target, GLint lod, GLvoid* img);
	void (*GetCompressedTexImage)(GLenum target, GLint level, GLvoid* img);
	void (*GetCompressedTexImageARB)(GLenum target, GLint level, GLvoid* img);
	void (*GetCompressedTextureImageEXT)(GLuint texture, GLenum target, GLint lod, GLvoid* img);
	void (*GetConvolutionFilter)(GLenum target, GLenum format, GLenum type, GLvoid* image);
	void (*GetConvolutionFilterEXT)(GLenum target, GLenum format, GLenum type, GLvoid* image);
	void (*GetConvolutionParameterfv)(GLenum target, GLenum pname, GLfloat* params);
	void (*GetConvolutionParameterfvEXT)(GLenum target, GLenum pname, GLfloat* params);
	void (*GetConvolutionParameteriv)(GLenum target, GLenum pname, GLint* params);
	void (*GetConvolutionParameterivEXT)(GLenum target, GLenum pname, GLint* params);
	void (*GetDetailTexFuncSGIS)(GLenum target, GLfloat* points);
	void (*GetDoubleIndexedvEXT)(GLenum target, GLuint index, GLdouble* data);
	void (*GetDoublev)(GLenum pname, GLdouble* params);
	GLenum (*GetError)();
	void (*GetFenceivNV)(GLuint fence, GLenum pname, GLint* params);
	void (*GetFinalCombinerInputParameterfvNV)(GLenum variable, GLenum pname, GLfloat* params);
	void (*GetFinalCombinerInputParameterivNV)(GLenum variable, GLenum pname, GLint* params);
	void (*GetFloatIndexedvEXT)(GLenum target, GLuint index, GLfloat* data);
	void (*GetFloatv)(GLenum pname, GLfloat* params);
	void (*GetFogFuncSGIS)(GLfloat* points);
	GLint (*GetFragDataIndex)(GLuint program, const GLchar* name);
	GLint (*GetFragDataLocation)(GLuint program, const GLchar* name);
	GLint (*GetFragDataLocationEXT)(GLuint program, const GLchar* name);
	void (*GetFragmentLightfvSGIX)(GLenum light, GLenum pname, GLfloat* params);
	void (*GetFragmentLightivSGIX)(GLenum light, GLenum pname, GLint* params);
	void (*GetFragmentMaterialfvSGIX)(GLenum face, GLenum pname, GLfloat* params);
	void (*GetFragmentMaterialivSGIX)(GLenum face, GLenum pname, GLint* params);
	void (*GetFramebufferAttachmentParameteriv)(GLenum target, GLenum attachment, GLenum pname, GLint* params);
	void (*GetFramebufferAttachmentParameterivEXT)(GLenum target, GLenum attachment, GLenum pname, GLint* params);
	void (*GetFramebufferParameterivEXT)(GLuint framebuffer, GLenum pname, GLint* params);
	GLhandleARB (*GetHandleARB)(GLenum pname);
	void (*GetHistogram)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid* values);
	void (*GetHistogramEXT)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid* values);
	void (*GetHistogramParameterfv)(GLenum target, GLenum pname, GLfloat* params);
	void (*GetHistogramParameterfvEXT)(GLenum target, GLenum pname, GLfloat* params);
	void (*GetHistogramParameteriv)(GLenum target, GLenum pname, GLint* params);
	void (*GetHistogramParameterivEXT)(GLenum target, GLenum pname, GLint* params);
	void (*GetImageTransformParameterfvHP)(GLenum target, GLenum pname, GLfloat* params);
	void (*GetImageTransformParameterivHP)(GLenum target, GLenum pname, GLint* params);
	void (*GetInfoLogARB)(GLhandleARB obj, GLsizei maxLength, GLsizei* length, GLcharARB* infoLog);
	GLint (*GetInstrumentsSGIX)();
	void (*GetInteger64i_v)(GLenum target, GLuint index, GLint64* data);
	void (*GetInteger64v)(GLenum pname, GLint64* params);
	void (*GetIntegerIndexedvEXT)(GLenum target, GLuint index, GLint* data);
	void (*GetIntegeri_v)(GLenum target, GLuint index, GLint* data);
	void (*GetIntegerui64i_vNV)(GLenum value, GLuint index, GLuint64EXT* result);
	void (*GetIntegerui64vNV)(GLenum value, GLuint64EXT* result);
	void (*GetIntegerv)(GLenum pname, GLint* params);
	void (*GetInvariantBooleanvEXT)(GLuint id, GLenum value, GLboolean* data);
	void (*GetInvariantFloatvEXT)(GLuint id, GLenum value, GLfloat* data);
	void (*GetInvariantIntegervEXT)(GLuint id, GLenum value, GLint* data);
	void (*GetLightfv)(GLenum light, GLenum pname, GLfloat* params);
	void (*GetLightiv)(GLenum light, GLenum pname, GLint* params);
	void (*GetListParameterfvSGIX)(GLuint list, GLenum pname, GLfloat* params);
	void (*GetListParameterivSGIX)(GLuint list, GLenum pname, GLint* params);
	void (*GetLocalConstantBooleanvEXT)(GLuint id, GLenum value, GLboolean* data);
	void (*GetLocalConstantFloatvEXT)(GLuint id, GLenum value, GLfloat* data);
	void (*GetLocalConstantIntegervEXT)(GLuint id, GLenum value, GLint* data);
	void (*GetMapAttribParameterfvNV)(GLenum target, GLuint index, GLenum pname, GLfloat* params);
	void (*GetMapAttribParameterivNV)(GLenum target, GLuint index, GLenum pname, GLint* params);
	void (*GetMapControlPointsNV)(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, GLvoid* points);
	void (*GetMapParameterfvNV)(GLenum target, GLenum pname, GLfloat* params);
	void (*GetMapParameterivNV)(GLenum target, GLenum pname, GLint* params);
	void (*GetMapdv)(GLenum target, GLenum query, GLdouble* v);
	void (*GetMapfv)(GLenum target, GLenum query, GLfloat* v);
	void (*GetMapiv)(GLenum target, GLenum query, GLint* v);
	void (*GetMaterialfv)(GLenum face, GLenum pname, GLfloat* params);
	void (*GetMaterialiv)(GLenum face, GLenum pname, GLint* params);
	void (*GetMinmax)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid* values);
	void (*GetMinmaxEXT)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid* values);
	void (*GetMinmaxParameterfv)(GLenum target, GLenum pname, GLfloat* params);
	void (*GetMinmaxParameterfvEXT)(GLenum target, GLenum pname, GLfloat* params);
	void (*GetMinmaxParameteriv)(GLenum target, GLenum pname, GLint* params);
	void (*GetMinmaxParameterivEXT)(GLenum target, GLenum pname, GLint* params);
	void (*GetMultiTexEnvfvEXT)(GLenum texunit, GLenum target, GLenum pname, GLfloat* params);
	void (*GetMultiTexEnvivEXT)(GLenum texunit, GLenum target, GLenum pname, GLint* params);
	void (*GetMultiTexGendvEXT)(GLenum texunit, GLenum coord, GLenum pname, GLdouble* params);
	void (*GetMultiTexGenfvEXT)(GLenum texunit, GLenum coord, GLenum pname, GLfloat* params);
	void (*GetMultiTexGenivEXT)(GLenum texunit, GLenum coord, GLenum pname, GLint* params);
	void (*GetMultiTexImageEXT)(GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, GLvoid* pixels);
	void (*GetMultiTexLevelParameterfvEXT)(GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat* params);
	void (*GetMultiTexLevelParameterivEXT)(GLenum texunit, GLenum target, GLint level, GLenum pname, GLint* params);
	void (*GetMultiTexParameterIivEXT)(GLenum texunit, GLenum target, GLenum pname, GLint* params);
	void (*GetMultiTexParameterIuivEXT)(GLenum texunit, GLenum target, GLenum pname, GLuint* params);
	void (*GetMultiTexParameterfvEXT)(GLenum texunit, GLenum target, GLenum pname, GLfloat* params);
	void (*GetMultiTexParameterivEXT)(GLenum texunit, GLenum target, GLenum pname, GLint* params);
	void (*GetMultisamplefv)(GLenum pname, GLuint index, GLfloat* val);
	void (*GetMultisamplefvNV)(GLenum pname, GLuint index, GLfloat* val);
	void (*GetNamedBufferParameterivEXT)(GLuint buffer, GLenum pname, GLint* params);
	void (*GetNamedBufferParameterui64vNV)(GLuint buffer, GLenum pname, GLuint64EXT* params);
	void (*GetNamedBufferPointervEXT)(GLuint buffer, GLenum pname, GLvoid** params);
	void (*GetNamedBufferSubDataEXT)(GLuint buffer, GLintptr offset, GLsizeiptr size, GLvoid* data);
	void (*GetNamedFramebufferAttachmentParameterivEXT)(GLuint framebuffer, GLenum attachment, GLenum pname, GLint* params);
	void (*GetNamedProgramLocalParameterIivEXT)(GLuint program, GLenum target, GLuint index, GLint* params);
	void (*GetNamedProgramLocalParameterIuivEXT)(GLuint program, GLenum target, GLuint index, GLuint* params);
	void (*GetNamedProgramLocalParameterdvEXT)(GLuint program, GLenum target, GLuint index, GLdouble* params);
	void (*GetNamedProgramLocalParameterfvEXT)(GLuint program, GLenum target, GLuint index, GLfloat* params);
	void (*GetNamedProgramStringEXT)(GLuint program, GLenum target, GLenum pname, GLvoid* string);
	void (*GetNamedProgramivEXT)(GLuint program, GLenum target, GLenum pname, GLint* params);
	void (*GetNamedRenderbufferParameterivEXT)(GLuint renderbuffer, GLenum pname, GLint* params);
	void (*GetNamedStringARB)(GLint namelen, const GLchar* name, GLsizei bufSize, GLint* stringlen, GLchar* string);
	void (*GetNamedStringivARB)(GLint namelen, const GLchar* name, GLenum pname, GLint* params);
	void (*GetObjectBufferfvATI)(GLuint buffer, GLenum pname, GLfloat* params);
	void (*GetObjectBufferivATI)(GLuint buffer, GLenum pname, GLint* params);
	void (*GetObjectParameterfvARB)(GLhandleARB obj, GLenum pname, GLfloat* params);
	void (*GetObjectParameterivAPPLE)(GLenum objectType, GLuint name, GLenum pname, GLint* params);
	void (*GetObjectParameterivARB)(GLhandleARB obj, GLenum pname, GLint* params);
	void (*GetOcclusionQueryivNV)(GLuint id, GLenum pname, GLint* params);
	void (*GetOcclusionQueryuivNV)(GLuint id, GLenum pname, GLuint* params);
	void (*GetPerfMonitorCounterDataAMD)(GLuint monitor, GLenum pname, GLsizei dataSize, GLuint* data, GLint* bytesWritten);
	void (*GetPerfMonitorCounterInfoAMD)(GLuint group, GLuint counter, GLenum pname, void* data);
	void (*GetPerfMonitorCounterStringAMD)(GLuint group, GLuint counter, GLsizei bufSize, GLsizei* length, GLchar* counterString);
	void (*GetPerfMonitorCountersAMD)(GLuint group, GLint* numCounters, GLint* maxActiveCounters, GLsizei counterSize, GLuint* counters);
	void (*GetPerfMonitorGroupStringAMD)(GLuint group, GLsizei bufSize, GLsizei* length, GLchar* groupString);
	void (*GetPerfMonitorGroupsAMD)(GLint* numGroups, GLsizei groupsSize, GLuint* groups);
	void (*GetPixelMapfv)(GLenum map, GLfloat* values);
	void (*GetPixelMapuiv)(GLenum map, GLuint* values);
	void (*GetPixelMapusv)(GLenum map, GLushort* values);
	void (*GetPixelTexGenParameterfvSGIS)(GLenum pname, GLfloat* params);
	void (*GetPixelTexGenParameterivSGIS)(GLenum pname, GLint* params);
	void (*GetPointerIndexedvEXT)(GLenum target, GLuint index, GLvoid** data);
	void (*GetPointerv)(GLenum pname, GLvoid** params);
	void (*GetPointervEXT)(GLenum pname, GLvoid** params);
	void (*GetPolygonStipple)(GLubyte* mask);
	void (*GetProgramEnvParameterIivNV)(GLenum target, GLuint index, GLint* params);
	void (*GetProgramEnvParameterIuivNV)(GLenum target, GLuint index, GLuint* params);
	void (*GetProgramEnvParameterdvARB)(GLenum target, GLuint index, GLdouble* params);
	void (*GetProgramEnvParameterfvARB)(GLenum target, GLuint index, GLfloat* params);
	void (*GetProgramInfoLog)(GLuint program, GLsizei bufSize, GLsizei* length, GLchar* infoLog);
	void (*GetProgramLocalParameterIivNV)(GLenum target, GLuint index, GLint* params);
	void (*GetProgramLocalParameterIuivNV)(GLenum target, GLuint index, GLuint* params);
	void (*GetProgramLocalParameterdvARB)(GLenum target, GLuint index, GLdouble* params);
	void (*GetProgramLocalParameterfvARB)(GLenum target, GLuint index, GLfloat* params);
	void (*GetProgramNamedParameterdvNV)(GLuint id, GLsizei len, const GLubyte* name, GLdouble* params);
	void (*GetProgramNamedParameterfvNV)(GLuint id, GLsizei len, const GLubyte* name, GLfloat* params);
	void (*GetProgramParameterdvNV)(GLenum target, GLuint index, GLenum pname, GLdouble* params);
	void (*GetProgramParameterfvNV)(GLenum target, GLuint index, GLenum pname, GLfloat* params);
	void (*GetProgramStageiv)(GLuint program, GLenum shadertype, GLenum pname, GLint* values);
	void (*GetProgramStringARB)(GLenum target, GLenum pname, GLvoid* string);
	void (*GetProgramStringNV)(GLuint id, GLenum pname, GLubyte* program);
	void (*GetProgramiv)(GLuint program, GLenum pname, GLint* params);
	void (*GetProgramivARB)(GLenum target, GLenum pname, GLint* params);
	void (*GetProgramivNV)(GLuint id, GLenum pname, GLint* params);
	void (*GetQueryIndexediv)(GLenum target, GLuint index, GLenum pname, GLint* params);
	void (*GetQueryObjecti64v)(GLuint id, GLenum pname, GLint64* params);
	void (*GetQueryObjecti64vEXT)(GLuint id, GLenum pname, GLint64EXT* params);
	void (*GetQueryObjectiv)(GLuint id, GLenum pname, GLint* params);
	void (*GetQueryObjectivARB)(GLuint id, GLenum pname, GLint* params);
	void (*GetQueryObjectui64v)(GLuint id, GLenum pname, GLuint64* params);
	void (*GetQueryObjectui64vEXT)(GLuint id, GLenum pname, GLuint64EXT* params);
	void (*GetQueryObjectuiv)(GLuint id, GLenum pname, GLuint* params);
	void (*GetQueryObjectuivARB)(GLuint id, GLenum pname, GLuint* params);
	void (*GetQueryiv)(GLenum target, GLenum pname, GLint* params);
	void (*GetQueryivARB)(GLenum target, GLenum pname, GLint* params);
	void (*GetRenderbufferParameteriv)(GLenum target, GLenum pname, GLint* params);
	void (*GetRenderbufferParameterivEXT)(GLenum target, GLenum pname, GLint* params);
	void (*GetSamplerParameterIfv)(GLuint sampler, GLenum pname, GLfloat* params);
	void (*GetSamplerParameterIiv)(GLuint sampler, GLenum pname, GLint* params);
	void (*GetSamplerParameterfv)(GLuint sampler, GLenum pname, GLfloat* params);
	void (*GetSamplerParameteriv)(GLuint sampler, GLenum pname, GLint* params);
	void (*GetSeparableFilter)(GLenum target, GLenum format, GLenum type, GLvoid* row, GLvoid* column, GLvoid* span);
	void (*GetSeparableFilterEXT)(GLenum target, GLenum format, GLenum type, GLvoid* row, GLvoid* column, GLvoid* span);
	void (*GetShaderInfoLog)(GLuint shader, GLsizei bufSize, GLsizei* length, GLchar* infoLog);
	void (*GetShaderSource)(GLuint shader, GLsizei bufSize, GLsizei* length, GLchar* source);
	void (*GetShaderSourceARB)(GLhandleARB obj, GLsizei maxLength, GLsizei* length, GLcharARB* source);
	void (*GetShaderiv)(GLuint shader, GLenum pname, GLint* params);
	void (*GetSharpenTexFuncSGIS)(GLenum target, GLfloat* points);
	const GLubyte * (*GetString)(GLenum name);
	const GLubyte * (*GetStringi)(GLenum name, GLuint index);
	GLuint (*GetSubroutineIndex)(GLuint program, GLenum shadertype, const GLchar* name);
	GLint (*GetSubroutineUniformLocation)(GLuint program, GLenum shadertype, const GLchar* name);
	void (*GetSynciv)(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei* length, GLint* values);
	void (*GetTexBumpParameterfvATI)(GLenum pname, GLfloat* param);
	void (*GetTexBumpParameterivATI)(GLenum pname, GLint* param);
	void (*GetTexEnvfv)(GLenum target, GLenum pname, GLfloat* params);
	void (*GetTexEnviv)(GLenum target, GLenum pname, GLint* params);
	void (*GetTexFilterFuncSGIS)(GLenum target, GLenum filter, GLfloat* weights);
	void (*GetTexGendv)(GLenum coord, GLenum pname, GLdouble* params);
	void (*GetTexGenfv)(GLenum coord, GLenum pname, GLfloat* params);
	void (*GetTexGeniv)(GLenum coord, GLenum pname, GLint* params);
	void (*GetTexImage)(GLenum target, GLint level, GLenum format, GLenum type, GLvoid* pixels);
	void (*GetTexLevelParameterfv)(GLenum target, GLint level, GLenum pname, GLfloat* params);
	void (*GetTexLevelParameteriv)(GLenum target, GLint level, GLenum pname, GLint* params);
	void (*GetTexParameterIiv)(GLenum target, GLenum pname, GLint* params);
	void (*GetTexParameterIivEXT)(GLenum target, GLenum pname, GLint* params);
	void (*GetTexParameterIuiv)(GLenum target, GLenum pname, GLuint* params);
	void (*GetTexParameterIuivEXT)(GLenum target, GLenum pname, GLuint* params);
	void (*GetTexParameterPointervAPPLE)(GLenum target, GLenum pname, GLvoid** params);
	void (*GetTexParameterfv)(GLenum target, GLenum pname, GLfloat* params);
	void (*GetTexParameteriv)(GLenum target, GLenum pname, GLint* params);
	void (*GetTextureImageEXT)(GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, GLvoid* pixels);
	void (*GetTextureLevelParameterfvEXT)(GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat* params);
	void (*GetTextureLevelParameterivEXT)(GLuint texture, GLenum target, GLint level, GLenum pname, GLint* params);
	void (*GetTextureParameterIivEXT)(GLuint texture, GLenum target, GLenum pname, GLint* params);
	void (*GetTextureParameterIuivEXT)(GLuint texture, GLenum target, GLenum pname, GLuint* params);
	void (*GetTextureParameterfvEXT)(GLuint texture, GLenum target, GLenum pname, GLfloat* params);
	void (*GetTextureParameterivEXT)(GLuint texture, GLenum target, GLenum pname, GLint* params);
	void (*GetTrackMatrixivNV)(GLenum target, GLuint address, GLenum pname, GLint* params);
	void (*GetTransformFeedbackVarying)(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLsizei* size, GLenum* type, GLchar* name);
	void (*GetTransformFeedbackVaryingEXT)(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLsizei* size, GLenum* type, GLchar* name);
	void (*GetTransformFeedbackVaryingNV)(GLuint program, GLuint index, GLint* location);
	GLuint (*GetUniformBlockIndex)(GLuint program, const GLchar* uniformBlockName);
	GLint (*GetUniformBufferSizeEXT)(GLuint program, GLint location);
	void (*GetUniformIndices)(GLuint program, GLsizei uniformCount, const GLchar** uniformNames, GLuint* uniformIndices);
	GLint (*GetUniformLocation)(GLuint program, const GLchar* name);
	GLint (*GetUniformLocationARB)(GLhandleARB programObj, const GLcharARB* name);
	GLintptr (*GetUniformOffsetEXT)(GLuint program, GLint location);
	void (*GetUniformSubroutineuiv)(GLenum shadertype, GLint location, GLuint* params);
	void (*GetUniformdv)(GLuint program, GLint location, GLdouble* params);
	void (*GetUniformfv)(GLuint program, GLint location, GLfloat* params);
	void (*GetUniformfvARB)(GLhandleARB programObj, GLint location, GLfloat* params);
	void (*GetUniformiv)(GLuint program, GLint location, GLint* params);
	void (*GetUniformivARB)(GLhandleARB programObj, GLint location, GLint* params);
	void (*GetUniformui64vNV)(GLuint program, GLint location, GLuint64EXT* params);
	void (*GetUniformuiv)(GLuint program, GLint location, GLuint* params);
	void (*GetUniformuivEXT)(GLuint program, GLint location, GLuint* params);
	void (*GetVariantArrayObjectfvATI)(GLuint id, GLenum pname, GLfloat* params);
	void (*GetVariantArrayObjectivATI)(GLuint id, GLenum pname, GLint* params);
	void (*GetVariantBooleanvEXT)(GLuint id, GLenum value, GLboolean* data);
	void (*GetVariantFloatvEXT)(GLuint id, GLenum value, GLfloat* data);
	void (*GetVariantIntegervEXT)(GLuint id, GLenum value, GLint* data);
	void (*GetVariantPointervEXT)(GLuint id, GLenum value, GLvoid** data);
	GLint (*GetVaryingLocationNV)(GLuint program, const GLchar* name);
	void (*GetVertexAttribArrayObjectfvATI)(GLuint index, GLenum pname, GLfloat* params);
	void (*GetVertexAttribArrayObjectivATI)(GLuint index, GLenum pname, GLint* params);
	void (*GetVertexAttribIiv)(GLuint index, GLenum pname, GLint* params);
	void (*GetVertexAttribIivEXT)(GLuint index, GLenum pname, GLint* params);
	void (*GetVertexAttribIuiv)(GLuint index, GLenum pname, GLuint* params);
	void (*GetVertexAttribIuivEXT)(GLuint index, GLenum pname, GLuint* params);
	void (*GetVertexAttribPointerv)(GLuint index, GLenum pname, GLvoid** pointer);
	void (*GetVertexAttribPointervARB)(GLuint index, GLenum pname, GLvoid** pointer);
	void (*GetVertexAttribPointervNV)(GLuint index, GLenum pname, GLvoid** pointer);
	void (*GetVertexAttribdv)(GLuint index, GLenum pname, GLdouble* params);
	void (*GetVertexAttribdvARB)(GLuint index, GLenum pname, GLdouble* params);
	void (*GetVertexAttribdvNV)(GLuint index, GLenum pname, GLdouble* params);
	void (*GetVertexAttribfv)(GLuint index, GLenum pname, GLfloat* params);
	void (*GetVertexAttribfvARB)(GLuint index, GLenum pname, GLfloat* params);
	void (*GetVertexAttribfvNV)(GLuint index, GLenum pname, GLfloat* params);
	void (*GetVertexAttribiv)(GLuint index, GLenum pname, GLint* params);
	void (*GetVertexAttribivARB)(GLuint index, GLenum pname, GLint* params);
	void (*GetVertexAttribivNV)(GLuint index, GLenum pname, GLint* params);
	void (*GetVideoCaptureStreamdvNV)(GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble* params);
	void (*GetVideoCaptureStreamfvNV)(GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat* params);
	void (*GetVideoCaptureStreamivNV)(GLuint video_capture_slot, GLuint stream, GLenum pname, GLint* params);
	void (*GetVideoCaptureivNV)(GLuint video_capture_slot, GLenum pname, GLint* params);
	void (*GetVideoi64vNV)(GLuint video_slot, GLenum pname, GLint64EXT* params);
	void (*GetVideoivNV)(GLuint video_slot, GLenum pname, GLint* params);
	void (*GetVideoui64vNV)(GLuint video_slot, GLenum pname, GLuint64EXT* params);
	void (*GetVideouivNV)(GLuint video_slot, GLenum pname, GLuint* params);
	void (*GlobalAlphaFactorbSUN)(GLbyte factor);
	void (*GlobalAlphaFactordSUN)(GLdouble factor);
	void (*GlobalAlphaFactorfSUN)(GLfloat factor);
	void (*GlobalAlphaFactoriSUN)(GLint factor);
	void (*GlobalAlphaFactorsSUN)(GLshort factor);
	void (*GlobalAlphaFactorubSUN)(GLubyte factor);
	void (*GlobalAlphaFactoruiSUN)(GLuint factor);
	void (*GlobalAlphaFactorusSUN)(GLushort factor);
	void (*Hint)(GLenum target, GLenum mode);
	void (*HintPGI)(GLenum target, GLint mode);
	void (*Histogram)(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
	void (*HistogramEXT)(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
	void (*IglooInterfaceSGIX)(GLenum pname, const GLvoid* params);
	void (*ImageTransformParameterfHP)(GLenum target, GLenum pname, GLfloat param);
	void (*ImageTransformParameterfvHP)(GLenum target, GLenum pname, const GLfloat* params);
	void (*ImageTransformParameteriHP)(GLenum target, GLenum pname, GLint param);
	void (*ImageTransformParameterivHP)(GLenum target, GLenum pname, const GLint* params);
	void (*IndexFormatNV)(GLenum type, GLsizei stride);
	void (*IndexFuncEXT)(GLenum func, GLclampf ref);
	void (*IndexMask)(GLuint mask);
	void (*IndexMaterialEXT)(GLenum face, GLenum mode);
	void (*IndexPointer)(GLenum type, GLsizei stride, const GLvoid* pointer);
	void (*IndexPointerEXT)(GLenum type, GLsizei stride, GLsizei count, const GLvoid* pointer);
	void (*IndexPointerListIBM)(GLenum type, GLint stride, const GLvoid** pointer, GLint ptrstride);
	void (*Indexd)(GLdouble c);
	void (*Indexdv)(const GLdouble* c);
	void (*Indexf)(GLfloat c);
	void (*Indexfv)(const GLfloat* c);
	void (*Indexi)(GLint c);
	void (*Indexiv)(const GLint* c);
	void (*Indexs)(GLshort c);
	void (*Indexsv)(const GLshort* c);
	void (*Indexub)(GLubyte c);
	void (*Indexubv)(const GLubyte* c);
	void (*InitNames)();
	void (*InsertComponentEXT)(GLuint res, GLuint src, GLuint num);
	void (*InstrumentsBufferSGIX)(GLsizei size, GLint* buffer);
	void (*InterleavedArrays)(GLenum format, GLsizei stride, const GLvoid* pointer);
	GLboolean (*IsAsyncMarkerSGIX)(GLuint marker);
	GLboolean (*IsBuffer)(GLuint buffer);
	GLboolean (*IsBufferARB)(GLuint buffer);
	GLboolean (*IsBufferResidentNV)(GLenum target);
	GLboolean (*IsEnabled)(GLenum cap);
	GLboolean (*IsEnabledIndexedEXT)(GLenum target, GLuint index);
	GLboolean (*IsEnabledi)(GLenum target, GLuint index);
	GLboolean (*IsFenceAPPLE)(GLuint fence);
	GLboolean (*IsFenceNV)(GLuint fence);
	GLboolean (*IsFramebuffer)(GLuint framebuffer);
	GLboolean (*IsFramebufferEXT)(GLuint framebuffer);
	GLboolean (*IsList)(GLuint list);
	GLboolean (*IsNamedBufferResidentNV)(GLuint buffer);
	GLboolean (*IsNamedStringARB)(GLint namelen, const GLchar* name);
	GLboolean (*IsObjectBufferATI)(GLuint buffer);
	GLboolean (*IsOcclusionQueryNV)(GLuint id);
	GLboolean (*IsProgram)(GLuint program);
	GLboolean (*IsProgramARB)(GLuint program);
	GLboolean (*IsProgramNV)(GLuint id);
	GLboolean (*IsQuery)(GLuint id);
	GLboolean (*IsQueryARB)(GLuint id);
	GLboolean (*IsRenderbuffer)(GLuint renderbuffer);
	GLboolean (*IsRenderbufferEXT)(GLuint renderbuffer);
	GLboolean (*IsSampler)(GLuint sampler);
	GLboolean (*IsShader)(GLuint shader);
	GLboolean (*IsSync)(GLsync sync);
	GLboolean (*IsTexture)(GLuint texture);
	GLboolean (*IsTextureEXT)(GLuint texture);
	GLboolean (*IsTransformFeedback)(GLuint id);
	GLboolean (*IsTransformFeedbackNV)(GLuint id);
	GLboolean (*IsVariantEnabledEXT)(GLuint id, GLenum cap);
	GLboolean (*IsVertexArray)(GLuint array);
	GLboolean (*IsVertexArrayAPPLE)(GLuint array);
	GLboolean (*IsVertexAttribEnabledAPPLE)(GLuint index, GLenum pname);
	void (*LightEnviSGIX)(GLenum pname, GLint param);
	void (*LightModelf)(GLenum pname, GLfloat param);
	void (*LightModelfv)(GLenum pname, const GLfloat* params);
	void (*LightModeli)(GLenum pname, GLint param);
	void (*LightModeliv)(GLenum pname, const GLint* params);
	void (*Lightf)(GLenum light, GLenum pname, GLfloat param);
	void (*Lightfv)(GLenum light, GLenum pname, const GLfloat* params);
	void (*Lighti)(GLenum light, GLenum pname, GLint param);
	void (*Lightiv)(GLenum light, GLenum pname, const GLint* params);
	void (*LineStipple)(GLint factor, GLushort pattern);
	void (*LineWidth)(GLfloat width);
	void (*LinkProgram)(GLuint program);
	void (*LinkProgramARB)(GLhandleARB programObj);
	void (*ListBase)(GLuint base);
	void (*ListParameterfSGIX)(GLuint list, GLenum pname, GLfloat param);
	void (*ListParameterfvSGIX)(GLuint list, GLenum pname, const GLfloat* params);
	void (*ListParameteriSGIX)(GLuint list, GLenum pname, GLint param);
	void (*ListParameterivSGIX)(GLuint list, GLenum pname, const GLint* params);
	void (*LoadIdentity)();
	void (*LoadIdentityDeformationMapSGIX)(GLbitfield mask);
	void (*LoadMatrixd)(const GLdouble* m);
	void (*LoadMatrixf)(const GLfloat* m);
	void (*LoadName)(GLuint name);
	void (*LoadProgramNV)(GLenum target, GLuint id, GLsizei len, const GLubyte* program);
	void (*LoadTransposeMatrixd)(const GLdouble* m);
	void (*LoadTransposeMatrixdARB)(const GLdouble* m);
	void (*LoadTransposeMatrixf)(const GLfloat* m);
	void (*LoadTransposeMatrixfARB)(const GLfloat* m);
	void (*LockArraysEXT)(GLint first, GLsizei count);
	void (*LogicOp)(GLenum opcode);
	void (*MakeBufferNonResidentNV)(GLenum target);
	void (*MakeBufferResidentNV)(GLenum target, GLenum access);
	void (*MakeNamedBufferNonResidentNV)(GLuint buffer);
	void (*MakeNamedBufferResidentNV)(GLuint buffer, GLenum access);
	void (*Map1d)(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble* points);
	void (*Map1f)(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat* points);
	void (*Map2d)(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble* points);
	void (*Map2f)(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat* points);
	GLvoid* (*MapBuffer)(GLenum target, GLenum access);
	GLvoid* (*MapBufferARB)(GLenum target, GLenum access);
	GLvoid* (*MapBufferRange)(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
	void (*MapControlPointsNV)(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const GLvoid* points);
	void (*MapGrid1d)(GLint un, GLdouble u1, GLdouble u2);
	void (*MapGrid1f)(GLint un, GLfloat u1, GLfloat u2);
	void (*MapGrid2d)(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
	void (*MapGrid2f)(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
	GLvoid* (*MapNamedBufferEXT)(GLuint buffer, GLenum access);
	GLvoid* (*MapObjectBufferATI)(GLuint buffer);
	void (*MapParameterfvNV)(GLenum target, GLenum pname, const GLfloat* params);
	void (*MapParameterivNV)(GLenum target, GLenum pname, const GLint* params);
	void (*MapVertexAttrib1dAPPLE)(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble* points);
	void (*MapVertexAttrib1fAPPLE)(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat* points);
	void (*MapVertexAttrib2dAPPLE)(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble* points);
	void (*MapVertexAttrib2fAPPLE)(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat* points);
	void (*Materialf)(GLenum face, GLenum pname, GLfloat param);
	void (*Materialfv)(GLenum face, GLenum pname, const GLfloat* params);
	void (*Materiali)(GLenum face, GLenum pname, GLint param);
	void (*Materialiv)(GLenum face, GLenum pname, const GLint* params);
	void (*MatrixFrustumEXT)(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
	void (*MatrixIndexPointerARB)(GLint size, GLenum type, GLsizei stride, const GLvoid* pointer);
	void (*MatrixIndexubvARB)(GLint size, const GLubyte* indices);
	void (*MatrixIndexuivARB)(GLint size, const GLuint* indices);
	void (*MatrixIndexusvARB)(GLint size, const GLushort* indices);
	void (*MatrixLoadIdentityEXT)(GLenum mode);
	void (*MatrixLoadTransposedEXT)(GLenum mode, const GLdouble* m);
	void (*MatrixLoadTransposefEXT)(GLenum mode, const GLfloat* m);
	void (*MatrixLoaddEXT)(GLenum mode, const GLdouble* m);
	void (*MatrixLoadfEXT)(GLenum mode, const GLfloat* m);
	void (*MatrixMode)(GLenum mode);
	void (*MatrixMultTransposedEXT)(GLenum mode, const GLdouble* m);
	void (*MatrixMultTransposefEXT)(GLenum mode, const GLfloat* m);
	void (*MatrixMultdEXT)(GLenum mode, const GLdouble* m);
	void (*MatrixMultfEXT)(GLenum mode, const GLfloat* m);
	void (*MatrixOrthoEXT)(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
	void (*MatrixPopEXT)(GLenum mode);
	void (*MatrixPushEXT)(GLenum mode);
	void (*MatrixRotatedEXT)(GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
	void (*MatrixRotatefEXT)(GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
	void (*MatrixScaledEXT)(GLenum mode, GLdouble x, GLdouble y, GLdouble z);
	void (*MatrixScalefEXT)(GLenum mode, GLfloat x, GLfloat y, GLfloat z);
	void (*MatrixTranslatedEXT)(GLenum mode, GLdouble x, GLdouble y, GLdouble z);
	void (*MatrixTranslatefEXT)(GLenum mode, GLfloat x, GLfloat y, GLfloat z);
	void (*MinSampleShading)(GLclampf value);
	void (*Minmax)(GLenum target, GLenum internalformat, GLboolean sink);
	void (*MinmaxEXT)(GLenum target, GLenum internalformat, GLboolean sink);
	void (*MultMatrixd)(const GLdouble* m);
	void (*MultMatrixf)(const GLfloat* m);
	void (*MultTransposeMatrixd)(const GLdouble* m);
	void (*MultTransposeMatrixdARB)(const GLdouble* m);
	void (*MultTransposeMatrixf)(const GLfloat* m);
	void (*MultTransposeMatrixfARB)(const GLfloat* m);
	void (*MultiDrawArrays)(GLenum mode, GLint* first, GLsizei* count, GLsizei primcount);
	void (*MultiDrawArraysEXT)(GLenum mode, GLint* first, GLsizei* count, GLsizei primcount);
	void (*MultiDrawElementArrayAPPLE)(GLenum mode, const GLint* first, const GLsizei* count, GLsizei primcount);
	void (*MultiDrawElements)(GLenum mode, const GLsizei* count, GLenum type, const GLvoid** indices, GLsizei primcount);
	void (*MultiDrawElementsBaseVertex)(GLenum mode, const GLsizei* count, GLenum type, const GLvoid** indices, GLsizei primcount, const GLint* basevertex);
	void (*MultiDrawElementsEXT)(GLenum mode, const GLsizei* count, GLenum type, const GLvoid** indices, GLsizei primcount);
	void (*MultiDrawRangeElementArrayAPPLE)(GLenum mode, GLuint start, GLuint end, const GLint* first, const GLsizei* count, GLsizei primcount);
	void (*MultiModeDrawArraysIBM)(const GLenum* mode, const GLint* first, const GLsizei* count, GLsizei primcount, GLint modestride);
	void (*MultiModeDrawElementsIBM)(const GLenum* mode, const GLsizei* count, GLenum type, const GLvoid* const* indices, GLsizei primcount, GLint modestride);
	void (*MultiTexBufferEXT)(GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer);
	void (*MultiTexCoord1d)(GLenum target, GLdouble s);
	void (*MultiTexCoord1dARB)(GLenum target, GLdouble s);
	void (*MultiTexCoord1dv)(GLenum target, const GLdouble* v);
	void (*MultiTexCoord1dvARB)(GLenum target, const GLdouble* v);
	void (*MultiTexCoord1f)(GLenum target, GLfloat s);
	void (*MultiTexCoord1fARB)(GLenum target, GLfloat s);
	void (*MultiTexCoord1fv)(GLenum target, const GLfloat* v);
	void (*MultiTexCoord1fvARB)(GLenum target, const GLfloat* v);
	void (*MultiTexCoord1hNV)(GLenum target, GLhalfNV s);
	void (*MultiTexCoord1hvNV)(GLenum target, const GLhalfNV* v);
	void (*MultiTexCoord1i)(GLenum target, GLint s);
	void (*MultiTexCoord1iARB)(GLenum target, GLint s);
	void (*MultiTexCoord1iv)(GLenum target, const GLint* v);
	void (*MultiTexCoord1ivARB)(GLenum target, const GLint* v);
	void (*MultiTexCoord1s)(GLenum target, GLshort s);
	void (*MultiTexCoord1sARB)(GLenum target, GLshort s);
	void (*MultiTexCoord1sv)(GLenum target, const GLshort* v);
	void (*MultiTexCoord1svARB)(GLenum target, const GLshort* v);
	void (*MultiTexCoord2d)(GLenum target, GLdouble s, GLdouble t);
	void (*MultiTexCoord2dARB)(GLenum target, GLdouble s, GLdouble t);
	void (*MultiTexCoord2dv)(GLenum target, const GLdouble* v);
	void (*MultiTexCoord2dvARB)(GLenum target, const GLdouble* v);
	void (*MultiTexCoord2f)(GLenum target, GLfloat s, GLfloat t);
	void (*MultiTexCoord2fARB)(GLenum target, GLfloat s, GLfloat t);
	void (*MultiTexCoord2fv)(GLenum target, const GLfloat* v);
	void (*MultiTexCoord2fvARB)(GLenum target, const GLfloat* v);
	void (*MultiTexCoord2hNV)(GLenum target, GLhalfNV s, GLhalfNV t);
	void (*MultiTexCoord2hvNV)(GLenum target, const GLhalfNV* v);
	void (*MultiTexCoord2i)(GLenum target, GLint s, GLint t);
	void (*MultiTexCoord2iARB)(GLenum target, GLint s, GLint t);
	void (*MultiTexCoord2iv)(GLenum target, const GLint* v);
	void (*MultiTexCoord2ivARB)(GLenum target, const GLint* v);
	void (*MultiTexCoord2s)(GLenum target, GLshort s, GLshort t);
	void (*MultiTexCoord2sARB)(GLenum target, GLshort s, GLshort t);
	void (*MultiTexCoord2sv)(GLenum target, const GLshort* v);
	void (*MultiTexCoord2svARB)(GLenum target, const GLshort* v);
	void (*MultiTexCoord3d)(GLenum target, GLdouble s, GLdouble t, GLdouble r);
	void (*MultiTexCoord3dARB)(GLenum target, GLdouble s, GLdouble t, GLdouble r);
	void (*MultiTexCoord3dv)(GLenum target, const GLdouble* v);
	void (*MultiTexCoord3dvARB)(GLenum target, const GLdouble* v);
	void (*MultiTexCoord3f)(GLenum target, GLfloat s, GLfloat t, GLfloat r);
	void (*MultiTexCoord3fARB)(GLenum target, GLfloat s, GLfloat t, GLfloat r);
	void (*MultiTexCoord3fv)(GLenum target, const GLfloat* v);
	void (*MultiTexCoord3fvARB)(GLenum target, const GLfloat* v);
	void (*MultiTexCoord3hNV)(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r);
	void (*MultiTexCoord3hvNV)(GLenum target, const GLhalfNV* v);
	void (*MultiTexCoord3i)(GLenum target, GLint s, GLint t, GLint r);
	void (*MultiTexCoord3iARB)(GLenum target, GLint s, GLint t, GLint r);
	void (*MultiTexCoord3iv)(GLenum target, const GLint* v);
	void (*MultiTexCoord3ivARB)(GLenum target, const GLint* v);
	void (*MultiTexCoord3s)(GLenum target, GLshort s, GLshort t, GLshort r);
	void (*MultiTexCoord3sARB)(GLenum target, GLshort s, GLshort t, GLshort r);
	void (*MultiTexCoord3sv)(GLenum target, const GLshort* v);
	void (*MultiTexCoord3svARB)(GLenum target, const GLshort* v);
	void (*MultiTexCoord4d)(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
	void (*MultiTexCoord4dARB)(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
	void (*MultiTexCoord4dv)(GLenum target, const GLdouble* v);
	void (*MultiTexCoord4dvARB)(GLenum target, const GLdouble* v);
	void (*MultiTexCoord4f)(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
	void (*MultiTexCoord4fARB)(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
	void (*MultiTexCoord4fv)(GLenum target, const GLfloat* v);
	void (*MultiTexCoord4fvARB)(GLenum target, const GLfloat* v);
	void (*MultiTexCoord4hNV)(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);
	void (*MultiTexCoord4hvNV)(GLenum target, const GLhalfNV* v);
	void (*MultiTexCoord4i)(GLenum target, GLint s, GLint t, GLint r, GLint q);
	void (*MultiTexCoord4iARB)(GLenum target, GLint s, GLint t, GLint r, GLint q);
	void (*MultiTexCoord4iv)(GLenum target, const GLint* v);
	void (*MultiTexCoord4ivARB)(GLenum target, const GLint* v);
	void (*MultiTexCoord4s)(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
	void (*MultiTexCoord4sARB)(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
	void (*MultiTexCoord4sv)(GLenum target, const GLshort* v);
	void (*MultiTexCoord4svARB)(GLenum target, const GLshort* v);
	void (*MultiTexCoordP1ui)(GLenum texture, GLenum type, GLuint coords);
	void (*MultiTexCoordP1uiv)(GLenum texture, GLenum type, const GLuint* coords);
	void (*MultiTexCoordP2ui)(GLenum texture, GLenum type, GLuint coords);
	void (*MultiTexCoordP2uiv)(GLenum texture, GLenum type, const GLuint* coords);
	void (*MultiTexCoordP3ui)(GLenum texture, GLenum type, GLuint coords);
	void (*MultiTexCoordP3uiv)(GLenum texture, GLenum type, const GLuint* coords);
	void (*MultiTexCoordP4ui)(GLenum texture, GLenum type, GLuint coords);
	void (*MultiTexCoordP4uiv)(GLenum texture, GLenum type, const GLuint* coords);
	void (*MultiTexCoordPointerEXT)(GLenum texunit, GLint size, GLenum type, GLsizei stride, const GLvoid* pointer);
	void (*MultiTexEnvfEXT)(GLenum texunit, GLenum target, GLenum pname, GLfloat param);
	void (*MultiTexEnvfvEXT)(GLenum texunit, GLenum target, GLenum pname, const GLfloat* params);
	void (*MultiTexEnviEXT)(GLenum texunit, GLenum target, GLenum pname, GLint param);
	void (*MultiTexEnvivEXT)(GLenum texunit, GLenum target, GLenum pname, const GLint* params);
	void (*MultiTexGendEXT)(GLenum texunit, GLenum coord, GLenum pname, GLdouble param);
	void (*MultiTexGendvEXT)(GLenum texunit, GLenum coord, GLenum pname, const GLdouble* params);
	void (*MultiTexGenfEXT)(GLenum texunit, GLenum coord, GLenum pname, GLfloat param);
	void (*MultiTexGenfvEXT)(GLenum texunit, GLenum coord, GLenum pname, const GLfloat* params);
	void (*MultiTexGeniEXT)(GLenum texunit, GLenum coord, GLenum pname, GLint param);
	void (*MultiTexGenivEXT)(GLenum texunit, GLenum coord, GLenum pname, const GLint* params);
	void (*MultiTexImage1DEXT)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid* pixels);
	void (*MultiTexImage2DEXT)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid* pixels);
	void (*MultiTexImage3DEXT)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid* pixels);
	void (*MultiTexParameterIivEXT)(GLenum texunit, GLenum target, GLenum pname, const GLint* params);
	void (*MultiTexParameterIuivEXT)(GLenum texunit, GLenum target, GLenum pname, const GLuint* params);
	void (*MultiTexParameterfEXT)(GLenum texunit, GLenum target, GLenum pname, GLfloat param);
	void (*MultiTexParameterfvEXT)(GLenum texunit, GLenum target, GLenum pname, const GLfloat* params);
	void (*MultiTexParameteriEXT)(GLenum texunit, GLenum target, GLenum pname, GLint param);
	void (*MultiTexParameterivEXT)(GLenum texunit, GLenum target, GLenum pname, const GLint* params);
	void (*MultiTexRenderbufferEXT)(GLenum texunit, GLenum target, GLuint renderbuffer);
	void (*MultiTexSubImage1DEXT)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid* pixels);
	void (*MultiTexSubImage2DEXT)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* pixels);
	void (*MultiTexSubImage3DEXT)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid* pixels);
	void (*NamedBufferDataEXT)(GLuint buffer, GLsizeiptr size, const GLvoid* data, GLenum usage);
	void (*NamedBufferSubDataEXT)(GLuint buffer, GLintptr offset, GLsizeiptr size, const GLvoid* data);
	void (*NamedFramebufferRenderbufferEXT)(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
	void (*NamedFramebufferTexture1DEXT)(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
	void (*NamedFramebufferTexture2DEXT)(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
	void (*NamedFramebufferTexture3DEXT)(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
	void (*NamedFramebufferTextureEXT)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
	void (*NamedFramebufferTextureFaceEXT)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face);
	void (*NamedFramebufferTextureLayerEXT)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
	void (*NamedProgramLocalParameter4dEXT)(GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	void (*NamedProgramLocalParameter4dvEXT)(GLuint program, GLenum target, GLuint index, const GLdouble* params);
	void (*NamedProgramLocalParameter4fEXT)(GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
	void (*NamedProgramLocalParameter4fvEXT)(GLuint program, GLenum target, GLuint index, const GLfloat* params);
	void (*NamedProgramLocalParameterI4iEXT)(GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
	void (*NamedProgramLocalParameterI4ivEXT)(GLuint program, GLenum target, GLuint index, const GLint* params);
	void (*NamedProgramLocalParameterI4uiEXT)(GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
	void (*NamedProgramLocalParameterI4uivEXT)(GLuint program, GLenum target, GLuint index, const GLuint* params);
	void (*NamedProgramLocalParameters4fvEXT)(GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat* params);
	void (*NamedProgramLocalParametersI4ivEXT)(GLuint program, GLenum target, GLuint index, GLsizei count, const GLint* params);
	void (*NamedProgramLocalParametersI4uivEXT)(GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint* params);
	void (*NamedProgramStringEXT)(GLuint program, GLenum target, GLenum format, GLsizei len, const GLvoid* string);
	void (*NamedRenderbufferStorageEXT)(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
	void (*NamedRenderbufferStorageMultisampleCoverageEXT)(GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
	void (*NamedRenderbufferStorageMultisampleEXT)(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
	void (*NamedStringARB)(GLenum type, GLint namelen, const GLchar* name, GLint stringlen, const GLchar* string);
	void (*NewList)(GLuint list, GLenum mode);
	GLuint (*NewObjectBufferATI)(GLsizei size, const GLvoid* pointer, GLenum usage);
	void (*Normal3b)(GLbyte nx, GLbyte ny, GLbyte nz);
	void (*Normal3bv)(const GLbyte* v);
	void (*Normal3d)(GLdouble nx, GLdouble ny, GLdouble nz);
	void (*Normal3dv)(const GLdouble* v);
	void (*Normal3f)(GLfloat nx, GLfloat ny, GLfloat nz);
	void (*Normal3fVertex3fSUN)(GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
	void (*Normal3fVertex3fvSUN)(const GLfloat* n, const GLfloat* v);
	void (*Normal3fv)(const GLfloat* v);
	void (*Normal3hNV)(GLhalfNV nx, GLhalfNV ny, GLhalfNV nz);
	void (*Normal3hvNV)(const GLhalfNV* v);
	void (*Normal3i)(GLint nx, GLint ny, GLint nz);
	void (*Normal3iv)(const GLint* v);
	void (*Normal3s)(GLshort nx, GLshort ny, GLshort nz);
	void (*Normal3sv)(const GLshort* v);
	void (*NormalFormatNV)(GLenum type, GLsizei stride);
	void (*NormalP3ui)(GLenum type, GLuint coords);
	void (*NormalP3uiv)(GLenum type, const GLuint* coords);
	void (*NormalPointer)(GLenum type, GLsizei stride, const GLvoid* pointer);
	void (*NormalPointerEXT)(GLenum type, GLsizei stride, GLsizei count, const GLvoid* pointer);
	void (*NormalPointerListIBM)(GLenum type, GLint stride, const GLvoid** pointer, GLint ptrstride);
	void (*NormalPointervINTEL)(GLenum type, const GLvoid** pointer);
	void (*NormalStream3bATI)(GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz);
	void (*NormalStream3bvATI)(GLenum stream, const GLbyte* coords);
	void (*NormalStream3dATI)(GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz);
	void (*NormalStream3dvATI)(GLenum stream, const GLdouble* coords);
	void (*NormalStream3fATI)(GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz);
	void (*NormalStream3fvATI)(GLenum stream, const GLfloat* coords);
	void (*NormalStream3iATI)(GLenum stream, GLint nx, GLint ny, GLint nz);
	void (*NormalStream3ivATI)(GLenum stream, const GLint* coords);
	void (*NormalStream3sATI)(GLenum stream, GLshort nx, GLshort ny, GLshort nz);
	void (*NormalStream3svATI)(GLenum stream, const GLshort* coords);
	GLenum (*ObjectPurgeableAPPLE)(GLenum objectType, GLuint name, GLenum option);
	GLenum (*ObjectUnpurgeableAPPLE)(GLenum objectType, GLuint name, GLenum option);
	void (*Ortho)(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
	void (*PNTrianglesfATI)(GLenum pname, GLfloat param);
	void (*PNTrianglesiATI)(GLenum pname, GLint param);
	void (*PassTexCoordATI)(GLuint dst, GLuint coord, GLenum swizzle);
	void (*PassThrough)(GLfloat token);
	void (*PatchParameterfv)(GLenum pname, const GLfloat* values);
	void (*PatchParameteri)(GLenum pname, GLint value);
	void (*PauseTransformFeedback)();
	void (*PauseTransformFeedbackNV)();
	void (*PixelDataRangeNV)(GLenum target, GLsizei length, GLvoid* pointer);
	void (*PixelMapfv)(GLenum map, GLint mapsize, const GLfloat* values);
	void (*PixelMapuiv)(GLenum map, GLint mapsize, const GLuint* values);
	void (*PixelMapusv)(GLenum map, GLint mapsize, const GLushort* values);
	void (*PixelStoref)(GLenum pname, GLfloat param);
	void (*PixelStorei)(GLenum pname, GLint param);
	void (*PixelTexGenParameterfSGIS)(GLenum pname, GLfloat param);
	void (*PixelTexGenParameterfvSGIS)(GLenum pname, const GLfloat* params);
	void (*PixelTexGenParameteriSGIS)(GLenum pname, GLint param);
	void (*PixelTexGenParameterivSGIS)(GLenum pname, const GLint* params);
	void (*PixelTexGenSGIX)(GLenum mode);
	void (*PixelTransferf)(GLenum pname, GLfloat param);
	void (*PixelTransferi)(GLenum pname, GLint param);
	void (*PixelTransformParameterfEXT)(GLenum target, GLenum pname, GLfloat param);
	void (*PixelTransformParameterfvEXT)(GLenum target, GLenum pname, const GLfloat* params);
	void (*PixelTransformParameteriEXT)(GLenum target, GLenum pname, GLint param);
	void (*PixelTransformParameterivEXT)(GLenum target, GLenum pname, const GLint* params);
	void (*PixelZoom)(GLfloat xfactor, GLfloat yfactor);
	void (*PointParameterf)(GLenum pname, GLfloat param);
	void (*PointParameterfARB)(GLenum pname, GLfloat param);
	void (*PointParameterfEXT)(GLenum pname, GLfloat param);
	void (*PointParameterfSGIS)(GLenum pname, GLfloat param);
	void (*PointParameterfv)(GLenum pname, const GLfloat* params);
	void (*PointParameterfvARB)(GLenum pname, const GLfloat* params);
	void (*PointParameterfvEXT)(GLenum pname, const GLfloat* params);
	void (*PointParameterfvSGIS)(GLenum pname, const GLfloat* params);
	void (*PointParameteri)(GLenum pname, GLint param);
	void (*PointParameteriNV)(GLenum pname, GLint param);
	void (*PointParameteriv)(GLenum pname, const GLint* params);
	void (*PointParameterivNV)(GLenum pname, const GLint* params);
	void (*PointSize)(GLfloat size);
	GLint (*PollAsyncSGIX)(GLuint* markerp);
	GLint (*PollInstrumentsSGIX)(GLint* marker_p);
	void (*PolygonMode)(GLenum face, GLenum mode);
	void (*PolygonOffset)(GLfloat factor, GLfloat units);
	void (*PolygonOffsetEXT)(GLfloat factor, GLfloat bias);
	void (*PolygonStipple)(const GLubyte* mask);
	void (*PopAttrib)();
	void (*PopClientAttrib)();
	void (*PopMatrix)();
	void (*PopName)();
	void (*PresentFrameDualFillNV)(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3);
	void (*PresentFrameKeyedNV)(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1);
	void (*PrimitiveRestartIndex)(GLuint index);
	void (*PrimitiveRestartIndexNV)(GLuint index);
	void (*PrimitiveRestartNV)();
	void (*PrioritizeTextures)(GLsizei n, const GLuint* textures, const GLclampf* priorities);
	void (*PrioritizeTexturesEXT)(GLsizei n, const GLuint* textures, const GLclampf* priorities);
	void (*ProgramBufferParametersIivNV)(GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLint* params);
	void (*ProgramBufferParametersIuivNV)(GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLuint* params);
	void (*ProgramBufferParametersfvNV)(GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLfloat* params);
	void (*ProgramEnvParameter4dARB)(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	void (*ProgramEnvParameter4dvARB)(GLenum target, GLuint index, const GLdouble* params);
	void (*ProgramEnvParameter4fARB)(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
	void (*ProgramEnvParameter4fvARB)(GLenum target, GLuint index, const GLfloat* params);
	void (*ProgramEnvParameterI4iNV)(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
	void (*ProgramEnvParameterI4ivNV)(GLenum target, GLuint index, const GLint* params);
	void (*ProgramEnvParameterI4uiNV)(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
	void (*ProgramEnvParameterI4uivNV)(GLenum target, GLuint index, const GLuint* params);
	void (*ProgramEnvParameters4fvEXT)(GLenum target, GLuint index, GLsizei count, const GLfloat* params);
	void (*ProgramEnvParametersI4ivNV)(GLenum target, GLuint index, GLsizei count, const GLint* params);
	void (*ProgramEnvParametersI4uivNV)(GLenum target, GLuint index, GLsizei count, const GLuint* params);
	void (*ProgramLocalParameter4dARB)(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	void (*ProgramLocalParameter4dvARB)(GLenum target, GLuint index, const GLdouble* params);
	void (*ProgramLocalParameter4fARB)(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
	void (*ProgramLocalParameter4fvARB)(GLenum target, GLuint index, const GLfloat* params);
	void (*ProgramLocalParameterI4iNV)(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
	void (*ProgramLocalParameterI4ivNV)(GLenum target, GLuint index, const GLint* params);
	void (*ProgramLocalParameterI4uiNV)(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
	void (*ProgramLocalParameterI4uivNV)(GLenum target, GLuint index, const GLuint* params);
	void (*ProgramLocalParameters4fvEXT)(GLenum target, GLuint index, GLsizei count, const GLfloat* params);
	void (*ProgramLocalParametersI4ivNV)(GLenum target, GLuint index, GLsizei count, const GLint* params);
	void (*ProgramLocalParametersI4uivNV)(GLenum target, GLuint index, GLsizei count, const GLuint* params);
	void (*ProgramNamedParameter4dNV)(GLuint id, GLsizei len, const GLubyte* name, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	void (*ProgramNamedParameter4dvNV)(GLuint id, GLsizei len, const GLubyte* name, const GLdouble* v);
	void (*ProgramNamedParameter4fNV)(GLuint id, GLsizei len, const GLubyte* name, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
	void (*ProgramNamedParameter4fvNV)(GLuint id, GLsizei len, const GLubyte* name, const GLfloat* v);
	void (*ProgramParameter4dNV)(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	void (*ProgramParameter4dvNV)(GLenum target, GLuint index, const GLdouble* v);
	void (*ProgramParameter4fNV)(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
	void (*ProgramParameter4fvNV)(GLenum target, GLuint index, const GLfloat* v);
	void (*ProgramParameteri)(GLuint program, GLenum pname, GLint value);
	void (*ProgramParameteriARB)(GLuint program, GLenum pname, GLint value);
	void (*ProgramParameteriEXT)(GLuint program, GLenum pname, GLint value);
	void (*ProgramParameters4dvNV)(GLenum target, GLuint index, GLuint count, const GLdouble* v);
	void (*ProgramParameters4fvNV)(GLenum target, GLuint index, GLuint count, const GLfloat* v);
	void (*ProgramStringARB)(GLenum target, GLenum format, GLsizei len, const GLvoid* string);
	void (*ProgramUniform1dEXT)(GLuint program, GLint location, GLdouble x);
	void (*ProgramUniform1dvEXT)(GLuint program, GLint location, GLsizei count, const GLdouble* value);
	void (*ProgramUniform1fEXT)(GLuint program, GLint location, GLfloat v0);
	void (*ProgramUniform1fvEXT)(GLuint program, GLint location, GLsizei count, const GLfloat* value);
	void (*ProgramUniform1iEXT)(GLuint program, GLint location, GLint v0);
	void (*ProgramUniform1ivEXT)(GLuint program, GLint location, GLsizei count, const GLint* value);
	void (*ProgramUniform1uiEXT)(GLuint program, GLint location, GLuint v0);
	void (*ProgramUniform1uivEXT)(GLuint program, GLint location, GLsizei count, const GLuint* value);
	void (*ProgramUniform2dEXT)(GLuint program, GLint location, GLdouble x, GLdouble y);
	void (*ProgramUniform2dvEXT)(GLuint program, GLint location, GLsizei count, const GLdouble* value);
	void (*ProgramUniform2fEXT)(GLuint program, GLint location, GLfloat v0, GLfloat v1);
	void (*ProgramUniform2fvEXT)(GLuint program, GLint location, GLsizei count, const GLfloat* value);
	void (*ProgramUniform2iEXT)(GLuint program, GLint location, GLint v0, GLint v1);
	void (*ProgramUniform2ivEXT)(GLuint program, GLint location, GLsizei count, const GLint* value);
	void (*ProgramUniform2uiEXT)(GLuint program, GLint location, GLuint v0, GLuint v1);
	void (*ProgramUniform2uivEXT)(GLuint program, GLint location, GLsizei count, const GLuint* value);
	void (*ProgramUniform3dEXT)(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z);
	void (*ProgramUniform3dvEXT)(GLuint program, GLint location, GLsizei count, const GLdouble* value);
	void (*ProgramUniform3fEXT)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
	void (*ProgramUniform3fvEXT)(GLuint program, GLint location, GLsizei count, const GLfloat* value);
	void (*ProgramUniform3iEXT)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
	void (*ProgramUniform3ivEXT)(GLuint program, GLint location, GLsizei count, const GLint* value);
	void (*ProgramUniform3uiEXT)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
	void (*ProgramUniform3uivEXT)(GLuint program, GLint location, GLsizei count, const GLuint* value);
	void (*ProgramUniform4dEXT)(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	void (*ProgramUniform4dvEXT)(GLuint program, GLint location, GLsizei count, const GLdouble* value);
	void (*ProgramUniform4fEXT)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
	void (*ProgramUniform4fvEXT)(GLuint program, GLint location, GLsizei count, const GLfloat* value);
	void (*ProgramUniform4iEXT)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
	void (*ProgramUniform4ivEXT)(GLuint program, GLint location, GLsizei count, const GLint* value);
	void (*ProgramUniform4uiEXT)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
	void (*ProgramUniform4uivEXT)(GLuint program, GLint location, GLsizei count, const GLuint* value);
	void (*ProgramUniformMatrix2dvEXT)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
	void (*ProgramUniformMatrix2fvEXT)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
	void (*ProgramUniformMatrix2x3dvEXT)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
	void (*ProgramUniformMatrix2x3fvEXT)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
	void (*ProgramUniformMatrix2x4dvEXT)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
	void (*ProgramUniformMatrix2x4fvEXT)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
	void (*ProgramUniformMatrix3dvEXT)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
	void (*ProgramUniformMatrix3fvEXT)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
	void (*ProgramUniformMatrix3x2dvEXT)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
	void (*ProgramUniformMatrix3x2fvEXT)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
	void (*ProgramUniformMatrix3x4dvEXT)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
	void (*ProgramUniformMatrix3x4fvEXT)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
	void (*ProgramUniformMatrix4dvEXT)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
	void (*ProgramUniformMatrix4fvEXT)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
	void (*ProgramUniformMatrix4x2dvEXT)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
	void (*ProgramUniformMatrix4x2fvEXT)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
	void (*ProgramUniformMatrix4x3dvEXT)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
	void (*ProgramUniformMatrix4x3fvEXT)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
	void (*ProgramUniformui64NV)(GLuint program, GLint location, GLuint64EXT value);
	void (*ProgramUniformui64vNV)(GLuint program, GLint location, GLsizei count, const GLuint64EXT* value);
	void (*ProgramVertexLimitNV)(GLenum target, GLint limit);
	void (*ProvokingVertex)(GLenum mode);
	void (*ProvokingVertexEXT)(GLenum mode);
	void (*PushAttrib)(GLbitfield mask);
	void (*PushClientAttrib)(GLbitfield mask);
	void (*PushClientAttribDefaultEXT)(GLbitfield mask);
	void (*PushMatrix)();
	void (*PushName)(GLuint name);
	void (*QueryCounter)(GLuint id, GLenum target);
	void (*RasterPos2d)(GLdouble x, GLdouble y);
	void (*RasterPos2dv)(const GLdouble* v);
	void (*RasterPos2f)(GLfloat x, GLfloat y);
	void (*RasterPos2fv)(const GLfloat* v);
	void (*RasterPos2i)(GLint x, GLint y);
	void (*RasterPos2iv)(const GLint* v);
	void (*RasterPos2s)(GLshort x, GLshort y);
	void (*RasterPos2sv)(const GLshort* v);
	void (*RasterPos3d)(GLdouble x, GLdouble y, GLdouble z);
	void (*RasterPos3dv)(const GLdouble* v);
	void (*RasterPos3f)(GLfloat x, GLfloat y, GLfloat z);
	void (*RasterPos3fv)(const GLfloat* v);
	void (*RasterPos3i)(GLint x, GLint y, GLint z);
	void (*RasterPos3iv)(const GLint* v);
	void (*RasterPos3s)(GLshort x, GLshort y, GLshort z);
	void (*RasterPos3sv)(const GLshort* v);
	void (*RasterPos4d)(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	void (*RasterPos4dv)(const GLdouble* v);
	void (*RasterPos4f)(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
	void (*RasterPos4fv)(const GLfloat* v);
	void (*RasterPos4i)(GLint x, GLint y, GLint z, GLint w);
	void (*RasterPos4iv)(const GLint* v);
	void (*RasterPos4s)(GLshort x, GLshort y, GLshort z, GLshort w);
	void (*RasterPos4sv)(const GLshort* v);
	void (*ReadBuffer)(GLenum mode);
	void (*ReadInstrumentsSGIX)(GLint marker);
	void (*ReadPixels)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid* pixels);
	void (*Rectd)(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);
	void (*Rectdv)(const GLdouble* v1, const GLdouble* v2);
	void (*Rectf)(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);
	void (*Rectfv)(const GLfloat* v1, const GLfloat* v2);
	void (*Recti)(GLint x1, GLint y1, GLint x2, GLint y2);
	void (*Rectiv)(const GLint* v1, const GLint* v2);
	void (*Rects)(GLshort x1, GLshort y1, GLshort x2, GLshort y2);
	void (*Rectsv)(const GLshort* v1, const GLshort* v2);
	void (*ReferencePlaneSGIX)(const GLdouble* equation);
	GLint (*RenderMode)(GLenum mode);
	void (*RenderbufferStorage)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
	void (*RenderbufferStorageEXT)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
	void (*RenderbufferStorageMultisample)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
	void (*RenderbufferStorageMultisampleCoverageNV)(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
	void (*RenderbufferStorageMultisampleEXT)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
	void (*ReplacementCodePointerSUN)(GLenum type, GLsizei stride, const GLvoid** pointer);
	void (*ReplacementCodeubSUN)(GLubyte code);
	void (*ReplacementCodeubvSUN)(const GLubyte* code);
	void (*ReplacementCodeuiColor3fVertex3fSUN)(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
	void (*ReplacementCodeuiColor3fVertex3fvSUN)(const GLuint* rc, const GLfloat* c, const GLfloat* v);
	void (*ReplacementCodeuiColor4fNormal3fVertex3fSUN)(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
	void (*ReplacementCodeuiColor4fNormal3fVertex3fvSUN)(const GLuint* rc, const GLfloat* c, const GLfloat* n, const GLfloat* v);
	void (*ReplacementCodeuiColor4ubVertex3fSUN)(GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
	void (*ReplacementCodeuiColor4ubVertex3fvSUN)(const GLuint* rc, const GLubyte* c, const GLfloat* v);
	void (*ReplacementCodeuiNormal3fVertex3fSUN)(GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
	void (*ReplacementCodeuiNormal3fVertex3fvSUN)(const GLuint* rc, const GLfloat* n, const GLfloat* v);
	void (*ReplacementCodeuiSUN)(GLuint code);
	void (*ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN)(GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
	void (*ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN)(const GLuint* rc, const GLfloat* tc, const GLfloat* c, const GLfloat* n, const GLfloat* v);
	void (*ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN)(GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
	void (*ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN)(const GLuint* rc, const GLfloat* tc, const GLfloat* n, const GLfloat* v);
	void (*ReplacementCodeuiTexCoord2fVertex3fSUN)(GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
	void (*ReplacementCodeuiTexCoord2fVertex3fvSUN)(const GLuint* rc, const GLfloat* tc, const GLfloat* v);
	void (*ReplacementCodeuiVertex3fSUN)(GLuint rc, GLfloat x, GLfloat y, GLfloat z);
	void (*ReplacementCodeuiVertex3fvSUN)(const GLuint* rc, const GLfloat* v);
	void (*ReplacementCodeuivSUN)(const GLuint* code);
	void (*ReplacementCodeusSUN)(GLushort code);
	void (*ReplacementCodeusvSUN)(const GLushort* code);
	void (*RequestResidentProgramsNV)(GLsizei n, const GLuint* programs);
	void (*ResetHistogram)(GLenum target);
	void (*ResetHistogramEXT)(GLenum target);
	void (*ResetMinmax)(GLenum target);
	void (*ResetMinmaxEXT)(GLenum target);
	void (*ResizeBuffersMESA)();
	void (*ResumeTransformFeedback)();
	void (*ResumeTransformFeedbackNV)();
	void (*Rotated)(GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
	void (*Rotatef)(GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
	void (*SampleCoverage)(GLclampf value, GLboolean invert);
	void (*SampleCoverageARB)(GLclampf value, GLboolean invert);
	void (*SampleMapATI)(GLuint dst, GLuint interp, GLenum swizzle);
	void (*SampleMaskEXT)(GLclampf value, GLboolean invert);
	void (*SampleMaskIndexedNV)(GLuint index, GLbitfield mask);
	void (*SampleMaskSGIS)(GLclampf value, GLboolean invert);
	void (*SampleMaski)(GLuint index, GLbitfield mask);
	void (*SamplePatternEXT)(GLenum pattern);
	void (*SamplePatternSGIS)(GLenum pattern);
	void (*SamplerParameterIiv)(GLuint sampler, GLenum pname, const GLint* param);
	void (*SamplerParameterIuiv)(GLuint sampler, GLenum pname, const GLuint* param);
	void (*SamplerParameterf)(GLuint sampler, GLenum pname, GLfloat param);
	void (*SamplerParameterfv)(GLuint sampler, GLenum pname, const GLfloat* param);
	void (*SamplerParameteri)(GLuint sampler, GLenum pname, GLint param);
	void (*SamplerParameteriv)(GLuint sampler, GLenum pname, const GLint* param);
	void (*Scaled)(GLdouble x, GLdouble y, GLdouble z);
	void (*Scalef)(GLfloat x, GLfloat y, GLfloat z);
	void (*Scissor)(GLint x, GLint y, GLsizei width, GLsizei height);
	void (*SecondaryColor3b)(GLbyte red, GLbyte green, GLbyte blue);
	void (*SecondaryColor3bEXT)(GLbyte red, GLbyte green, GLbyte blue);
	void (*SecondaryColor3bv)(const GLbyte* v);
	void (*SecondaryColor3bvEXT)(const GLbyte* v);
	void (*SecondaryColor3d)(GLdouble red, GLdouble green, GLdouble blue);
	void (*SecondaryColor3dEXT)(GLdouble red, GLdouble green, GLdouble blue);
	void (*SecondaryColor3dv)(const GLdouble* v);
	void (*SecondaryColor3dvEXT)(const GLdouble* v);
	void (*SecondaryColor3f)(GLfloat red, GLfloat green, GLfloat blue);
	void (*SecondaryColor3fEXT)(GLfloat red, GLfloat green, GLfloat blue);
	void (*SecondaryColor3fv)(const GLfloat* v);
	void (*SecondaryColor3fvEXT)(const GLfloat* v);
	void (*SecondaryColor3hNV)(GLhalfNV red, GLhalfNV green, GLhalfNV blue);
	void (*SecondaryColor3hvNV)(const GLhalfNV* v);
	void (*SecondaryColor3i)(GLint red, GLint green, GLint blue);
	void (*SecondaryColor3iEXT)(GLint red, GLint green, GLint blue);
	void (*SecondaryColor3iv)(const GLint* v);
	void (*SecondaryColor3ivEXT)(const GLint* v);
	void (*SecondaryColor3s)(GLshort red, GLshort green, GLshort blue);
	void (*SecondaryColor3sEXT)(GLshort red, GLshort green, GLshort blue);
	void (*SecondaryColor3sv)(const GLshort* v);
	void (*SecondaryColor3svEXT)(const GLshort* v);
	void (*SecondaryColor3ub)(GLubyte red, GLubyte green, GLubyte blue);
	void (*SecondaryColor3ubEXT)(GLubyte red, GLubyte green, GLubyte blue);
	void (*SecondaryColor3ubv)(const GLubyte* v);
	void (*SecondaryColor3ubvEXT)(const GLubyte* v);
	void (*SecondaryColor3ui)(GLuint red, GLuint green, GLuint blue);
	void (*SecondaryColor3uiEXT)(GLuint red, GLuint green, GLuint blue);
	void (*SecondaryColor3uiv)(const GLuint* v);
	void (*SecondaryColor3uivEXT)(const GLuint* v);
	void (*SecondaryColor3us)(GLushort red, GLushort green, GLushort blue);
	void (*SecondaryColor3usEXT)(GLushort red, GLushort green, GLushort blue);
	void (*SecondaryColor3usv)(const GLushort* v);
	void (*SecondaryColor3usvEXT)(const GLushort* v);
	void (*SecondaryColorFormatNV)(GLint size, GLenum type, GLsizei stride);
	void (*SecondaryColorP3ui)(GLenum type, GLuint color);
	void (*SecondaryColorP3uiv)(GLenum type, const GLuint* color);
	void (*SecondaryColorPointer)(GLint size, GLenum type, GLsizei stride, const GLvoid* pointer);
	void (*SecondaryColorPointerEXT)(GLint size, GLenum type, GLsizei stride, const GLvoid* pointer);
	void (*SecondaryColorPointerListIBM)(GLint size, GLenum type, GLint stride, const GLvoid** pointer, GLint ptrstride);
	void (*SelectBuffer)(GLsizei size, GLuint* buffer);
	void (*SelectPerfMonitorCountersAMD)(GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint* counterList);
	void (*SeparableFilter2D)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* row, const GLvoid* column);
	void (*SeparableFilter2DEXT)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* row, const GLvoid* column);
	void (*SetFenceAPPLE)(GLuint fence);
	void (*SetFenceNV)(GLuint fence, GLenum condition);
	void (*SetFragmentShaderConstantATI)(GLuint dst, const GLfloat* value);
	void (*SetInvariantEXT)(GLuint id, GLenum type, const GLvoid* addr);
	void (*SetLocalConstantEXT)(GLuint id, GLenum type, const GLvoid* addr);
	void (*ShadeModel)(GLenum mode);
	void (*ShaderOp1EXT)(GLenum op, GLuint res, GLuint arg1);
	void (*ShaderOp2EXT)(GLenum op, GLuint res, GLuint arg1, GLuint arg2);
	void (*ShaderOp3EXT)(GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3);
	void (*ShaderSource)(GLuint shader, GLsizei count, const GLchar** string, const GLint* length);
	void (*ShaderSourceARB)(GLhandleARB shaderObj, GLsizei count, const GLcharARB** string, const GLint* length);
	void (*SharpenTexFuncSGIS)(GLenum target, GLsizei n, const GLfloat* points);
	void (*SpriteParameterfSGIX)(GLenum pname, GLfloat param);
	void (*SpriteParameterfvSGIX)(GLenum pname, const GLfloat* params);
	void (*SpriteParameteriSGIX)(GLenum pname, GLint param);
	void (*SpriteParameterivSGIX)(GLenum pname, const GLint* params);
	void (*StartInstrumentsSGIX)();
	void (*StencilClearTagEXT)(GLsizei stencilTagBits, GLuint stencilClearTag);
	void (*StencilFunc)(GLenum func, GLint ref, GLuint mask);
	void (*StencilFuncSeparate)(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask);
	void (*StencilFuncSeparateATI)(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask);
	void (*StencilMask)(GLuint mask);
	void (*StencilMaskSeparate)(GLenum face, GLuint mask);
	void (*StencilOp)(GLenum fail, GLenum zfail, GLenum zpass);
	void (*StencilOpSeparate)(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
	void (*StencilOpSeparateATI)(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
	void (*StopInstrumentsSGIX)(GLint marker);
	void (*StringMarkerGREMEDY)(GLsizei len, const GLvoid* string);
	void (*SwizzleEXT)(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
	void (*TagSampleBufferSGIX)();
	void (*Tangent3bEXT)(GLbyte tx, GLbyte ty, GLbyte tz);
	void (*Tangent3bvEXT)(const GLbyte* v);
	void (*Tangent3dEXT)(GLdouble tx, GLdouble ty, GLdouble tz);
	void (*Tangent3dvEXT)(const GLdouble* v);
	void (*Tangent3fEXT)(GLfloat tx, GLfloat ty, GLfloat tz);
	void (*Tangent3fvEXT)(const GLfloat* v);
	void (*Tangent3iEXT)(GLint tx, GLint ty, GLint tz);
	void (*Tangent3ivEXT)(const GLint* v);
	void (*Tangent3sEXT)(GLshort tx, GLshort ty, GLshort tz);
	void (*Tangent3svEXT)(const GLshort* v);
	void (*TangentPointerEXT)(GLenum type, GLsizei stride, const GLvoid* pointer);
	void (*TbufferMask3DFX)(GLuint mask);
	void (*TessellationFactorAMD)(GLfloat factor);
	void (*TessellationModeAMD)(GLenum mode);
	GLboolean (*TestFenceAPPLE)(GLuint fence);
	GLboolean (*TestFenceNV)(GLuint fence);
	GLboolean (*TestObjectAPPLE)(GLenum object, GLuint name);
	void (*TexBuffer)(GLenum target, GLenum internalformat, GLuint buffer);
	void (*TexBufferARB)(GLenum target, GLenum internalformat, GLuint buffer);
	void (*TexBufferEXT)(GLenum target, GLenum internalformat, GLuint buffer);
	void (*TexBumpParameterfvATI)(GLenum pname, const GLfloat* param);
	void (*TexBumpParameterivATI)(GLenum pname, const GLint* param);
	void (*TexCoord1d)(GLdouble s);
	void (*TexCoord1dv)(const GLdouble* v);
	void (*TexCoord1f)(GLfloat s);
	void (*TexCoord1fv)(const GLfloat* v);
	void (*TexCoord1hNV)(GLhalfNV s);
	void (*TexCoord1hvNV)(const GLhalfNV* v);
	void (*TexCoord1i)(GLint s);
	void (*TexCoord1iv)(const GLint* v);
	void (*TexCoord1s)(GLshort s);
	void (*TexCoord1sv)(const GLshort* v);
	void (*TexCoord2d)(GLdouble s, GLdouble t);
	void (*TexCoord2dv)(const GLdouble* v);
	void (*TexCoord2f)(GLfloat s, GLfloat t);
	void (*TexCoord2fColor3fVertex3fSUN)(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
	void (*TexCoord2fColor3fVertex3fvSUN)(const GLfloat* tc, const GLfloat* c, const GLfloat* v);
	void (*TexCoord2fColor4fNormal3fVertex3fSUN)(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
	void (*TexCoord2fColor4fNormal3fVertex3fvSUN)(const GLfloat* tc, const GLfloat* c, const GLfloat* n, const GLfloat* v);
	void (*TexCoord2fColor4ubVertex3fSUN)(GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
	void (*TexCoord2fColor4ubVertex3fvSUN)(const GLfloat* tc, const GLubyte* c, const GLfloat* v);
	void (*TexCoord2fNormal3fVertex3fSUN)(GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
	void (*TexCoord2fNormal3fVertex3fvSUN)(const GLfloat* tc, const GLfloat* n, const GLfloat* v);
	void (*TexCoord2fVertex3fSUN)(GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
	void (*TexCoord2fVertex3fvSUN)(const GLfloat* tc, const GLfloat* v);
	void (*TexCoord2fv)(const GLfloat* v);
	void (*TexCoord2hNV)(GLhalfNV s, GLhalfNV t);
	void (*TexCoord2hvNV)(const GLhalfNV* v);
	void (*TexCoord2i)(GLint s, GLint t);
	void (*TexCoord2iv)(const GLint* v);
	void (*TexCoord2s)(GLshort s, GLshort t);
	void (*TexCoord2sv)(const GLshort* v);
	void (*TexCoord3d)(GLdouble s, GLdouble t, GLdouble r);
	void (*TexCoord3dv)(const GLdouble* v);
	void (*TexCoord3f)(GLfloat s, GLfloat t, GLfloat r);
	void (*TexCoord3fv)(const GLfloat* v);
	void (*TexCoord3hNV)(GLhalfNV s, GLhalfNV t, GLhalfNV r);
	void (*TexCoord3hvNV)(const GLhalfNV* v);
	void (*TexCoord3i)(GLint s, GLint t, GLint r);
	void (*TexCoord3iv)(const GLint* v);
	void (*TexCoord3s)(GLshort s, GLshort t, GLshort r);
	void (*TexCoord3sv)(const GLshort* v);
	void (*TexCoord4d)(GLdouble s, GLdouble t, GLdouble r, GLdouble q);
	void (*TexCoord4dv)(const GLdouble* v);
	void (*TexCoord4f)(GLfloat s, GLfloat t, GLfloat r, GLfloat q);
	void (*TexCoord4fColor4fNormal3fVertex4fSUN)(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
	void (*TexCoord4fColor4fNormal3fVertex4fvSUN)(const GLfloat* tc, const GLfloat* c, const GLfloat* n, const GLfloat* v);
	void (*TexCoord4fVertex4fSUN)(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
	void (*TexCoord4fVertex4fvSUN)(const GLfloat* tc, const GLfloat* v);
	void (*TexCoord4fv)(const GLfloat* v);
	void (*TexCoord4hNV)(GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);
	void (*TexCoord4hvNV)(const GLhalfNV* v);
	void (*TexCoord4i)(GLint s, GLint t, GLint r, GLint q);
	void (*TexCoord4iv)(const GLint* v);
	void (*TexCoord4s)(GLshort s, GLshort t, GLshort r, GLshort q);
	void (*TexCoord4sv)(const GLshort* v);
	void (*TexCoordFormatNV)(GLint size, GLenum type, GLsizei stride);
	void (*TexCoordP1ui)(GLenum type, GLuint coords);
	void (*TexCoordP1uiv)(GLenum type, const GLuint* coords);
	void (*TexCoordP2ui)(GLenum type, GLuint coords);
	void (*TexCoordP2uiv)(GLenum type, const GLuint* coords);
	void (*TexCoordP3ui)(GLenum type, GLuint coords);
	void (*TexCoordP3uiv)(GLenum type, const GLuint* coords);
	void (*TexCoordP4ui)(GLenum type, GLuint coords);
	void (*TexCoordP4uiv)(GLenum type, const GLuint* coords);
	void (*TexCoordPointer)(GLint size, GLenum type, GLsizei stride, const GLvoid* pointer);
	void (*TexCoordPointerEXT)(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid* pointer);
	void (*TexCoordPointerListIBM)(GLint size, GLenum type, GLint stride, const GLvoid** pointer, GLint ptrstride);
	void (*TexCoordPointervINTEL)(GLint size, GLenum type, const GLvoid** pointer);
	void (*TexEnvf)(GLenum target, GLenum pname, GLfloat param);
	void (*TexEnvfv)(GLenum target, GLenum pname, const GLfloat* params);
	void (*TexEnvi)(GLenum target, GLenum pname, GLint param);
	void (*TexEnviv)(GLenum target, GLenum pname, const GLint* params);
	void (*TexFilterFuncSGIS)(GLenum target, GLenum filter, GLsizei n, const GLfloat* weights);
	void (*TexGend)(GLenum coord, GLenum pname, GLdouble param);
	void (*TexGendv)(GLenum coord, GLenum pname, const GLdouble* params);
	void (*TexGenf)(GLenum coord, GLenum pname, GLfloat param);
	void (*TexGenfv)(GLenum coord, GLenum pname, const GLfloat* params);
	void (*TexGeni)(GLenum coord, GLenum pname, GLint param);
	void (*TexGeniv)(GLenum coord, GLenum pname, const GLint* params);
	void (*TexImage1D)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid* pixels);
	void (*TexImage2D)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid* pixels);
	void (*TexImage2DMultisample)(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
	void (*TexImage3D)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid* pixels);
	void (*TexImage3DEXT)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid* pixels);
	void (*TexImage3DMultisample)(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
	void (*TexImage4DSGIS)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const GLvoid* pixels);
	void (*TexParameterIiv)(GLenum target, GLenum pname, const GLint* params);
	void (*TexParameterIivEXT)(GLenum target, GLenum pname, const GLint* params);
	void (*TexParameterIuiv)(GLenum target, GLenum pname, const GLuint* params);
	void (*TexParameterIuivEXT)(GLenum target, GLenum pname, const GLuint* params);
	void (*TexParameterf)(GLenum target, GLenum pname, GLfloat param);
	void (*TexParameterfv)(GLenum target, GLenum pname, const GLfloat* params);
	void (*TexParameteri)(GLenum target, GLenum pname, GLint param);
	void (*TexParameteriv)(GLenum target, GLenum pname, const GLint* params);
	void (*TexRenderbufferNV)(GLenum target, GLuint renderbuffer);
	void (*TexSubImage1D)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid* pixels);
	void (*TexSubImage1DEXT)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid* pixels);
	void (*TexSubImage2D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* pixels);
	void (*TexSubImage2DEXT)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* pixels);
	void (*TexSubImage3D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid* pixels);
	void (*TexSubImage3DEXT)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid* pixels);
	void (*TexSubImage4DSGIS)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const GLvoid* pixels);
	void (*TextureBarrierNV)();
	void (*TextureBufferEXT)(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer);
	void (*TextureColorMaskSGIS)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
	void (*TextureImage1DEXT)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid* pixels);
	void (*TextureImage2DEXT)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid* pixels);
	void (*TextureImage3DEXT)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid* pixels);
	void (*TextureLightEXT)(GLenum pname);
	void (*TextureMaterialEXT)(GLenum face, GLenum mode);
	void (*TextureNormalEXT)(GLenum mode);
	void (*TextureParameterIivEXT)(GLuint texture, GLenum target, GLenum pname, const GLint* params);
	void (*TextureParameterIuivEXT)(GLuint texture, GLenum target, GLenum pname, const GLuint* params);
	void (*TextureParameterfEXT)(GLuint texture, GLenum target, GLenum pname, GLfloat param);
	void (*TextureParameterfvEXT)(GLuint texture, GLenum target, GLenum pname, const GLfloat* params);
	void (*TextureParameteriEXT)(GLuint texture, GLenum target, GLenum pname, GLint param);
	void (*TextureParameterivEXT)(GLuint texture, GLenum target, GLenum pname, const GLint* params);
	void (*TextureRangeAPPLE)(GLenum target, GLsizei length, const GLvoid* pointer);
	void (*TextureRenderbufferEXT)(GLuint texture, GLenum target, GLuint renderbuffer);
	void (*TextureSubImage1DEXT)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid* pixels);
	void (*TextureSubImage2DEXT)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* pixels);
	void (*TextureSubImage3DEXT)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid* pixels);
	void (*TrackMatrixNV)(GLenum target, GLuint address, GLenum matrix, GLenum transform);
	void (*TransformFeedbackAttribsNV)(GLuint count, const GLint* attribs, GLenum bufferMode);
	void (*TransformFeedbackVaryings)(GLuint program, GLsizei count, const GLchar** varyings, GLenum bufferMode);
	void (*TransformFeedbackVaryingsEXT)(GLuint program, GLsizei count, const GLchar** varyings, GLenum bufferMode);
	void (*TransformFeedbackVaryingsNV)(GLuint program, GLsizei count, const GLchar** varyings, GLenum bufferMode);
	void (*Translated)(GLdouble x, GLdouble y, GLdouble z);
	void (*Translatef)(GLfloat x, GLfloat y, GLfloat z);
	void (*Uniform1d)(GLint location, GLdouble x);
	void (*Uniform1dv)(GLint location, GLsizei count, const GLdouble* value);
	void (*Uniform1f)(GLint location, GLfloat v0);
	void (*Uniform1fARB)(GLint location, GLfloat v0);
	void (*Uniform1fv)(GLint location, GLsizei count, const GLfloat* value);
	void (*Uniform1fvARB)(GLint location, GLsizei count, const GLfloat* value);
	void (*Uniform1i)(GLint location, GLint v0);
	void (*Uniform1iARB)(GLint location, GLint v0);
	void (*Uniform1iv)(GLint location, GLsizei count, const GLint* value);
	void (*Uniform1ivARB)(GLint location, GLsizei count, const GLint* value);
	void (*Uniform1ui)(GLint location, GLuint v0);
	void (*Uniform1uiEXT)(GLint location, GLuint v0);
	void (*Uniform1uiv)(GLint location, GLsizei count, const GLuint* value);
	void (*Uniform1uivEXT)(GLint location, GLsizei count, const GLuint* value);
	void (*Uniform2d)(GLint location, GLdouble x, GLdouble y);
	void (*Uniform2dv)(GLint location, GLsizei count, const GLdouble* value);
	void (*Uniform2f)(GLint location, GLfloat v0, GLfloat v1);
	void (*Uniform2fARB)(GLint location, GLfloat v0, GLfloat v1);
	void (*Uniform2fv)(GLint location, GLsizei count, const GLfloat* value);
	void (*Uniform2fvARB)(GLint location, GLsizei count, const GLfloat* value);
	void (*Uniform2i)(GLint location, GLint v0, GLint v1);
	void (*Uniform2iARB)(GLint location, GLint v0, GLint v1);
	void (*Uniform2iv)(GLint location, GLsizei count, const GLint* value);
	void (*Uniform2ivARB)(GLint location, GLsizei count, const GLint* value);
	void (*Uniform2ui)(GLint location, GLuint v0, GLuint v1);
	void (*Uniform2uiEXT)(GLint location, GLuint v0, GLuint v1);
	void (*Uniform2uiv)(GLint location, GLsizei count, const GLuint* value);
	void (*Uniform2uivEXT)(GLint location, GLsizei count, const GLuint* value);
	void (*Uniform3d)(GLint location, GLdouble x, GLdouble y, GLdouble z);
	void (*Uniform3dv)(GLint location, GLsizei count, const GLdouble* value);
	void (*Uniform3f)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
	void (*Uniform3fARB)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
	void (*Uniform3fv)(GLint location, GLsizei count, const GLfloat* value);
	void (*Uniform3fvARB)(GLint location, GLsizei count, const GLfloat* value);
	void (*Uniform3i)(GLint location, GLint v0, GLint v1, GLint v2);
	void (*Uniform3iARB)(GLint location, GLint v0, GLint v1, GLint v2);
	void (*Uniform3iv)(GLint location, GLsizei count, const GLint* value);
	void (*Uniform3ivARB)(GLint location, GLsizei count, const GLint* value);
	void (*Uniform3ui)(GLint location, GLuint v0, GLuint v1, GLuint v2);
	void (*Uniform3uiEXT)(GLint location, GLuint v0, GLuint v1, GLuint v2);
	void (*Uniform3uiv)(GLint location, GLsizei count, const GLuint* value);
	void (*Uniform3uivEXT)(GLint location, GLsizei count, const GLuint* value);
	void (*Uniform4d)(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	void (*Uniform4dv)(GLint location, GLsizei count, const GLdouble* value);
	void (*Uniform4f)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
	void (*Uniform4fARB)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
	void (*Uniform4fv)(GLint location, GLsizei count, const GLfloat* value);
	void (*Uniform4fvARB)(GLint location, GLsizei count, const GLfloat* value);
	void (*Uniform4i)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
	void (*Uniform4iARB)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
	void (*Uniform4iv)(GLint location, GLsizei count, const GLint* value);
	void (*Uniform4ivARB)(GLint location, GLsizei count, const GLint* value);
	void (*Uniform4ui)(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
	void (*Uniform4uiEXT)(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
	void (*Uniform4uiv)(GLint location, GLsizei count, const GLuint* value);
	void (*Uniform4uivEXT)(GLint location, GLsizei count, const GLuint* value);
	void (*UniformBlockBinding)(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
	void (*UniformBufferEXT)(GLuint program, GLint location, GLuint buffer);
	void (*UniformMatrix2dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
	void (*UniformMatrix2fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
	void (*UniformMatrix2fvARB)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
	void (*UniformMatrix2x3dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
	void (*UniformMatrix2x3fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
	void (*UniformMatrix2x4dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
	void (*UniformMatrix2x4fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
	void (*UniformMatrix3dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
	void (*UniformMatrix3fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
	void (*UniformMatrix3fvARB)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
	void (*UniformMatrix3x2dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
	void (*UniformMatrix3x2fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
	void (*UniformMatrix3x4dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
	void (*UniformMatrix3x4fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
	void (*UniformMatrix4dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
	void (*UniformMatrix4fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
	void (*UniformMatrix4fvARB)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
	void (*UniformMatrix4x2dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
	void (*UniformMatrix4x2fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
	void (*UniformMatrix4x3dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
	void (*UniformMatrix4x3fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
	void (*UniformSubroutinesuiv)(GLenum shadertype, GLsizei count, const GLuint* indices);
	void (*Uniformui64NV)(GLint location, GLuint64EXT value);
	void (*Uniformui64vNV)(GLint location, GLsizei count, const GLuint64EXT* value);
	void (*UnlockArraysEXT)();
	GLboolean (*UnmapBuffer)(GLenum target);
	GLboolean (*UnmapBufferARB)(GLenum target);
	GLboolean (*UnmapNamedBufferEXT)(GLuint buffer);
	void (*UnmapObjectBufferATI)(GLuint buffer);
	void (*UpdateObjectBufferATI)(GLuint buffer, GLuint offset, GLsizei size, const GLvoid* pointer, GLenum preserve);
	void (*UseProgram)(GLuint program);
	void (*UseProgramObjectARB)(GLhandleARB programObj);
	void (*UseShaderProgramEXT)(GLenum type, GLuint program);
	void (*ValidateProgram)(GLuint program);
	void (*ValidateProgramARB)(GLhandleARB programObj);
	void (*VariantArrayObjectATI)(GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
	void (*VariantPointerEXT)(GLuint id, GLenum type, GLuint stride, const GLvoid* addr);
	void (*VariantbvEXT)(GLuint id, const GLbyte* addr);
	void (*VariantdvEXT)(GLuint id, const GLdouble* addr);
	void (*VariantfvEXT)(GLuint id, const GLfloat* addr);
	void (*VariantivEXT)(GLuint id, const GLint* addr);
	void (*VariantsvEXT)(GLuint id, const GLshort* addr);
	void (*VariantubvEXT)(GLuint id, const GLubyte* addr);
	void (*VariantuivEXT)(GLuint id, const GLuint* addr);
	void (*VariantusvEXT)(GLuint id, const GLushort* addr);
	void (*Vertex2d)(GLdouble x, GLdouble y);
	void (*Vertex2dv)(const GLdouble* v);
	void (*Vertex2f)(GLfloat x, GLfloat y);
	void (*Vertex2fv)(const GLfloat* v);
	void (*Vertex2hNV)(GLhalfNV x, GLhalfNV y);
	void (*Vertex2hvNV)(const GLhalfNV* v);
	void (*Vertex2i)(GLint x, GLint y);
	void (*Vertex2iv)(const GLint* v);
	void (*Vertex2s)(GLshort x, GLshort y);
	void (*Vertex2sv)(const GLshort* v);
	void (*Vertex3d)(GLdouble x, GLdouble y, GLdouble z);
	void (*Vertex3dv)(const GLdouble* v);
	void (*Vertex3f)(GLfloat x, GLfloat y, GLfloat z);
	void (*Vertex3fv)(const GLfloat* v);
	void (*Vertex3hNV)(GLhalfNV x, GLhalfNV y, GLhalfNV z);
	void (*Vertex3hvNV)(const GLhalfNV* v);
	void (*Vertex3i)(GLint x, GLint y, GLint z);
	void (*Vertex3iv)(const GLint* v);
	void (*Vertex3s)(GLshort x, GLshort y, GLshort z);
	void (*Vertex3sv)(const GLshort* v);
	void (*Vertex4d)(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	void (*Vertex4dv)(const GLdouble* v);
	void (*Vertex4f)(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
	void (*Vertex4fv)(const GLfloat* v);
	void (*Vertex4hNV)(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);
	void (*Vertex4hvNV)(const GLhalfNV* v);
	void (*Vertex4i)(GLint x, GLint y, GLint z, GLint w);
	void (*Vertex4iv)(const GLint* v);
	void (*Vertex4s)(GLshort x, GLshort y, GLshort z, GLshort w);
	void (*Vertex4sv)(const GLshort* v);
	void (*VertexArrayParameteriAPPLE)(GLenum pname, GLint param);
	void (*VertexArrayRangeAPPLE)(GLsizei length, GLvoid* pointer);
	void (*VertexArrayRangeNV)(GLsizei length, const GLvoid* pointer);
	void (*VertexAttrib1d)(GLuint index, GLdouble x);
	void (*VertexAttrib1dARB)(GLuint index, GLdouble x);
	void (*VertexAttrib1dNV)(GLuint index, GLdouble x);
	void (*VertexAttrib1dv)(GLuint index, const GLdouble* v);
	void (*VertexAttrib1dvARB)(GLuint index, const GLdouble* v);
	void (*VertexAttrib1dvNV)(GLuint index, const GLdouble* v);
	void (*VertexAttrib1f)(GLuint index, GLfloat x);
	void (*VertexAttrib1fARB)(GLuint index, GLfloat x);
	void (*VertexAttrib1fNV)(GLuint index, GLfloat x);
	void (*VertexAttrib1fv)(GLuint index, const GLfloat* v);
	void (*VertexAttrib1fvARB)(GLuint index, const GLfloat* v);
	void (*VertexAttrib1fvNV)(GLuint index, const GLfloat* v);
	void (*VertexAttrib1hNV)(GLuint index, GLhalfNV x);
	void (*VertexAttrib1hvNV)(GLuint index, const GLhalfNV* v);
	void (*VertexAttrib1s)(GLuint index, GLshort x);
	void (*VertexAttrib1sARB)(GLuint index, GLshort x);
	void (*VertexAttrib1sNV)(GLuint index, GLshort x);
	void (*VertexAttrib1sv)(GLuint index, const GLshort* v);
	void (*VertexAttrib1svARB)(GLuint index, const GLshort* v);
	void (*VertexAttrib1svNV)(GLuint index, const GLshort* v);
	void (*VertexAttrib2d)(GLuint index, GLdouble x, GLdouble y);
	void (*VertexAttrib2dARB)(GLuint index, GLdouble x, GLdouble y);
	void (*VertexAttrib2dNV)(GLuint index, GLdouble x, GLdouble y);
	void (*VertexAttrib2dv)(GLuint index, const GLdouble* v);
	void (*VertexAttrib2dvARB)(GLuint index, const GLdouble* v);
	void (*VertexAttrib2dvNV)(GLuint index, const GLdouble* v);
	void (*VertexAttrib2f)(GLuint index, GLfloat x, GLfloat y);
	void (*VertexAttrib2fARB)(GLuint index, GLfloat x, GLfloat y);
	void (*VertexAttrib2fNV)(GLuint index, GLfloat x, GLfloat y);
	void (*VertexAttrib2fv)(GLuint index, const GLfloat* v);
	void (*VertexAttrib2fvARB)(GLuint index, const GLfloat* v);
	void (*VertexAttrib2fvNV)(GLuint index, const GLfloat* v);
	void (*VertexAttrib2hNV)(GLuint index, GLhalfNV x, GLhalfNV y);
	void (*VertexAttrib2hvNV)(GLuint index, const GLhalfNV* v);
	void (*VertexAttrib2s)(GLuint index, GLshort x, GLshort y);
	void (*VertexAttrib2sARB)(GLuint index, GLshort x, GLshort y);
	void (*VertexAttrib2sNV)(GLuint index, GLshort x, GLshort y);
	void (*VertexAttrib2sv)(GLuint index, const GLshort* v);
	void (*VertexAttrib2svARB)(GLuint index, const GLshort* v);
	void (*VertexAttrib2svNV)(GLuint index, const GLshort* v);
	void (*VertexAttrib3d)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
	void (*VertexAttrib3dARB)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
	void (*VertexAttrib3dNV)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
	void (*VertexAttrib3dv)(GLuint index, const GLdouble* v);
	void (*VertexAttrib3dvARB)(GLuint index, const GLdouble* v);
	void (*VertexAttrib3dvNV)(GLuint index, const GLdouble* v);
	void (*VertexAttrib3f)(GLuint index, GLfloat x, GLfloat y, GLfloat z);
	void (*VertexAttrib3fARB)(GLuint index, GLfloat x, GLfloat y, GLfloat z);
	void (*VertexAttrib3fNV)(GLuint index, GLfloat x, GLfloat y, GLfloat z);
	void (*VertexAttrib3fv)(GLuint index, const GLfloat* v);
	void (*VertexAttrib3fvARB)(GLuint index, const GLfloat* v);
	void (*VertexAttrib3fvNV)(GLuint index, const GLfloat* v);
	void (*VertexAttrib3hNV)(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z);
	void (*VertexAttrib3hvNV)(GLuint index, const GLhalfNV* v);
	void (*VertexAttrib3s)(GLuint index, GLshort x, GLshort y, GLshort z);
	void (*VertexAttrib3sARB)(GLuint index, GLshort x, GLshort y, GLshort z);
	void (*VertexAttrib3sNV)(GLuint index, GLshort x, GLshort y, GLshort z);
	void (*VertexAttrib3sv)(GLuint index, const GLshort* v);
	void (*VertexAttrib3svARB)(GLuint index, const GLshort* v);
	void (*VertexAttrib3svNV)(GLuint index, const GLshort* v);
	void (*VertexAttrib4Nbv)(GLuint index, const GLbyte* v);
	void (*VertexAttrib4NbvARB)(GLuint index, const GLbyte* v);
	void (*VertexAttrib4Niv)(GLuint index, const GLint* v);
	void (*VertexAttrib4NivARB)(GLuint index, const GLint* v);
	void (*VertexAttrib4Nsv)(GLuint index, const GLshort* v);
	void (*VertexAttrib4NsvARB)(GLuint index, const GLshort* v);
	void (*VertexAttrib4Nub)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
	void (*VertexAttrib4NubARB)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
	void (*VertexAttrib4Nubv)(GLuint index, const GLubyte* v);
	void (*VertexAttrib4NubvARB)(GLuint index, const GLubyte* v);
	void (*VertexAttrib4Nuiv)(GLuint index, const GLuint* v);
	void (*VertexAttrib4NuivARB)(GLuint index, const GLuint* v);
	void (*VertexAttrib4Nusv)(GLuint index, const GLushort* v);
	void (*VertexAttrib4NusvARB)(GLuint index, const GLushort* v);
	void (*VertexAttrib4bv)(GLuint index, const GLbyte* v);
	void (*VertexAttrib4bvARB)(GLuint index, const GLbyte* v);
	void (*VertexAttrib4d)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	void (*VertexAttrib4dARB)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	void (*VertexAttrib4dNV)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	void (*VertexAttrib4dv)(GLuint index, const GLdouble* v);
	void (*VertexAttrib4dvARB)(GLuint index, const GLdouble* v);
	void (*VertexAttrib4dvNV)(GLuint index, const GLdouble* v);
	void (*VertexAttrib4f)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
	void (*VertexAttrib4fARB)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
	void (*VertexAttrib4fNV)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
	void (*VertexAttrib4fv)(GLuint index, const GLfloat* v);
	void (*VertexAttrib4fvARB)(GLuint index, const GLfloat* v);
	void (*VertexAttrib4fvNV)(GLuint index, const GLfloat* v);
	void (*VertexAttrib4hNV)(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);
	void (*VertexAttrib4hvNV)(GLuint index, const GLhalfNV* v);
	void (*VertexAttrib4iv)(GLuint index, const GLint* v);
	void (*VertexAttrib4ivARB)(GLuint index, const GLint* v);
	void (*VertexAttrib4s)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
	void (*VertexAttrib4sARB)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
	void (*VertexAttrib4sNV)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
	void (*VertexAttrib4sv)(GLuint index, const GLshort* v);
	void (*VertexAttrib4svARB)(GLuint index, const GLshort* v);
	void (*VertexAttrib4svNV)(GLuint index, const GLshort* v);
	void (*VertexAttrib4ubNV)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
	void (*VertexAttrib4ubv)(GLuint index, const GLubyte* v);
	void (*VertexAttrib4ubvARB)(GLuint index, const GLubyte* v);
	void (*VertexAttrib4ubvNV)(GLuint index, const GLubyte* v);
	void (*VertexAttrib4uiv)(GLuint index, const GLuint* v);
	void (*VertexAttrib4uivARB)(GLuint index, const GLuint* v);
	void (*VertexAttrib4usv)(GLuint index, const GLushort* v);
	void (*VertexAttrib4usvARB)(GLuint index, const GLushort* v);
	void (*VertexAttribArrayObjectATI)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset);
	void (*VertexAttribDivisorARB)(GLuint index, GLuint divisor);
	void (*VertexAttribFormatNV)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride);
	void (*VertexAttribI1i)(GLuint index, GLint x);
	void (*VertexAttribI1iEXT)(GLuint index, GLint x);
	void (*VertexAttribI1iv)(GLuint index, const GLint* v);
	void (*VertexAttribI1ivEXT)(GLuint index, const GLint* v);
	void (*VertexAttribI1ui)(GLuint index, GLuint x);
	void (*VertexAttribI1uiEXT)(GLuint index, GLuint x);
	void (*VertexAttribI1uiv)(GLuint index, const GLuint* v);
	void (*VertexAttribI1uivEXT)(GLuint index, const GLuint* v);
	void (*VertexAttribI2i)(GLuint index, GLint x, GLint y);
	void (*VertexAttribI2iEXT)(GLuint index, GLint x, GLint y);
	void (*VertexAttribI2iv)(GLuint index, const GLint* v);
	void (*VertexAttribI2ivEXT)(GLuint index, const GLint* v);
	void (*VertexAttribI2ui)(GLuint index, GLuint x, GLuint y);
	void (*VertexAttribI2uiEXT)(GLuint index, GLuint x, GLuint y);
	void (*VertexAttribI2uiv)(GLuint index, const GLuint* v);
	void (*VertexAttribI2uivEXT)(GLuint index, const GLuint* v);
	void (*VertexAttribI3i)(GLuint index, GLint x, GLint y, GLint z);
	void (*VertexAttribI3iEXT)(GLuint index, GLint x, GLint y, GLint z);
	void (*VertexAttribI3iv)(GLuint index, const GLint* v);
	void (*VertexAttribI3ivEXT)(GLuint index, const GLint* v);
	void (*VertexAttribI3ui)(GLuint index, GLuint x, GLuint y, GLuint z);
	void (*VertexAttribI3uiEXT)(GLuint index, GLuint x, GLuint y, GLuint z);
	void (*VertexAttribI3uiv)(GLuint index, const GLuint* v);
	void (*VertexAttribI3uivEXT)(GLuint index, const GLuint* v);
	void (*VertexAttribI4bv)(GLuint index, const GLbyte* v);
	void (*VertexAttribI4bvEXT)(GLuint index, const GLbyte* v);
	void (*VertexAttribI4i)(GLuint index, GLint x, GLint y, GLint z, GLint w);
	void (*VertexAttribI4iEXT)(GLuint index, GLint x, GLint y, GLint z, GLint w);
	void (*VertexAttribI4iv)(GLuint index, const GLint* v);
	void (*VertexAttribI4ivEXT)(GLuint index, const GLint* v);
	void (*VertexAttribI4sv)(GLuint index, const GLshort* v);
	void (*VertexAttribI4svEXT)(GLuint index, const GLshort* v);
	void (*VertexAttribI4ubv)(GLuint index, const GLubyte* v);
	void (*VertexAttribI4ubvEXT)(GLuint index, const GLubyte* v);
	void (*VertexAttribI4ui)(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
	void (*VertexAttribI4uiEXT)(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
	void (*VertexAttribI4uiv)(GLuint index, const GLuint* v);
	void (*VertexAttribI4uivEXT)(GLuint index, const GLuint* v);
	void (*VertexAttribI4usv)(GLuint index, const GLushort* v);
	void (*VertexAttribI4usvEXT)(GLuint index, const GLushort* v);
	void (*VertexAttribIFormatNV)(GLuint index, GLint size, GLenum type, GLsizei stride);
	void (*VertexAttribIPointer)(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid* pointer);
	void (*VertexAttribIPointerEXT)(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid* pointer);
	void (*VertexAttribP1ui)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
	void (*VertexAttribP1uiv)(GLuint index, GLenum type, GLboolean normalized, const GLuint* value);
	void (*VertexAttribP2ui)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
	void (*VertexAttribP2uiv)(GLuint index, GLenum type, GLboolean normalized, const GLuint* value);
	void (*VertexAttribP3ui)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
	void (*VertexAttribP3uiv)(GLuint index, GLenum type, GLboolean normalized, const GLuint* value);
	void (*VertexAttribP4ui)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
	void (*VertexAttribP4uiv)(GLuint index, GLenum type, GLboolean normalized, const GLuint* value);
	void (*VertexAttribPointer)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid* pointer);
	void (*VertexAttribPointerARB)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid* pointer);
	void (*VertexAttribPointerNV)(GLuint index, GLint fsize, GLenum type, GLsizei stride, const GLvoid* pointer);
	void (*VertexAttribs1dvNV)(GLuint index, GLsizei count, const GLdouble* v);
	void (*VertexAttribs1fvNV)(GLuint index, GLsizei count, const GLfloat* v);
	void (*VertexAttribs1hvNV)(GLuint index, GLsizei n, const GLhalfNV* v);
	void (*VertexAttribs1svNV)(GLuint index, GLsizei count, const GLshort* v);
	void (*VertexAttribs2dvNV)(GLuint index, GLsizei count, const GLdouble* v);
	void (*VertexAttribs2fvNV)(GLuint index, GLsizei count, const GLfloat* v);
	void (*VertexAttribs2hvNV)(GLuint index, GLsizei n, const GLhalfNV* v);
	void (*VertexAttribs2svNV)(GLuint index, GLsizei count, const GLshort* v);
	void (*VertexAttribs3dvNV)(GLuint index, GLsizei count, const GLdouble* v);
	void (*VertexAttribs3fvNV)(GLuint index, GLsizei count, const GLfloat* v);
	void (*VertexAttribs3hvNV)(GLuint index, GLsizei n, const GLhalfNV* v);
	void (*VertexAttribs3svNV)(GLuint index, GLsizei count, const GLshort* v);
	void (*VertexAttribs4dvNV)(GLuint index, GLsizei count, const GLdouble* v);
	void (*VertexAttribs4fvNV)(GLuint index, GLsizei count, const GLfloat* v);
	void (*VertexAttribs4hvNV)(GLuint index, GLsizei n, const GLhalfNV* v);
	void (*VertexAttribs4svNV)(GLuint index, GLsizei count, const GLshort* v);
	void (*VertexAttribs4ubvNV)(GLuint index, GLsizei count, const GLubyte* v);
	void (*VertexBlendARB)(GLint count);
	void (*VertexBlendEnvfATI)(GLenum pname, GLfloat param);
	void (*VertexBlendEnviATI)(GLenum pname, GLint param);
	void (*VertexFormatNV)(GLint size, GLenum type, GLsizei stride);
	void (*VertexP2ui)(GLenum type, GLuint value);
	void (*VertexP2uiv)(GLenum type, const GLuint* value);
	void (*VertexP3ui)(GLenum type, GLuint value);
	void (*VertexP3uiv)(GLenum type, const GLuint* value);
	void (*VertexP4ui)(GLenum type, GLuint value);
	void (*VertexP4uiv)(GLenum type, const GLuint* value);
	void (*VertexPointer)(GLint size, GLenum type, GLsizei stride, const GLvoid* pointer);
	void (*VertexPointerEXT)(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid* pointer);
	void (*VertexPointerListIBM)(GLint size, GLenum type, GLint stride, const GLvoid** pointer, GLint ptrstride);
	void (*VertexPointervINTEL)(GLint size, GLenum type, const GLvoid** pointer);
	void (*VertexStream1dATI)(GLenum stream, GLdouble x);
	void (*VertexStream1dvATI)(GLenum stream, const GLdouble* coords);
	void (*VertexStream1fATI)(GLenum stream, GLfloat x);
	void (*VertexStream1fvATI)(GLenum stream, const GLfloat* coords);
	void (*VertexStream1iATI)(GLenum stream, GLint x);
	void (*VertexStream1ivATI)(GLenum stream, const GLint* coords);
	void (*VertexStream1sATI)(GLenum stream, GLshort x);
	void (*VertexStream1svATI)(GLenum stream, const GLshort* coords);
	void (*VertexStream2dATI)(GLenum stream, GLdouble x, GLdouble y);
	void (*VertexStream2dvATI)(GLenum stream, const GLdouble* coords);
	void (*VertexStream2fATI)(GLenum stream, GLfloat x, GLfloat y);
	void (*VertexStream2fvATI)(GLenum stream, const GLfloat* coords);
	void (*VertexStream2iATI)(GLenum stream, GLint x, GLint y);
	void (*VertexStream2ivATI)(GLenum stream, const GLint* coords);
	void (*VertexStream2sATI)(GLenum stream, GLshort x, GLshort y);
	void (*VertexStream2svATI)(GLenum stream, const GLshort* coords);
	void (*VertexStream3dATI)(GLenum stream, GLdouble x, GLdouble y, GLdouble z);
	void (*VertexStream3dvATI)(GLenum stream, const GLdouble* coords);
	void (*VertexStream3fATI)(GLenum stream, GLfloat x, GLfloat y, GLfloat z);
	void (*VertexStream3fvATI)(GLenum stream, const GLfloat* coords);
	void (*VertexStream3iATI)(GLenum stream, GLint x, GLint y, GLint z);
	void (*VertexStream3ivATI)(GLenum stream, const GLint* coords);
	void (*VertexStream3sATI)(GLenum stream, GLshort x, GLshort y, GLshort z);
	void (*VertexStream3svATI)(GLenum stream, const GLshort* coords);
	void (*VertexStream4dATI)(GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	void (*VertexStream4dvATI)(GLenum stream, const GLdouble* coords);
	void (*VertexStream4fATI)(GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
	void (*VertexStream4fvATI)(GLenum stream, const GLfloat* coords);
	void (*VertexStream4iATI)(GLenum stream, GLint x, GLint y, GLint z, GLint w);
	void (*VertexStream4ivATI)(GLenum stream, const GLint* coords);
	void (*VertexStream4sATI)(GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w);
	void (*VertexStream4svATI)(GLenum stream, const GLshort* coords);
	void (*VertexWeightPointerEXT)(GLsizei size, GLenum type, GLsizei stride, const GLvoid* pointer);
	void (*VertexWeightfEXT)(GLfloat weight);
	void (*VertexWeightfvEXT)(const GLfloat* weight);
	void (*VertexWeighthNV)(GLhalfNV weight);
	void (*VertexWeighthvNV)(const GLhalfNV* weight);
	GLenum (*VideoCaptureNV)(GLuint video_capture_slot);
	void (*VideoCaptureStreamParameterdvNV)(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble* params);
	void (*VideoCaptureStreamParameterfvNV)(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat* params);
	void (*VideoCaptureStreamParameterivNV)(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint* params);
	void (*Viewport)(GLint x, GLint y, GLsizei width, GLsizei height);
	void (*WaitSync)(GLsync sync, GLbitfield flags, GLuint64 timeout);
	void (*WeightPointerARB)(GLint size, GLenum type, GLsizei stride, const GLvoid* pointer);
	void (*WeightbvARB)(GLint size, const GLbyte* weights);
	void (*WeightdvARB)(GLint size, const GLdouble* weights);
	void (*WeightfvARB)(GLint size, const GLfloat* weights);
	void (*WeightivARB)(GLint size, const GLint* weights);
	void (*WeightsvARB)(GLint size, const GLshort* weights);
	void (*WeightubvARB)(GLint size, const GLubyte* weights);
	void (*WeightuivARB)(GLint size, const GLuint* weights);
	void (*WeightusvARB)(GLint size, const GLushort* weights);
	void (*WindowPos2d)(GLdouble x, GLdouble y);
	void (*WindowPos2dARB)(GLdouble x, GLdouble y);
	void (*WindowPos2dMESA)(GLdouble x, GLdouble y);
	void (*WindowPos2dv)(const GLdouble* v);
	void (*WindowPos2dvARB)(const GLdouble* v);
	void (*WindowPos2dvMESA)(const GLdouble* v);
	void (*WindowPos2f)(GLfloat x, GLfloat y);
	void (*WindowPos2fARB)(GLfloat x, GLfloat y);
	void (*WindowPos2fMESA)(GLfloat x, GLfloat y);
	void (*WindowPos2fv)(const GLfloat* v);
	void (*WindowPos2fvARB)(const GLfloat* v);
	void (*WindowPos2fvMESA)(const GLfloat* v);
	void (*WindowPos2i)(GLint x, GLint y);
	void (*WindowPos2iARB)(GLint x, GLint y);
	void (*WindowPos2iMESA)(GLint x, GLint y);
	void (*WindowPos2iv)(const GLint* v);
	void (*WindowPos2ivARB)(const GLint* v);
	void (*WindowPos2ivMESA)(const GLint* v);
	void (*WindowPos2s)(GLshort x, GLshort y);
	void (*WindowPos2sARB)(GLshort x, GLshort y);
	void (*WindowPos2sMESA)(GLshort x, GLshort y);
	void (*WindowPos2sv)(const GLshort* v);
	void (*WindowPos2svARB)(const GLshort* v);
	void (*WindowPos2svMESA)(const GLshort* v);
	void (*WindowPos3d)(GLdouble x, GLdouble y, GLdouble z);
	void (*WindowPos3dARB)(GLdouble x, GLdouble y, GLdouble z);
	void (*WindowPos3dMESA)(GLdouble x, GLdouble y, GLdouble z);
	void (*WindowPos3dv)(const GLdouble* v);
	void (*WindowPos3dvARB)(const GLdouble* v);
	void (*WindowPos3dvMESA)(const GLdouble* v);
	void (*WindowPos3f)(GLfloat x, GLfloat y, GLfloat z);
	void (*WindowPos3fARB)(GLfloat x, GLfloat y, GLfloat z);
	void (*WindowPos3fMESA)(GLfloat x, GLfloat y, GLfloat z);
	void (*WindowPos3fv)(const GLfloat* v);
	void (*WindowPos3fvARB)(const GLfloat* v);
	void (*WindowPos3fvMESA)(const GLfloat* v);
	void (*WindowPos3i)(GLint x, GLint y, GLint z);
	void (*WindowPos3iARB)(GLint x, GLint y, GLint z);
	void (*WindowPos3iMESA)(GLint x, GLint y, GLint z);
	void (*WindowPos3iv)(const GLint* v);
	void (*WindowPos3ivARB)(const GLint* v);
	void (*WindowPos3ivMESA)(const GLint* v);
	void (*WindowPos3s)(GLshort x, GLshort y, GLshort z);
	void (*WindowPos3sARB)(GLshort x, GLshort y, GLshort z);
	void (*WindowPos3sMESA)(GLshort x, GLshort y, GLshort z);
	void (*WindowPos3sv)(const GLshort* v);
	void (*WindowPos3svARB)(const GLshort* v);
	void (*WindowPos3svMESA)(const GLshort* v);
	void (*WindowPos4dMESA)(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	void (*WindowPos4dvMESA)(const GLdouble* v);
	void (*WindowPos4fMESA)(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
	void (*WindowPos4fvMESA)(const GLfloat* v);
	void (*WindowPos4iMESA)(GLint x, GLint y, GLint z, GLint w);
	void (*WindowPos4ivMESA)(const GLint* v);
	void (*WindowPos4sMESA)(GLshort x, GLshort y, GLshort z, GLshort w);
	void (*WindowPos4svMESA)(const GLshort* v);
	void (*WriteMaskEXT)(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
};

} // namespace gl

} // namespace k3d

#endif // !K3DSDK_OPENGL_API_H
